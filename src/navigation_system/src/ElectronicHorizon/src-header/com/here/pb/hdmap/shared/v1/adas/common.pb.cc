// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/shared/v1/adas/common.proto

#include "com/here/pb/hdmap/shared/v1/adas/common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace shared {
namespace v1 {
namespace adas {
class ElevationMeasureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ElevationMeasure> _instance;
} _ElevationMeasure_default_instance_;
class HeadingMeasureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeadingMeasure> _instance;
} _HeadingMeasure_default_instance_;
class SlopeMeasureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SlopeMeasure> _instance;
} _SlopeMeasure_default_instance_;
class CurvatureMeasureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurvatureMeasure> _instance;
} _CurvatureMeasure_default_instance_;
}  // namespace adas
}  // namespace v1
}  // namespace shared
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
static void InitDefaultsElevationMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::adas::_ElevationMeasure_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ElevationMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsElevationMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto}, {}};

static void InitDefaultsHeadingMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::adas::_HeadingMeasure_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HeadingMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeadingMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto}, {}};

static void InitDefaultsSlopeMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::adas::_SlopeMeasure_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SlopeMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSlopeMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto}, {}};

static void InitDefaultsCurvatureMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::adas::_CurvatureMeasure_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CurvatureMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCurvatureMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto}, {}};

void InitDefaults_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ElevationMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeadingMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SlopeMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CurvatureMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure, cm_from_wgs84_ellipsoid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure, thousandths_of_degree_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure, thousandths_of_degree_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure, inverse_radius_millionths_of_meter_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure)},
  { 6, -1, sizeof(::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure)},
  { 12, -1, sizeof(::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure)},
  { 18, -1, sizeof(::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::adas::_ElevationMeasure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::adas::_HeadingMeasure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::adas::_SlopeMeasure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::adas::_CurvatureMeasure_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto = {
  {}, AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto, "com/here/pb/hdmap/shared/v1/adas/common.proto", schemas,
  file_default_instances, TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto::offsets,
  file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto, 4, file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto, file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto,
};

const char descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto[] =
  "\n-com/here/pb/hdmap/shared/v1/adas/commo"
  "n.proto\022 com.here.pb.hdmap.shared.v1.ada"
  "s\"3\n\020ElevationMeasure\022\037\n\027cm_from_WGS84_e"
  "llipsoid\030\001 \001(\021\"/\n\016HeadingMeasure\022\035\n\025thou"
  "sandths_of_degree\030\001 \001(\r\"-\n\014SlopeMeasure\022"
  "\035\n\025thousandths_of_degree\030\001 \001(\021\">\n\020Curvat"
  "ureMeasure\022*\n\"inverse_radius_millionths_"
  "of_meter\030\001 \001(\021b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto = {
  false, InitDefaults_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto, 
  descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto,
  "com/here/pb/hdmap/shared/v1/adas/common.proto", &assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto, 302,
};

void AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto = []() { AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto(); return true; }();
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace shared {
namespace v1 {
namespace adas {

// ===================================================================

void ElevationMeasure::InitAsDefaultInstance() {
}
class ElevationMeasure::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElevationMeasure::kCmFromWGS84EllipsoidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElevationMeasure::ElevationMeasure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
}
ElevationMeasure::ElevationMeasure(const ElevationMeasure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cm_from_wgs84_ellipsoid_ = from.cm_from_wgs84_ellipsoid_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
}

void ElevationMeasure::SharedCtor() {
  cm_from_wgs84_ellipsoid_ = 0;
}

ElevationMeasure::~ElevationMeasure() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
  SharedDtor();
}

void ElevationMeasure::SharedDtor() {
}

void ElevationMeasure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElevationMeasure& ElevationMeasure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ElevationMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void ElevationMeasure::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cm_from_wgs84_ellipsoid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ElevationMeasure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ElevationMeasure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // sint32 cm_from_WGS84_ellipsoid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_cm_from_wgs84_ellipsoid(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ElevationMeasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 cm_from_WGS84_ellipsoid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &cm_from_wgs84_ellipsoid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ElevationMeasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 cm_from_WGS84_ellipsoid = 1;
  if (this->cm_from_wgs84_ellipsoid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->cm_from_wgs84_ellipsoid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
}

::google::protobuf::uint8* ElevationMeasure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 cm_from_WGS84_ellipsoid = 1;
  if (this->cm_from_wgs84_ellipsoid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->cm_from_wgs84_ellipsoid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
  return target;
}

size_t ElevationMeasure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 cm_from_WGS84_ellipsoid = 1;
  if (this->cm_from_wgs84_ellipsoid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->cm_from_wgs84_ellipsoid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElevationMeasure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
  GOOGLE_DCHECK_NE(&from, this);
  const ElevationMeasure* source =
      ::google::protobuf::DynamicCastToGenerated<ElevationMeasure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
    MergeFrom(*source);
  }
}

void ElevationMeasure::MergeFrom(const ElevationMeasure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cm_from_wgs84_ellipsoid() != 0) {
    set_cm_from_wgs84_ellipsoid(from.cm_from_wgs84_ellipsoid());
  }
}

void ElevationMeasure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElevationMeasure::CopyFrom(const ElevationMeasure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.adas.ElevationMeasure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElevationMeasure::IsInitialized() const {
  return true;
}

void ElevationMeasure::Swap(ElevationMeasure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ElevationMeasure::InternalSwap(ElevationMeasure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cm_from_wgs84_ellipsoid_, other->cm_from_wgs84_ellipsoid_);
}

::google::protobuf::Metadata ElevationMeasure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HeadingMeasure::InitAsDefaultInstance() {
}
class HeadingMeasure::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeadingMeasure::kThousandthsOfDegreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeadingMeasure::HeadingMeasure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
}
HeadingMeasure::HeadingMeasure(const HeadingMeasure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thousandths_of_degree_ = from.thousandths_of_degree_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
}

void HeadingMeasure::SharedCtor() {
  thousandths_of_degree_ = 0u;
}

HeadingMeasure::~HeadingMeasure() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
  SharedDtor();
}

void HeadingMeasure::SharedDtor() {
}

void HeadingMeasure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeadingMeasure& HeadingMeasure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HeadingMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void HeadingMeasure::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thousandths_of_degree_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeadingMeasure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HeadingMeasure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 thousandths_of_degree = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_thousandths_of_degree(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeadingMeasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 thousandths_of_degree = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thousandths_of_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeadingMeasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 thousandths_of_degree = 1;
  if (this->thousandths_of_degree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->thousandths_of_degree(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
}

::google::protobuf::uint8* HeadingMeasure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 thousandths_of_degree = 1;
  if (this->thousandths_of_degree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->thousandths_of_degree(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
  return target;
}

size_t HeadingMeasure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 thousandths_of_degree = 1;
  if (this->thousandths_of_degree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thousandths_of_degree());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeadingMeasure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
  GOOGLE_DCHECK_NE(&from, this);
  const HeadingMeasure* source =
      ::google::protobuf::DynamicCastToGenerated<HeadingMeasure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
    MergeFrom(*source);
  }
}

void HeadingMeasure::MergeFrom(const HeadingMeasure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.thousandths_of_degree() != 0) {
    set_thousandths_of_degree(from.thousandths_of_degree());
  }
}

void HeadingMeasure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadingMeasure::CopyFrom(const HeadingMeasure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.adas.HeadingMeasure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadingMeasure::IsInitialized() const {
  return true;
}

void HeadingMeasure::Swap(HeadingMeasure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeadingMeasure::InternalSwap(HeadingMeasure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(thousandths_of_degree_, other->thousandths_of_degree_);
}

::google::protobuf::Metadata HeadingMeasure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SlopeMeasure::InitAsDefaultInstance() {
}
class SlopeMeasure::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SlopeMeasure::kThousandthsOfDegreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlopeMeasure::SlopeMeasure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
}
SlopeMeasure::SlopeMeasure(const SlopeMeasure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thousandths_of_degree_ = from.thousandths_of_degree_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
}

void SlopeMeasure::SharedCtor() {
  thousandths_of_degree_ = 0;
}

SlopeMeasure::~SlopeMeasure() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
  SharedDtor();
}

void SlopeMeasure::SharedDtor() {
}

void SlopeMeasure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SlopeMeasure& SlopeMeasure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SlopeMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void SlopeMeasure::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thousandths_of_degree_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SlopeMeasure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SlopeMeasure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // sint32 thousandths_of_degree = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_thousandths_of_degree(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SlopeMeasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 thousandths_of_degree = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &thousandths_of_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SlopeMeasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 thousandths_of_degree = 1;
  if (this->thousandths_of_degree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->thousandths_of_degree(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
}

::google::protobuf::uint8* SlopeMeasure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 thousandths_of_degree = 1;
  if (this->thousandths_of_degree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->thousandths_of_degree(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
  return target;
}

size_t SlopeMeasure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 thousandths_of_degree = 1;
  if (this->thousandths_of_degree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->thousandths_of_degree());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlopeMeasure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
  GOOGLE_DCHECK_NE(&from, this);
  const SlopeMeasure* source =
      ::google::protobuf::DynamicCastToGenerated<SlopeMeasure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
    MergeFrom(*source);
  }
}

void SlopeMeasure::MergeFrom(const SlopeMeasure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.thousandths_of_degree() != 0) {
    set_thousandths_of_degree(from.thousandths_of_degree());
  }
}

void SlopeMeasure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlopeMeasure::CopyFrom(const SlopeMeasure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.adas.SlopeMeasure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlopeMeasure::IsInitialized() const {
  return true;
}

void SlopeMeasure::Swap(SlopeMeasure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlopeMeasure::InternalSwap(SlopeMeasure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(thousandths_of_degree_, other->thousandths_of_degree_);
}

::google::protobuf::Metadata SlopeMeasure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CurvatureMeasure::InitAsDefaultInstance() {
}
class CurvatureMeasure::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurvatureMeasure::kInverseRadiusMillionthsOfMeterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurvatureMeasure::CurvatureMeasure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
}
CurvatureMeasure::CurvatureMeasure(const CurvatureMeasure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inverse_radius_millionths_of_meter_ = from.inverse_radius_millionths_of_meter_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
}

void CurvatureMeasure::SharedCtor() {
  inverse_radius_millionths_of_meter_ = 0;
}

CurvatureMeasure::~CurvatureMeasure() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
  SharedDtor();
}

void CurvatureMeasure::SharedDtor() {
}

void CurvatureMeasure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurvatureMeasure& CurvatureMeasure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CurvatureMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void CurvatureMeasure::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inverse_radius_millionths_of_meter_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CurvatureMeasure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CurvatureMeasure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // sint32 inverse_radius_millionths_of_meter = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_inverse_radius_millionths_of_meter(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CurvatureMeasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 inverse_radius_millionths_of_meter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &inverse_radius_millionths_of_meter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CurvatureMeasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 inverse_radius_millionths_of_meter = 1;
  if (this->inverse_radius_millionths_of_meter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->inverse_radius_millionths_of_meter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
}

::google::protobuf::uint8* CurvatureMeasure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 inverse_radius_millionths_of_meter = 1;
  if (this->inverse_radius_millionths_of_meter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->inverse_radius_millionths_of_meter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
  return target;
}

size_t CurvatureMeasure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 inverse_radius_millionths_of_meter = 1;
  if (this->inverse_radius_millionths_of_meter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->inverse_radius_millionths_of_meter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurvatureMeasure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
  GOOGLE_DCHECK_NE(&from, this);
  const CurvatureMeasure* source =
      ::google::protobuf::DynamicCastToGenerated<CurvatureMeasure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
    MergeFrom(*source);
  }
}

void CurvatureMeasure::MergeFrom(const CurvatureMeasure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inverse_radius_millionths_of_meter() != 0) {
    set_inverse_radius_millionths_of_meter(from.inverse_radius_millionths_of_meter());
  }
}

void CurvatureMeasure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurvatureMeasure::CopyFrom(const CurvatureMeasure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurvatureMeasure::IsInitialized() const {
  return true;
}

void CurvatureMeasure::Swap(CurvatureMeasure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurvatureMeasure::InternalSwap(CurvatureMeasure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(inverse_radius_millionths_of_meter_, other->inverse_radius_millionths_of_meter_);
}

::google::protobuf::Metadata CurvatureMeasure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace adas
}  // namespace v1
}  // namespace shared
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
