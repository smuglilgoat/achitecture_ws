// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/shared/v1/core/common.proto

#include "com/here/pb/hdmap/shared/v1/core/common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace shared {
namespace v1 {
namespace core {
class RoadUsersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadUsers> _instance;
} _RoadUsers_default_instance_;
class SpeedLimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedLimit> _instance;
} _SpeedLimit_default_instance_;
}  // namespace core
}  // namespace v1
}  // namespace shared
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
static void InitDefaultsRoadUsers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_RoadUsers_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::RoadUsers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::RoadUsers::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RoadUsers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoadUsers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto}, {}};

static void InitDefaultsSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_SpeedLimit_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::SpeedLimit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::SpeedLimit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto}, {}};

void InitDefaults_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_RoadUsers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadUsers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadUsers, automobiles_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadUsers, buses_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadUsers, taxis_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadUsers, carpools_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadUsers, pedestrians_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadUsers, trucks_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadUsers, through_traffic_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadUsers, deliveries_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadUsers, emergency_vehicles_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadUsers, motorcycles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::SpeedLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::SpeedLimit, value_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::SpeedLimit, unit_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::SpeedLimit, source_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::SpeedLimit, is_unlimited_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::RoadUsers)},
  { 15, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::SpeedLimit)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_RoadUsers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_SpeedLimit_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto = {
  {}, AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto, "com/here/pb/hdmap/shared/v1/core/common.proto", schemas,
  file_default_instances, TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto::offsets,
  file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto, 2, file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto, file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto,
};

const char descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto[] =
  "\n-com/here/pb/hdmap/shared/v1/core/commo"
  "n.proto\022 com.here.pb.hdmap.shared.v1.cor"
  "e\"\323\001\n\tRoadUsers\022\023\n\013automobiles\030\001 \001(\010\022\r\n\005"
  "buses\030\002 \001(\010\022\r\n\005taxis\030\003 \001(\010\022\020\n\010carpools\030\004"
  " \001(\010\022\023\n\013pedestrians\030\005 \001(\010\022\016\n\006trucks\030\006 \001("
  "\010\022\027\n\017through_traffic\030\007 \001(\010\022\022\n\ndeliveries"
  "\030\010 \001(\010\022\032\n\022emergency_vehicles\030\t \001(\010\022\023\n\013mo"
  "torcycles\030\n \001(\010\"\252\004\n\nSpeedLimit\022\r\n\005value\030"
  "\001 \001(\r\022I\n\004unit\030\002 \001(\0162;.com.here.pb.hdmap."
  "shared.v1.core.SpeedLimit.SpeedLimitUnit"
  "\022M\n\006source\030\003 \001(\0162=.com.here.pb.hdmap.sha"
  "red.v1.core.SpeedLimit.SpeedLimitSource\022"
  "\024\n\014is_unlimited\030\004 \001(\010\"Y\n\016SpeedLimitUnit\022"
  "\032\n\026SpeedLimitUnit_UNKNOWN\020\000\022\027\n\023KILOMETER"
  "S_PER_HOUR\020\001\022\022\n\016MILES_PER_HOUR\020\002\"\201\002\n\020Spe"
  "edLimitSource\022\034\n\030SpeedLimitSource_UNKNOW"
  "N\020\000\022\017\n\013POSTED_SIGN\020\001\022\026\n\022BUILT_UP_AREA_SI"
  "GN\020\002\022\021\n\rMOTORWAY_SIGN\020\003\022\014\n\010UNPOSTED\020\004\022\017\n"
  "\013POSTED_LANE\020\005\022\016\n\nPOSTED_DIR\020\006\022\033\n\027MOTORI"
  "SED_VEHICLES_ONLY\020\007\022\037\n\033DERIVED_FROM_SPEE"
  "D_CATEGORY\020\010\022\021\n\rRAMP_UNPOSTED\020\t\022\023\n\017TRAFF"
  "IC_CALMING\020\nb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto = {
  false, InitDefaults_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto, 
  descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto,
  "com/here/pb/hdmap/shared/v1/core/common.proto", &assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto, 860,
};

void AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto = []() { AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto(); return true; }();
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace shared {
namespace v1 {
namespace core {
const ::google::protobuf::EnumDescriptor* SpeedLimit_SpeedLimitUnit_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto[0];
}
bool SpeedLimit_SpeedLimitUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SpeedLimit_SpeedLimitUnit SpeedLimit::SpeedLimitUnit_UNKNOWN;
const SpeedLimit_SpeedLimitUnit SpeedLimit::KILOMETERS_PER_HOUR;
const SpeedLimit_SpeedLimitUnit SpeedLimit::MILES_PER_HOUR;
const SpeedLimit_SpeedLimitUnit SpeedLimit::SpeedLimitUnit_MIN;
const SpeedLimit_SpeedLimitUnit SpeedLimit::SpeedLimitUnit_MAX;
const int SpeedLimit::SpeedLimitUnit_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SpeedLimit_SpeedLimitSource_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto[1];
}
bool SpeedLimit_SpeedLimitSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SpeedLimit_SpeedLimitSource SpeedLimit::SpeedLimitSource_UNKNOWN;
const SpeedLimit_SpeedLimitSource SpeedLimit::POSTED_SIGN;
const SpeedLimit_SpeedLimitSource SpeedLimit::BUILT_UP_AREA_SIGN;
const SpeedLimit_SpeedLimitSource SpeedLimit::MOTORWAY_SIGN;
const SpeedLimit_SpeedLimitSource SpeedLimit::UNPOSTED;
const SpeedLimit_SpeedLimitSource SpeedLimit::POSTED_LANE;
const SpeedLimit_SpeedLimitSource SpeedLimit::POSTED_DIR;
const SpeedLimit_SpeedLimitSource SpeedLimit::MOTORISED_VEHICLES_ONLY;
const SpeedLimit_SpeedLimitSource SpeedLimit::DERIVED_FROM_SPEED_CATEGORY;
const SpeedLimit_SpeedLimitSource SpeedLimit::RAMP_UNPOSTED;
const SpeedLimit_SpeedLimitSource SpeedLimit::TRAFFIC_CALMING;
const SpeedLimit_SpeedLimitSource SpeedLimit::SpeedLimitSource_MIN;
const SpeedLimit_SpeedLimitSource SpeedLimit::SpeedLimitSource_MAX;
const int SpeedLimit::SpeedLimitSource_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RoadUsers::InitAsDefaultInstance() {
}
class RoadUsers::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadUsers::kAutomobilesFieldNumber;
const int RoadUsers::kBusesFieldNumber;
const int RoadUsers::kTaxisFieldNumber;
const int RoadUsers::kCarpoolsFieldNumber;
const int RoadUsers::kPedestriansFieldNumber;
const int RoadUsers::kTrucksFieldNumber;
const int RoadUsers::kThroughTrafficFieldNumber;
const int RoadUsers::kDeliveriesFieldNumber;
const int RoadUsers::kEmergencyVehiclesFieldNumber;
const int RoadUsers::kMotorcyclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadUsers::RoadUsers()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.RoadUsers)
}
RoadUsers::RoadUsers(const RoadUsers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&automobiles_, &from.automobiles_,
    static_cast<size_t>(reinterpret_cast<char*>(&motorcycles_) -
    reinterpret_cast<char*>(&automobiles_)) + sizeof(motorcycles_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.RoadUsers)
}

void RoadUsers::SharedCtor() {
  ::memset(&automobiles_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motorcycles_) -
      reinterpret_cast<char*>(&automobiles_)) + sizeof(motorcycles_));
}

RoadUsers::~RoadUsers() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.RoadUsers)
  SharedDtor();
}

void RoadUsers::SharedDtor() {
}

void RoadUsers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadUsers& RoadUsers::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RoadUsers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void RoadUsers::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.RoadUsers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&automobiles_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motorcycles_) -
      reinterpret_cast<char*>(&automobiles_)) + sizeof(motorcycles_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoadUsers::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RoadUsers*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool automobiles = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_automobiles(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool buses = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_buses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool taxis = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_taxis(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool carpools = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_carpools(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool pedestrians = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_pedestrians(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool trucks = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_trucks(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool through_traffic = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_through_traffic(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool deliveries = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_deliveries(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool emergency_vehicles = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_emergency_vehicles(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool motorcycles = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_motorcycles(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoadUsers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.RoadUsers)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool automobiles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &automobiles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool buses = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool taxis = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &taxis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool carpools = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &carpools_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool pedestrians = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pedestrians_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool trucks = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trucks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool through_traffic = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &through_traffic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool deliveries = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deliveries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool emergency_vehicles = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emergency_vehicles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool motorcycles = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &motorcycles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.RoadUsers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.RoadUsers)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoadUsers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.RoadUsers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool automobiles = 1;
  if (this->automobiles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->automobiles(), output);
  }

  // bool buses = 2;
  if (this->buses() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->buses(), output);
  }

  // bool taxis = 3;
  if (this->taxis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->taxis(), output);
  }

  // bool carpools = 4;
  if (this->carpools() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->carpools(), output);
  }

  // bool pedestrians = 5;
  if (this->pedestrians() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pedestrians(), output);
  }

  // bool trucks = 6;
  if (this->trucks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->trucks(), output);
  }

  // bool through_traffic = 7;
  if (this->through_traffic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->through_traffic(), output);
  }

  // bool deliveries = 8;
  if (this->deliveries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->deliveries(), output);
  }

  // bool emergency_vehicles = 9;
  if (this->emergency_vehicles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->emergency_vehicles(), output);
  }

  // bool motorcycles = 10;
  if (this->motorcycles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->motorcycles(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.RoadUsers)
}

::google::protobuf::uint8* RoadUsers::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.RoadUsers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool automobiles = 1;
  if (this->automobiles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->automobiles(), target);
  }

  // bool buses = 2;
  if (this->buses() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->buses(), target);
  }

  // bool taxis = 3;
  if (this->taxis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->taxis(), target);
  }

  // bool carpools = 4;
  if (this->carpools() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->carpools(), target);
  }

  // bool pedestrians = 5;
  if (this->pedestrians() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->pedestrians(), target);
  }

  // bool trucks = 6;
  if (this->trucks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->trucks(), target);
  }

  // bool through_traffic = 7;
  if (this->through_traffic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->through_traffic(), target);
  }

  // bool deliveries = 8;
  if (this->deliveries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->deliveries(), target);
  }

  // bool emergency_vehicles = 9;
  if (this->emergency_vehicles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->emergency_vehicles(), target);
  }

  // bool motorcycles = 10;
  if (this->motorcycles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->motorcycles(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.RoadUsers)
  return target;
}

size_t RoadUsers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.RoadUsers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool automobiles = 1;
  if (this->automobiles() != 0) {
    total_size += 1 + 1;
  }

  // bool buses = 2;
  if (this->buses() != 0) {
    total_size += 1 + 1;
  }

  // bool taxis = 3;
  if (this->taxis() != 0) {
    total_size += 1 + 1;
  }

  // bool carpools = 4;
  if (this->carpools() != 0) {
    total_size += 1 + 1;
  }

  // bool pedestrians = 5;
  if (this->pedestrians() != 0) {
    total_size += 1 + 1;
  }

  // bool trucks = 6;
  if (this->trucks() != 0) {
    total_size += 1 + 1;
  }

  // bool through_traffic = 7;
  if (this->through_traffic() != 0) {
    total_size += 1 + 1;
  }

  // bool deliveries = 8;
  if (this->deliveries() != 0) {
    total_size += 1 + 1;
  }

  // bool emergency_vehicles = 9;
  if (this->emergency_vehicles() != 0) {
    total_size += 1 + 1;
  }

  // bool motorcycles = 10;
  if (this->motorcycles() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadUsers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.RoadUsers)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadUsers* source =
      ::google::protobuf::DynamicCastToGenerated<RoadUsers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.RoadUsers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.RoadUsers)
    MergeFrom(*source);
  }
}

void RoadUsers::MergeFrom(const RoadUsers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.RoadUsers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.automobiles() != 0) {
    set_automobiles(from.automobiles());
  }
  if (from.buses() != 0) {
    set_buses(from.buses());
  }
  if (from.taxis() != 0) {
    set_taxis(from.taxis());
  }
  if (from.carpools() != 0) {
    set_carpools(from.carpools());
  }
  if (from.pedestrians() != 0) {
    set_pedestrians(from.pedestrians());
  }
  if (from.trucks() != 0) {
    set_trucks(from.trucks());
  }
  if (from.through_traffic() != 0) {
    set_through_traffic(from.through_traffic());
  }
  if (from.deliveries() != 0) {
    set_deliveries(from.deliveries());
  }
  if (from.emergency_vehicles() != 0) {
    set_emergency_vehicles(from.emergency_vehicles());
  }
  if (from.motorcycles() != 0) {
    set_motorcycles(from.motorcycles());
  }
}

void RoadUsers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.RoadUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadUsers::CopyFrom(const RoadUsers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.RoadUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadUsers::IsInitialized() const {
  return true;
}

void RoadUsers::Swap(RoadUsers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadUsers::InternalSwap(RoadUsers* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(automobiles_, other->automobiles_);
  swap(buses_, other->buses_);
  swap(taxis_, other->taxis_);
  swap(carpools_, other->carpools_);
  swap(pedestrians_, other->pedestrians_);
  swap(trucks_, other->trucks_);
  swap(through_traffic_, other->through_traffic_);
  swap(deliveries_, other->deliveries_);
  swap(emergency_vehicles_, other->emergency_vehicles_);
  swap(motorcycles_, other->motorcycles_);
}

::google::protobuf::Metadata RoadUsers::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SpeedLimit::InitAsDefaultInstance() {
}
class SpeedLimit::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedLimit::kValueFieldNumber;
const int SpeedLimit::kUnitFieldNumber;
const int SpeedLimit::kSourceFieldNumber;
const int SpeedLimit::kIsUnlimitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedLimit::SpeedLimit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
}
SpeedLimit::SpeedLimit(const SpeedLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_unlimited_) -
    reinterpret_cast<char*>(&value_)) + sizeof(is_unlimited_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
}

void SpeedLimit::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_unlimited_) -
      reinterpret_cast<char*>(&value_)) + sizeof(is_unlimited_));
}

SpeedLimit::~SpeedLimit() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
  SharedDtor();
}

void SpeedLimit::SharedDtor() {
}

void SpeedLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedLimit& SpeedLimit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void SpeedLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_unlimited_) -
      reinterpret_cast<char*>(&value_)) + sizeof(is_unlimited_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpeedLimit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SpeedLimit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.SpeedLimit.SpeedLimitUnit unit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_unit(static_cast<::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitUnit>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.SpeedLimit.SpeedLimitSource source = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_source(static_cast<::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitSource>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_unlimited = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_unlimited(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpeedLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.SpeedLimit.SpeedLimitUnit unit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_unit(static_cast< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitUnit >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.SpeedLimit.SpeedLimitSource source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_source(static_cast< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_unlimited = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unlimited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpeedLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit.SpeedLimitUnit unit = 2;
  if (this->unit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unit(), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit.SpeedLimitSource source = 3;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->source(), output);
  }

  // bool is_unlimited = 4;
  if (this->is_unlimited() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_unlimited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
}

::google::protobuf::uint8* SpeedLimit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit.SpeedLimitUnit unit = 2;
  if (this->unit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unit(), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit.SpeedLimitSource source = 3;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->source(), target);
  }

  // bool is_unlimited = 4;
  if (this->is_unlimited() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_unlimited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
  return target;
}

size_t SpeedLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit.SpeedLimitUnit unit = 2;
  if (this->unit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
  }

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit.SpeedLimitSource source = 3;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  // bool is_unlimited = 4;
  if (this->is_unlimited() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedLimit* source =
      ::google::protobuf::DynamicCastToGenerated<SpeedLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
    MergeFrom(*source);
  }
}

void SpeedLimit::MergeFrom(const SpeedLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.unit() != 0) {
    set_unit(from.unit());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.is_unlimited() != 0) {
    set_is_unlimited(from.is_unlimited());
  }
}

void SpeedLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedLimit::CopyFrom(const SpeedLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedLimit::IsInitialized() const {
  return true;
}

void SpeedLimit::Swap(SpeedLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedLimit::InternalSwap(SpeedLimit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(unit_, other->unit_);
  swap(source_, other->source_);
  swap(is_unlimited_, other->is_unlimited_);
}

::google::protobuf::Metadata SpeedLimit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace v1
}  // namespace shared
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::RoadUsers* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::RoadUsers >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::RoadUsers >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::SpeedLimit* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
