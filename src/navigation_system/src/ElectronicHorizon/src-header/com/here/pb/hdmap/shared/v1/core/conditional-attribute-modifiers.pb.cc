// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/shared/v1/core/conditional-attribute-modifiers.proto

#include "com/here/pb/hdmap/shared/v1/core/conditional-attribute-modifiers.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DateTimeModifier_DayOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DateTimeModifier_DaysOfWeek_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DateTimeModifier_MonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DateTimeModifier_WeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DateTimeModifier_DateRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DateTimeModifier_DayOfMonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DateTimeModifier_DayOfWeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DateTimeModifier_DayOfWeekOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DateTimeModifier_TimeRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace shared {
namespace v1 {
namespace core {
class DateTimeModifier_TimeRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTimeModifier_TimeRange> _instance;
} _DateTimeModifier_TimeRange_default_instance_;
class DateTimeModifier_DateRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTimeModifier_DateRange> _instance;
} _DateTimeModifier_DateRange_default_instance_;
class DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYearDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear> _instance;
} _DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear_default_instance_;
class DateTimeModifier_DayOfMonthOfYearRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTimeModifier_DayOfMonthOfYearRange> _instance;
} _DateTimeModifier_DayOfMonthOfYearRange_default_instance_;
class DateTimeModifier_MonthOfYearRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTimeModifier_MonthOfYearRange> _instance;
} _DateTimeModifier_MonthOfYearRange_default_instance_;
class DateTimeModifier_WeekOfMonthRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTimeModifier_WeekOfMonthRange> _instance;
} _DateTimeModifier_WeekOfMonthRange_default_instance_;
class DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYearDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear> _instance;
} _DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear_default_instance_;
class DateTimeModifier_DayOfWeekOfYearRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTimeModifier_DayOfWeekOfYearRange> _instance;
} _DateTimeModifier_DayOfWeekOfYearRange_default_instance_;
class DateTimeModifier_DayOfMonthRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTimeModifier_DayOfMonthRange> _instance;
} _DateTimeModifier_DayOfMonthRange_default_instance_;
class DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth> _instance;
} _DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth_default_instance_;
class DateTimeModifier_DayOfWeekOfMonthRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTimeModifier_DayOfWeekOfMonthRange> _instance;
} _DateTimeModifier_DayOfWeekOfMonthRange_default_instance_;
class DateTimeModifier_DaysOfWeekDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTimeModifier_DaysOfWeek> _instance;
} _DateTimeModifier_DaysOfWeek_default_instance_;
class DateTimeModifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTimeModifier> _instance;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek* days_of_week_;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange* date_range_;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange* day_of_month_range_;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange* day_of_week_of_month_range_;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange* day_of_week_of_year_range_;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange* week_of_month_range_;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange* month_of_year_range_;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange* day_of_month_of_year_range_;
  ::google::protobuf::internal::ArenaStringPtr externally_specified_;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange* time_range_;
  bool is_dawn_to_dusk_;
  bool is_dusk_to_dawn_;
} _DateTimeModifier_default_instance_;
}  // namespace core
}  // namespace v1
}  // namespace shared
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
static void InitDefaultsDateTimeModifier_TimeRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_TimeRange_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DateTimeModifier_TimeRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDateTimeModifier_TimeRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsDateTimeModifier_DateRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DateRange_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DateTimeModifier_DateRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDateTimeModifier_DateRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsDateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto}, {}};

static void InitDefaultsDateTimeModifier_DayOfMonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfMonthOfYearRange_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DateTimeModifier_DayOfMonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDateTimeModifier_DayOfMonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto}, {
      &scc_info_DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,}};

static void InitDefaultsDateTimeModifier_MonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_MonthOfYearRange_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DateTimeModifier_MonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDateTimeModifier_MonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto}, {}};

static void InitDefaultsDateTimeModifier_WeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_WeekOfMonthRange_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DateTimeModifier_WeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDateTimeModifier_WeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto}, {}};

static void InitDefaultsDateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto}, {}};

static void InitDefaultsDateTimeModifier_DayOfWeekOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfYearRange_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DateTimeModifier_DayOfWeekOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDateTimeModifier_DayOfWeekOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto}, {
      &scc_info_DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,}};

static void InitDefaultsDateTimeModifier_DayOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfMonthRange_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DateTimeModifier_DayOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDateTimeModifier_DayOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto}, {}};

static void InitDefaultsDateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto}, {}};

static void InitDefaultsDateTimeModifier_DayOfWeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfMonthRange_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DateTimeModifier_DayOfWeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDateTimeModifier_DayOfWeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto}, {
      &scc_info_DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,}};

static void InitDefaultsDateTimeModifier_DaysOfWeek_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DaysOfWeek_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DateTimeModifier_DaysOfWeek_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDateTimeModifier_DaysOfWeek_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto}, {}};

static void InitDefaultsDateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_DateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsDateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto}, {
      &scc_info_DateTimeModifier_DaysOfWeek_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,
      &scc_info_DateTimeModifier_DateRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,
      &scc_info_DateTimeModifier_DayOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,
      &scc_info_DateTimeModifier_DayOfWeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,
      &scc_info_DateTimeModifier_DayOfWeekOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,
      &scc_info_DateTimeModifier_WeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,
      &scc_info_DateTimeModifier_MonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,
      &scc_info_DateTimeModifier_DayOfMonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,
      &scc_info_DateTimeModifier_TimeRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,}};

void InitDefaults_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_DateTimeModifier_TimeRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTimeModifier_DateRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTimeModifier_DayOfMonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTimeModifier_MonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTimeModifier_WeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTimeModifier_DayOfWeekOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTimeModifier_DayOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTimeModifier_DayOfWeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTimeModifier_DaysOfWeek_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange, start_time_of_day_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange, end_time_of_day_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange, start_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear, day_of_month_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear, month_of_year_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange, start_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange, end_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange, is_from_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange, start_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange, start_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange, end_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange, is_from_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear, day_of_week_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear, week_of_year_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange, start_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange, start_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth, day_of_week_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth, week_in_month_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange, start_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange, end_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange, isfromend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek, day_of_week_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifierDefaultTypeInternal, days_of_week_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifierDefaultTypeInternal, date_range_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifierDefaultTypeInternal, day_of_month_range_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifierDefaultTypeInternal, day_of_week_of_month_range_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifierDefaultTypeInternal, day_of_week_of_year_range_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifierDefaultTypeInternal, week_of_month_range_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifierDefaultTypeInternal, month_of_year_range_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifierDefaultTypeInternal, day_of_month_of_year_range_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifierDefaultTypeInternal, externally_specified_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifierDefaultTypeInternal, time_range_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifierDefaultTypeInternal, is_dawn_to_dusk_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifierDefaultTypeInternal, is_dusk_to_dawn_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier, is_exclusion_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier, is_approximate_seasonal_range_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier, dateModifier_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier, timeModifier_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange)},
  { 7, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange)},
  { 14, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear)},
  { 21, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange)},
  { 29, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange)},
  { 36, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange)},
  { 44, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear)},
  { 51, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange)},
  { 58, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange)},
  { 65, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth)},
  { 72, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange)},
  { 80, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek)},
  { 86, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_TimeRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DateRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfMonthOfYearRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_MonthOfYearRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_WeekOfMonthRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfYearRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfMonthRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfMonthRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DaysOfWeek_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto = {
  {}, AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto, "com/here/pb/hdmap/shared/v1/core/conditional-attribute-modifiers.proto", schemas,
  file_default_instances, TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto::offsets,
  file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto, 13, file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto, file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto,
};

const char descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[] =
  "\nFcom/here/pb/hdmap/shared/v1/core/condi"
  "tional-attribute-modifiers.proto\022 com.he"
  "re.pb.hdmap.shared.v1.core\032\037google/proto"
  "buf/timestamp.proto\032\036google/protobuf/dur"
  "ation.proto\"\335\032\n\020DateTimeModifier\022U\n\014days"
  "_of_week\030\001 \001(\0132=.com.here.pb.hdmap.share"
  "d.v1.core.DateTimeModifier.DaysOfWeekH\000\022"
  "R\n\ndate_range\030\002 \001(\0132<.com.here.pb.hdmap."
  "shared.v1.core.DateTimeModifier.DateRang"
  "eH\000\022`\n\022day_of_month_range\030\003 \001(\0132B.com.he"
  "re.pb.hdmap.shared.v1.core.DateTimeModif"
  "ier.DayOfMonthRangeH\000\022n\n\032day_of_week_of_"
  "month_range\030\004 \001(\0132H.com.here.pb.hdmap.sh"
  "ared.v1.core.DateTimeModifier.DayOfWeekO"
  "fMonthRangeH\000\022l\n\031day_of_week_of_year_ran"
  "ge\030\005 \001(\0132G.com.here.pb.hdmap.shared.v1.c"
  "ore.DateTimeModifier.DayOfWeekOfYearRang"
  "eH\000\022b\n\023week_of_month_range\030\006 \001(\0132C.com.h"
  "ere.pb.hdmap.shared.v1.core.DateTimeModi"
  "fier.WeekOfMonthRangeH\000\022b\n\023month_of_year"
  "_range\030\007 \001(\0132C.com.here.pb.hdmap.shared."
  "v1.core.DateTimeModifier.MonthOfYearRang"
  "eH\000\022n\n\032day_of_month_of_year_range\030\010 \001(\0132"
  "H.com.here.pb.hdmap.shared.v1.core.DateT"
  "imeModifier.DayOfMonthOfYearRangeH\000\022\036\n\024e"
  "xternally_specified\030\t \001(\tH\000\022R\n\ntime_rang"
  "e\030\n \001(\0132<.com.here.pb.hdmap.shared.v1.co"
  "re.DateTimeModifier.TimeRangeH\001\022\031\n\017is_da"
  "wn_to_dusk\030\013 \001(\010H\001\022\031\n\017is_dusk_to_dawn\030\014 "
  "\001(\010H\001\022\024\n\014is_exclusion\030\r \001(\010\022%\n\035is_approx"
  "imate_seasonal_range\030\016 \001(\010\032u\n\tTimeRange\022"
  "4\n\021start_time_of_day\030\001 \001(\0132\031.google.prot"
  "obuf.Duration\0222\n\017end_time_of_day\030\002 \001(\0132\031"
  ".google.protobuf.Duration\032_\n\tDateRange\022)"
  "\n\005start\030\001 \001(\0132\032.google.protobuf.Timestam"
  "p\022\'\n\003end\030\002 \001(\0132\032.google.protobuf.Timesta"
  "mp\032\377\002\n\025DayOfMonthOfYearRange\022h\n\005start\030\001 "
  "\001(\0132Y.com.here.pb.hdmap.shared.v1.core.D"
  "ateTimeModifier.DayOfMonthOfYearRange.Da"
  "yOfMonthOfYear\022f\n\003end\030\002 \001(\0132Y.com.here.p"
  "b.hdmap.shared.v1.core.DateTimeModifier."
  "DayOfMonthOfYearRange.DayOfMonthOfYear\022\023"
  "\n\013is_from_end\030\003 \001(\010\032\177\n\020DayOfMonthOfYear\022"
  "\024\n\014day_of_month\030\001 \001(\r\022U\n\rmonth_of_year\030\002"
  " \001(\0162>.com.here.pb.hdmap.shared.v1.core."
  "DateTimeModifier.MonthOfYear\032\256\001\n\020MonthOf"
  "YearRange\022M\n\005start\030\001 \001(\0162>.com.here.pb.h"
  "dmap.shared.v1.core.DateTimeModifier.Mon"
  "thOfYear\022K\n\003end\030\002 \001(\0162>.com.here.pb.hdma"
  "p.shared.v1.core.DateTimeModifier.MonthO"
  "fYear\032\303\001\n\020WeekOfMonthRange\022M\n\005start\030\001 \001("
  "\0162>.com.here.pb.hdmap.shared.v1.core.Dat"
  "eTimeModifier.WeekInMonth\022K\n\003end\030\002 \001(\0162>"
  ".com.here.pb.hdmap.shared.v1.core.DateTi"
  "meModifier.WeekInMonth\022\023\n\013is_from_end\030\003 "
  "\001(\010\032\340\002\n\024DayOfWeekOfYearRange\022f\n\005start\030\001 "
  "\001(\0132W.com.here.pb.hdmap.shared.v1.core.D"
  "ateTimeModifier.DayOfWeekOfYearRange.Day"
  "OfWeekOfYear\022d\n\003end\030\002 \001(\0132W.com.here.pb."
  "hdmap.shared.v1.core.DateTimeModifier.Da"
  "yOfWeekOfYearRange.DayOfWeekOfYear\032z\n\017Da"
  "yOfWeekOfYear\022Q\n\013day_of_week\030\001 \001(\0162<.com"
  ".here.pb.hdmap.shared.v1.core.DateTimeMo"
  "difier.DayOfWeek\022\024\n\014week_of_year\030\002 \001(\r\032-"
  "\n\017DayOfMonthRange\022\r\n\005start\030\001 \001(\r\022\013\n\003end\030"
  "\002 \001(\r\032\273\003\n\025DayOfWeekOfMonthRange\022h\n\005start"
  "\030\001 \001(\0132Y.com.here.pb.hdmap.shared.v1.cor"
  "e.DateTimeModifier.DayOfWeekOfMonthRange"
  ".DayOfWeekOfMonth\022f\n\003end\030\002 \001(\0132Y.com.her"
  "e.pb.hdmap.shared.v1.core.DateTimeModifi"
  "er.DayOfWeekOfMonthRange.DayOfWeekOfMont"
  "h\022\021\n\tisFromEnd\030\003 \001(\010\032\274\001\n\020DayOfWeekOfMont"
  "h\022Q\n\013day_of_week\030\001 \001(\0162<.com.here.pb.hdm"
  "ap.shared.v1.core.DateTimeModifier.DayOf"
  "Week\022U\n\rweek_in_month\030\002 \001(\0162>.com.here.p"
  "b.hdmap.shared.v1.core.DateTimeModifier."
  "WeekInMonth\032_\n\nDaysOfWeek\022Q\n\013day_of_week"
  "\030\001 \003(\0162<.com.here.pb.hdmap.shared.v1.cor"
  "e.DateTimeModifier.DayOfWeek\"\270\001\n\013MonthOf"
  "Year\022\027\n\023MonthOfYear_UNKNOWN\020\000\022\013\n\007JANUARY"
  "\020\001\022\014\n\010FEBRUARY\020\002\022\t\n\005MARCH\020\003\022\t\n\005APRIL\020\004\022\007"
  "\n\003MAY\020\005\022\010\n\004JUNE\020\006\022\010\n\004JULY\020\007\022\n\n\006AUGUST\020\010\022"
  "\r\n\tSEPTEMBER\020\t\022\013\n\007OCTOBER\020\n\022\014\n\010NOVEMBER\020"
  "\013\022\014\n\010DECEMBER\020\014\"b\n\013WeekInMonth\022\027\n\023WeekIn"
  "Month_UNKNOWN\020\000\022\n\n\006WEEK_1\020\001\022\n\n\006WEEK_2\020\002\022"
  "\n\n\006WEEK_3\020\003\022\n\n\006WEEK_4\020\004\022\n\n\006WEEK_5\020\005\"~\n\tD"
  "ayOfWeek\022\025\n\021DayOfWeek_UNKNOWN\020\000\022\n\n\006SUNDA"
  "Y\020\001\022\n\n\006MONDAY\020\002\022\013\n\007TUESDAY\020\003\022\r\n\tWEDNESDA"
  "Y\020\004\022\014\n\010THURSDAY\020\005\022\n\n\006FRIDAY\020\006\022\014\n\010SATURDA"
  "Y\020\007B\016\n\014dateModifierB\016\n\014timeModifierb\006pro"
  "to3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto = {
  false, InitDefaults_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto, 
  descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto,
  "com/here/pb/hdmap/shared/v1/core/conditional-attribute-modifiers.proto", &assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto, 3603,
};

void AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fduration_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto = []() { AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto(); return true; }();
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace shared {
namespace v1 {
namespace core {
const ::google::protobuf::EnumDescriptor* DateTimeModifier_MonthOfYear_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[0];
}
bool DateTimeModifier_MonthOfYear_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DateTimeModifier_MonthOfYear DateTimeModifier::MonthOfYear_UNKNOWN;
const DateTimeModifier_MonthOfYear DateTimeModifier::JANUARY;
const DateTimeModifier_MonthOfYear DateTimeModifier::FEBRUARY;
const DateTimeModifier_MonthOfYear DateTimeModifier::MARCH;
const DateTimeModifier_MonthOfYear DateTimeModifier::APRIL;
const DateTimeModifier_MonthOfYear DateTimeModifier::MAY;
const DateTimeModifier_MonthOfYear DateTimeModifier::JUNE;
const DateTimeModifier_MonthOfYear DateTimeModifier::JULY;
const DateTimeModifier_MonthOfYear DateTimeModifier::AUGUST;
const DateTimeModifier_MonthOfYear DateTimeModifier::SEPTEMBER;
const DateTimeModifier_MonthOfYear DateTimeModifier::OCTOBER;
const DateTimeModifier_MonthOfYear DateTimeModifier::NOVEMBER;
const DateTimeModifier_MonthOfYear DateTimeModifier::DECEMBER;
const DateTimeModifier_MonthOfYear DateTimeModifier::MonthOfYear_MIN;
const DateTimeModifier_MonthOfYear DateTimeModifier::MonthOfYear_MAX;
const int DateTimeModifier::MonthOfYear_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DateTimeModifier_WeekInMonth_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[1];
}
bool DateTimeModifier_WeekInMonth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DateTimeModifier_WeekInMonth DateTimeModifier::WeekInMonth_UNKNOWN;
const DateTimeModifier_WeekInMonth DateTimeModifier::WEEK_1;
const DateTimeModifier_WeekInMonth DateTimeModifier::WEEK_2;
const DateTimeModifier_WeekInMonth DateTimeModifier::WEEK_3;
const DateTimeModifier_WeekInMonth DateTimeModifier::WEEK_4;
const DateTimeModifier_WeekInMonth DateTimeModifier::WEEK_5;
const DateTimeModifier_WeekInMonth DateTimeModifier::WeekInMonth_MIN;
const DateTimeModifier_WeekInMonth DateTimeModifier::WeekInMonth_MAX;
const int DateTimeModifier::WeekInMonth_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DateTimeModifier_DayOfWeek_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[2];
}
bool DateTimeModifier_DayOfWeek_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DateTimeModifier_DayOfWeek DateTimeModifier::DayOfWeek_UNKNOWN;
const DateTimeModifier_DayOfWeek DateTimeModifier::SUNDAY;
const DateTimeModifier_DayOfWeek DateTimeModifier::MONDAY;
const DateTimeModifier_DayOfWeek DateTimeModifier::TUESDAY;
const DateTimeModifier_DayOfWeek DateTimeModifier::WEDNESDAY;
const DateTimeModifier_DayOfWeek DateTimeModifier::THURSDAY;
const DateTimeModifier_DayOfWeek DateTimeModifier::FRIDAY;
const DateTimeModifier_DayOfWeek DateTimeModifier::SATURDAY;
const DateTimeModifier_DayOfWeek DateTimeModifier::DayOfWeek_MIN;
const DateTimeModifier_DayOfWeek DateTimeModifier::DayOfWeek_MAX;
const int DateTimeModifier::DayOfWeek_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DateTimeModifier_TimeRange::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_TimeRange_default_instance_._instance.get_mutable()->start_time_of_day_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_TimeRange_default_instance_._instance.get_mutable()->end_time_of_day_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
class DateTimeModifier_TimeRange::HasBitSetters {
 public:
  static const ::google::protobuf::Duration& start_time_of_day(const DateTimeModifier_TimeRange* msg);
  static const ::google::protobuf::Duration& end_time_of_day(const DateTimeModifier_TimeRange* msg);
};

const ::google::protobuf::Duration&
DateTimeModifier_TimeRange::HasBitSetters::start_time_of_day(const DateTimeModifier_TimeRange* msg) {
  return *msg->start_time_of_day_;
}
const ::google::protobuf::Duration&
DateTimeModifier_TimeRange::HasBitSetters::end_time_of_day(const DateTimeModifier_TimeRange* msg) {
  return *msg->end_time_of_day_;
}
void DateTimeModifier_TimeRange::clear_start_time_of_day() {
  if (GetArenaNoVirtual() == nullptr && start_time_of_day_ != nullptr) {
    delete start_time_of_day_;
  }
  start_time_of_day_ = nullptr;
}
void DateTimeModifier_TimeRange::clear_end_time_of_day() {
  if (GetArenaNoVirtual() == nullptr && end_time_of_day_ != nullptr) {
    delete end_time_of_day_;
  }
  end_time_of_day_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTimeModifier_TimeRange::kStartTimeOfDayFieldNumber;
const int DateTimeModifier_TimeRange::kEndTimeOfDayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTimeModifier_TimeRange::DateTimeModifier_TimeRange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
}
DateTimeModifier_TimeRange::DateTimeModifier_TimeRange(const DateTimeModifier_TimeRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_time_of_day()) {
    start_time_of_day_ = new ::google::protobuf::Duration(*from.start_time_of_day_);
  } else {
    start_time_of_day_ = nullptr;
  }
  if (from.has_end_time_of_day()) {
    end_time_of_day_ = new ::google::protobuf::Duration(*from.end_time_of_day_);
  } else {
    end_time_of_day_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
}

void DateTimeModifier_TimeRange::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DateTimeModifier_TimeRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::memset(&start_time_of_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_of_day_) -
      reinterpret_cast<char*>(&start_time_of_day_)) + sizeof(end_time_of_day_));
}

DateTimeModifier_TimeRange::~DateTimeModifier_TimeRange() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
  SharedDtor();
}

void DateTimeModifier_TimeRange::SharedDtor() {
  if (this != internal_default_instance()) delete start_time_of_day_;
  if (this != internal_default_instance()) delete end_time_of_day_;
}

void DateTimeModifier_TimeRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTimeModifier_TimeRange& DateTimeModifier_TimeRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTimeModifier_TimeRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  return *internal_default_instance();
}


void DateTimeModifier_TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && start_time_of_day_ != nullptr) {
    delete start_time_of_day_;
  }
  start_time_of_day_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_time_of_day_ != nullptr) {
    delete end_time_of_day_;
  }
  end_time_of_day_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTimeModifier_TimeRange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTimeModifier_TimeRange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Duration start_time_of_day = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_start_time_of_day();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Duration end_time_of_day = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_end_time_of_day();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTimeModifier_TimeRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration start_time_of_day = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time_of_day()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration end_time_of_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_time_of_day()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTimeModifier_TimeRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time_of_day = 1;
  if (this->has_start_time_of_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::start_time_of_day(this), output);
  }

  // .google.protobuf.Duration end_time_of_day = 2;
  if (this->has_end_time_of_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::end_time_of_day(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
}

::google::protobuf::uint8* DateTimeModifier_TimeRange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time_of_day = 1;
  if (this->has_start_time_of_day()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::start_time_of_day(this), target);
  }

  // .google.protobuf.Duration end_time_of_day = 2;
  if (this->has_end_time_of_day()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::end_time_of_day(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
  return target;
}

size_t DateTimeModifier_TimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time_of_day = 1;
  if (this->has_start_time_of_day()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_of_day_);
  }

  // .google.protobuf.Duration end_time_of_day = 2;
  if (this->has_end_time_of_day()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_time_of_day_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeModifier_TimeRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTimeModifier_TimeRange* source =
      ::google::protobuf::DynamicCastToGenerated<DateTimeModifier_TimeRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
    MergeFrom(*source);
  }
}

void DateTimeModifier_TimeRange::MergeFrom(const DateTimeModifier_TimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_time_of_day()) {
    mutable_start_time_of_day()->::google::protobuf::Duration::MergeFrom(from.start_time_of_day());
  }
  if (from.has_end_time_of_day()) {
    mutable_end_time_of_day()->::google::protobuf::Duration::MergeFrom(from.end_time_of_day());
  }
}

void DateTimeModifier_TimeRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeModifier_TimeRange::CopyFrom(const DateTimeModifier_TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeModifier_TimeRange::IsInitialized() const {
  return true;
}

void DateTimeModifier_TimeRange::Swap(DateTimeModifier_TimeRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTimeModifier_TimeRange::InternalSwap(DateTimeModifier_TimeRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_time_of_day_, other->start_time_of_day_);
  swap(end_time_of_day_, other->end_time_of_day_);
}

::google::protobuf::Metadata DateTimeModifier_TimeRange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTimeModifier_DateRange::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DateRange_default_instance_._instance.get_mutable()->start_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DateRange_default_instance_._instance.get_mutable()->end_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class DateTimeModifier_DateRange::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& start(const DateTimeModifier_DateRange* msg);
  static const ::google::protobuf::Timestamp& end(const DateTimeModifier_DateRange* msg);
};

const ::google::protobuf::Timestamp&
DateTimeModifier_DateRange::HasBitSetters::start(const DateTimeModifier_DateRange* msg) {
  return *msg->start_;
}
const ::google::protobuf::Timestamp&
DateTimeModifier_DateRange::HasBitSetters::end(const DateTimeModifier_DateRange* msg) {
  return *msg->end_;
}
void DateTimeModifier_DateRange::clear_start() {
  if (GetArenaNoVirtual() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void DateTimeModifier_DateRange::clear_end() {
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTimeModifier_DateRange::kStartFieldNumber;
const int DateTimeModifier_DateRange::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTimeModifier_DateRange::DateTimeModifier_DateRange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
}
DateTimeModifier_DateRange::DateTimeModifier_DateRange(const DateTimeModifier_DateRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::google::protobuf::Timestamp(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from.has_end()) {
    end_ = new ::google::protobuf::Timestamp(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
}

void DateTimeModifier_DateRange::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DateTimeModifier_DateRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

DateTimeModifier_DateRange::~DateTimeModifier_DateRange() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
  SharedDtor();
}

void DateTimeModifier_DateRange::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void DateTimeModifier_DateRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTimeModifier_DateRange& DateTimeModifier_DateRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTimeModifier_DateRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  return *internal_default_instance();
}


void DateTimeModifier_DateRange::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTimeModifier_DateRange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTimeModifier_DateRange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_start();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_end();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTimeModifier_DateRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTimeModifier_DateRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::start(this), output);
  }

  // .google.protobuf.Timestamp end = 2;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::end(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
}

::google::protobuf::uint8* DateTimeModifier_DateRange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::start(this), target);
  }

  // .google.protobuf.Timestamp end = 2;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::end(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
  return target;
}

size_t DateTimeModifier_DateRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .google.protobuf.Timestamp end = 2;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeModifier_DateRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTimeModifier_DateRange* source =
      ::google::protobuf::DynamicCastToGenerated<DateTimeModifier_DateRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
    MergeFrom(*source);
  }
}

void DateTimeModifier_DateRange::MergeFrom(const DateTimeModifier_DateRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    mutable_start()->::google::protobuf::Timestamp::MergeFrom(from.start());
  }
  if (from.has_end()) {
    mutable_end()->::google::protobuf::Timestamp::MergeFrom(from.end());
  }
}

void DateTimeModifier_DateRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeModifier_DateRange::CopyFrom(const DateTimeModifier_DateRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeModifier_DateRange::IsInitialized() const {
  return true;
}

void DateTimeModifier_DateRange::Swap(DateTimeModifier_DateRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTimeModifier_DateRange::InternalSwap(DateTimeModifier_DateRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::google::protobuf::Metadata DateTimeModifier_DateRange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::InitAsDefaultInstance() {
}
class DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::kDayOfMonthFieldNumber;
const int DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::kMonthOfYearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
}
DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear(const DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&day_of_month_, &from.day_of_month_,
    static_cast<size_t>(reinterpret_cast<char*>(&month_of_year_) -
    reinterpret_cast<char*>(&day_of_month_)) + sizeof(month_of_year_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
}

void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::SharedCtor() {
  ::memset(&day_of_month_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&month_of_year_) -
      reinterpret_cast<char*>(&day_of_month_)) + sizeof(month_of_year_));
}

DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::~DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
  SharedDtor();
}

void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::SharedDtor() {
}

void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  return *internal_default_instance();
}


void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&day_of_month_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&month_of_year_) -
      reinterpret_cast<char*>(&day_of_month_)) + sizeof(month_of_year_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 day_of_month = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_day_of_month(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear month_of_year = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_month_of_year(static_cast<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 day_of_month = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_of_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear month_of_year = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_month_of_year(static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 day_of_month = 1;
  if (this->day_of_month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day_of_month(), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear month_of_year = 2;
  if (this->month_of_year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->month_of_year(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
}

::google::protobuf::uint8* DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 day_of_month = 1;
  if (this->day_of_month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day_of_month(), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear month_of_year = 2;
  if (this->month_of_year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->month_of_year(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
  return target;
}

size_t DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 day_of_month = 1;
  if (this->day_of_month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->day_of_month());
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear month_of_year = 2;
  if (this->month_of_year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->month_of_year());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* source =
      ::google::protobuf::DynamicCastToGenerated<DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
    MergeFrom(*source);
  }
}

void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::MergeFrom(const DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.day_of_month() != 0) {
    set_day_of_month(from.day_of_month());
  }
  if (from.month_of_year() != 0) {
    set_month_of_year(from.month_of_year());
  }
}

void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::CopyFrom(const DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::IsInitialized() const {
  return true;
}

void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::Swap(DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::InternalSwap(DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(day_of_month_, other->day_of_month_);
  swap(month_of_year_, other->month_of_year_);
}

::google::protobuf::Metadata DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTimeModifier_DayOfMonthOfYearRange::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfMonthOfYearRange_default_instance_._instance.get_mutable()->start_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfMonthOfYearRange_default_instance_._instance.get_mutable()->end_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::internal_default_instance());
}
class DateTimeModifier_DayOfMonthOfYearRange::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& start(const DateTimeModifier_DayOfMonthOfYearRange* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& end(const DateTimeModifier_DayOfMonthOfYearRange* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear&
DateTimeModifier_DayOfMonthOfYearRange::HasBitSetters::start(const DateTimeModifier_DayOfMonthOfYearRange* msg) {
  return *msg->start_;
}
const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear&
DateTimeModifier_DayOfMonthOfYearRange::HasBitSetters::end(const DateTimeModifier_DayOfMonthOfYearRange* msg) {
  return *msg->end_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTimeModifier_DayOfMonthOfYearRange::kStartFieldNumber;
const int DateTimeModifier_DayOfMonthOfYearRange::kEndFieldNumber;
const int DateTimeModifier_DayOfMonthOfYearRange::kIsFromEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTimeModifier_DayOfMonthOfYearRange::DateTimeModifier_DayOfMonthOfYearRange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
}
DateTimeModifier_DayOfMonthOfYearRange::DateTimeModifier_DayOfMonthOfYearRange(const DateTimeModifier_DayOfMonthOfYearRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from.has_end()) {
    end_ = new ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear(*from.end_);
  } else {
    end_ = nullptr;
  }
  is_from_end_ = from.is_from_end_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
}

void DateTimeModifier_DayOfMonthOfYearRange::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DateTimeModifier_DayOfMonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_from_end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(is_from_end_));
}

DateTimeModifier_DayOfMonthOfYearRange::~DateTimeModifier_DayOfMonthOfYearRange() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
  SharedDtor();
}

void DateTimeModifier_DayOfMonthOfYearRange::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void DateTimeModifier_DayOfMonthOfYearRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTimeModifier_DayOfMonthOfYearRange& DateTimeModifier_DayOfMonthOfYearRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTimeModifier_DayOfMonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  return *internal_default_instance();
}


void DateTimeModifier_DayOfMonthOfYearRange::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  is_from_end_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTimeModifier_DayOfMonthOfYearRange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTimeModifier_DayOfMonthOfYearRange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::_InternalParse;
        object = msg->mutable_start();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::_InternalParse;
        object = msg->mutable_end();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool is_from_end = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_from_end(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTimeModifier_DayOfMonthOfYearRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_from_end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_from_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTimeModifier_DayOfMonthOfYearRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear start = 1;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::start(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear end = 2;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::end(this), output);
  }

  // bool is_from_end = 3;
  if (this->is_from_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_from_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
}

::google::protobuf::uint8* DateTimeModifier_DayOfMonthOfYearRange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear start = 1;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::start(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear end = 2;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::end(this), target);
  }

  // bool is_from_end = 3;
  if (this->is_from_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_from_end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
  return target;
}

size_t DateTimeModifier_DayOfMonthOfYearRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear end = 2;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // bool is_from_end = 3;
  if (this->is_from_end() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeModifier_DayOfMonthOfYearRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTimeModifier_DayOfMonthOfYearRange* source =
      ::google::protobuf::DynamicCastToGenerated<DateTimeModifier_DayOfMonthOfYearRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
    MergeFrom(*source);
  }
}

void DateTimeModifier_DayOfMonthOfYearRange::MergeFrom(const DateTimeModifier_DayOfMonthOfYearRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    mutable_start()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::MergeFrom(from.start());
  }
  if (from.has_end()) {
    mutable_end()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::MergeFrom(from.end());
  }
  if (from.is_from_end() != 0) {
    set_is_from_end(from.is_from_end());
  }
}

void DateTimeModifier_DayOfMonthOfYearRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeModifier_DayOfMonthOfYearRange::CopyFrom(const DateTimeModifier_DayOfMonthOfYearRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeModifier_DayOfMonthOfYearRange::IsInitialized() const {
  return true;
}

void DateTimeModifier_DayOfMonthOfYearRange::Swap(DateTimeModifier_DayOfMonthOfYearRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTimeModifier_DayOfMonthOfYearRange::InternalSwap(DateTimeModifier_DayOfMonthOfYearRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(is_from_end_, other->is_from_end_);
}

::google::protobuf::Metadata DateTimeModifier_DayOfMonthOfYearRange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTimeModifier_MonthOfYearRange::InitAsDefaultInstance() {
}
class DateTimeModifier_MonthOfYearRange::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTimeModifier_MonthOfYearRange::kStartFieldNumber;
const int DateTimeModifier_MonthOfYearRange::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTimeModifier_MonthOfYearRange::DateTimeModifier_MonthOfYearRange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
}
DateTimeModifier_MonthOfYearRange::DateTimeModifier_MonthOfYearRange(const DateTimeModifier_MonthOfYearRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
}

void DateTimeModifier_MonthOfYearRange::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

DateTimeModifier_MonthOfYearRange::~DateTimeModifier_MonthOfYearRange() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
  SharedDtor();
}

void DateTimeModifier_MonthOfYearRange::SharedDtor() {
}

void DateTimeModifier_MonthOfYearRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTimeModifier_MonthOfYearRange& DateTimeModifier_MonthOfYearRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTimeModifier_MonthOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  return *internal_default_instance();
}


void DateTimeModifier_MonthOfYearRange::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTimeModifier_MonthOfYearRange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTimeModifier_MonthOfYearRange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_start(static_cast<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_end(static_cast<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTimeModifier_MonthOfYearRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_start(static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_end(static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTimeModifier_MonthOfYearRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->start(), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
}

::google::protobuf::uint8* DateTimeModifier_MonthOfYearRange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->start(), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
  return target;
}

size_t DateTimeModifier_MonthOfYearRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->start());
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeModifier_MonthOfYearRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTimeModifier_MonthOfYearRange* source =
      ::google::protobuf::DynamicCastToGenerated<DateTimeModifier_MonthOfYearRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
    MergeFrom(*source);
  }
}

void DateTimeModifier_MonthOfYearRange::MergeFrom(const DateTimeModifier_MonthOfYearRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void DateTimeModifier_MonthOfYearRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeModifier_MonthOfYearRange::CopyFrom(const DateTimeModifier_MonthOfYearRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeModifier_MonthOfYearRange::IsInitialized() const {
  return true;
}

void DateTimeModifier_MonthOfYearRange::Swap(DateTimeModifier_MonthOfYearRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTimeModifier_MonthOfYearRange::InternalSwap(DateTimeModifier_MonthOfYearRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::google::protobuf::Metadata DateTimeModifier_MonthOfYearRange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTimeModifier_WeekOfMonthRange::InitAsDefaultInstance() {
}
class DateTimeModifier_WeekOfMonthRange::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTimeModifier_WeekOfMonthRange::kStartFieldNumber;
const int DateTimeModifier_WeekOfMonthRange::kEndFieldNumber;
const int DateTimeModifier_WeekOfMonthRange::kIsFromEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTimeModifier_WeekOfMonthRange::DateTimeModifier_WeekOfMonthRange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
}
DateTimeModifier_WeekOfMonthRange::DateTimeModifier_WeekOfMonthRange(const DateTimeModifier_WeekOfMonthRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_from_end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(is_from_end_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
}

void DateTimeModifier_WeekOfMonthRange::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_from_end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(is_from_end_));
}

DateTimeModifier_WeekOfMonthRange::~DateTimeModifier_WeekOfMonthRange() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
  SharedDtor();
}

void DateTimeModifier_WeekOfMonthRange::SharedDtor() {
}

void DateTimeModifier_WeekOfMonthRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTimeModifier_WeekOfMonthRange& DateTimeModifier_WeekOfMonthRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTimeModifier_WeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  return *internal_default_instance();
}


void DateTimeModifier_WeekOfMonthRange::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_from_end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(is_from_end_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTimeModifier_WeekOfMonthRange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTimeModifier_WeekOfMonthRange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_start(static_cast<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_end(static_cast<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_from_end = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_from_end(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTimeModifier_WeekOfMonthRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_start(static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_end(static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_from_end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_from_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTimeModifier_WeekOfMonthRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->start(), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->end(), output);
  }

  // bool is_from_end = 3;
  if (this->is_from_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_from_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
}

::google::protobuf::uint8* DateTimeModifier_WeekOfMonthRange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->start(), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->end(), target);
  }

  // bool is_from_end = 3;
  if (this->is_from_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_from_end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
  return target;
}

size_t DateTimeModifier_WeekOfMonthRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->start());
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->end());
  }

  // bool is_from_end = 3;
  if (this->is_from_end() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeModifier_WeekOfMonthRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTimeModifier_WeekOfMonthRange* source =
      ::google::protobuf::DynamicCastToGenerated<DateTimeModifier_WeekOfMonthRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
    MergeFrom(*source);
  }
}

void DateTimeModifier_WeekOfMonthRange::MergeFrom(const DateTimeModifier_WeekOfMonthRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.is_from_end() != 0) {
    set_is_from_end(from.is_from_end());
  }
}

void DateTimeModifier_WeekOfMonthRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeModifier_WeekOfMonthRange::CopyFrom(const DateTimeModifier_WeekOfMonthRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeModifier_WeekOfMonthRange::IsInitialized() const {
  return true;
}

void DateTimeModifier_WeekOfMonthRange::Swap(DateTimeModifier_WeekOfMonthRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTimeModifier_WeekOfMonthRange::InternalSwap(DateTimeModifier_WeekOfMonthRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(is_from_end_, other->is_from_end_);
}

::google::protobuf::Metadata DateTimeModifier_WeekOfMonthRange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::InitAsDefaultInstance() {
}
class DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::kDayOfWeekFieldNumber;
const int DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::kWeekOfYearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
}
DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear(const DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&day_of_week_, &from.day_of_week_,
    static_cast<size_t>(reinterpret_cast<char*>(&week_of_year_) -
    reinterpret_cast<char*>(&day_of_week_)) + sizeof(week_of_year_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
}

void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::SharedCtor() {
  ::memset(&day_of_week_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_of_year_) -
      reinterpret_cast<char*>(&day_of_week_)) + sizeof(week_of_year_));
}

DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::~DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
  SharedDtor();
}

void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::SharedDtor() {
}

void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  return *internal_default_instance();
}


void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&day_of_week_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_of_year_) -
      reinterpret_cast<char*>(&day_of_week_)) + sizeof(week_of_year_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_day_of_week(static_cast<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 week_of_year = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_week_of_year(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_day_of_week(static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 week_of_year = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_of_year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
  if (this->day_of_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->day_of_week(), output);
  }

  // uint32 week_of_year = 2;
  if (this->week_of_year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->week_of_year(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
}

::google::protobuf::uint8* DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
  if (this->day_of_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->day_of_week(), target);
  }

  // uint32 week_of_year = 2;
  if (this->week_of_year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->week_of_year(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
  return target;
}

size_t DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
  if (this->day_of_week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->day_of_week());
  }

  // uint32 week_of_year = 2;
  if (this->week_of_year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->week_of_year());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* source =
      ::google::protobuf::DynamicCastToGenerated<DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
    MergeFrom(*source);
  }
}

void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::MergeFrom(const DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.day_of_week() != 0) {
    set_day_of_week(from.day_of_week());
  }
  if (from.week_of_year() != 0) {
    set_week_of_year(from.week_of_year());
  }
}

void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::CopyFrom(const DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::IsInitialized() const {
  return true;
}

void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::Swap(DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::InternalSwap(DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(day_of_week_, other->day_of_week_);
  swap(week_of_year_, other->week_of_year_);
}

::google::protobuf::Metadata DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTimeModifier_DayOfWeekOfYearRange::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfYearRange_default_instance_._instance.get_mutable()->start_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfYearRange_default_instance_._instance.get_mutable()->end_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::internal_default_instance());
}
class DateTimeModifier_DayOfWeekOfYearRange::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& start(const DateTimeModifier_DayOfWeekOfYearRange* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& end(const DateTimeModifier_DayOfWeekOfYearRange* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear&
DateTimeModifier_DayOfWeekOfYearRange::HasBitSetters::start(const DateTimeModifier_DayOfWeekOfYearRange* msg) {
  return *msg->start_;
}
const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear&
DateTimeModifier_DayOfWeekOfYearRange::HasBitSetters::end(const DateTimeModifier_DayOfWeekOfYearRange* msg) {
  return *msg->end_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTimeModifier_DayOfWeekOfYearRange::kStartFieldNumber;
const int DateTimeModifier_DayOfWeekOfYearRange::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTimeModifier_DayOfWeekOfYearRange::DateTimeModifier_DayOfWeekOfYearRange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
}
DateTimeModifier_DayOfWeekOfYearRange::DateTimeModifier_DayOfWeekOfYearRange(const DateTimeModifier_DayOfWeekOfYearRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from.has_end()) {
    end_ = new ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
}

void DateTimeModifier_DayOfWeekOfYearRange::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DateTimeModifier_DayOfWeekOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

DateTimeModifier_DayOfWeekOfYearRange::~DateTimeModifier_DayOfWeekOfYearRange() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
  SharedDtor();
}

void DateTimeModifier_DayOfWeekOfYearRange::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void DateTimeModifier_DayOfWeekOfYearRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTimeModifier_DayOfWeekOfYearRange& DateTimeModifier_DayOfWeekOfYearRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTimeModifier_DayOfWeekOfYearRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  return *internal_default_instance();
}


void DateTimeModifier_DayOfWeekOfYearRange::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTimeModifier_DayOfWeekOfYearRange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTimeModifier_DayOfWeekOfYearRange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::_InternalParse;
        object = msg->mutable_start();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::_InternalParse;
        object = msg->mutable_end();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTimeModifier_DayOfWeekOfYearRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTimeModifier_DayOfWeekOfYearRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear start = 1;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::start(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear end = 2;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::end(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
}

::google::protobuf::uint8* DateTimeModifier_DayOfWeekOfYearRange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear start = 1;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::start(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear end = 2;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::end(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
  return target;
}

size_t DateTimeModifier_DayOfWeekOfYearRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear end = 2;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeModifier_DayOfWeekOfYearRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTimeModifier_DayOfWeekOfYearRange* source =
      ::google::protobuf::DynamicCastToGenerated<DateTimeModifier_DayOfWeekOfYearRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
    MergeFrom(*source);
  }
}

void DateTimeModifier_DayOfWeekOfYearRange::MergeFrom(const DateTimeModifier_DayOfWeekOfYearRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    mutable_start()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::MergeFrom(from.start());
  }
  if (from.has_end()) {
    mutable_end()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::MergeFrom(from.end());
  }
}

void DateTimeModifier_DayOfWeekOfYearRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeModifier_DayOfWeekOfYearRange::CopyFrom(const DateTimeModifier_DayOfWeekOfYearRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeModifier_DayOfWeekOfYearRange::IsInitialized() const {
  return true;
}

void DateTimeModifier_DayOfWeekOfYearRange::Swap(DateTimeModifier_DayOfWeekOfYearRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTimeModifier_DayOfWeekOfYearRange::InternalSwap(DateTimeModifier_DayOfWeekOfYearRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::google::protobuf::Metadata DateTimeModifier_DayOfWeekOfYearRange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTimeModifier_DayOfMonthRange::InitAsDefaultInstance() {
}
class DateTimeModifier_DayOfMonthRange::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTimeModifier_DayOfMonthRange::kStartFieldNumber;
const int DateTimeModifier_DayOfMonthRange::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTimeModifier_DayOfMonthRange::DateTimeModifier_DayOfMonthRange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
}
DateTimeModifier_DayOfMonthRange::DateTimeModifier_DayOfMonthRange(const DateTimeModifier_DayOfMonthRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
}

void DateTimeModifier_DayOfMonthRange::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

DateTimeModifier_DayOfMonthRange::~DateTimeModifier_DayOfMonthRange() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
  SharedDtor();
}

void DateTimeModifier_DayOfMonthRange::SharedDtor() {
}

void DateTimeModifier_DayOfMonthRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTimeModifier_DayOfMonthRange& DateTimeModifier_DayOfMonthRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTimeModifier_DayOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  return *internal_default_instance();
}


void DateTimeModifier_DayOfMonthRange::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTimeModifier_DayOfMonthRange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTimeModifier_DayOfMonthRange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_end(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTimeModifier_DayOfMonthRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTimeModifier_DayOfMonthRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start(), output);
  }

  // uint32 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
}

::google::protobuf::uint8* DateTimeModifier_DayOfMonthRange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start(), target);
  }

  // uint32 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
  return target;
}

size_t DateTimeModifier_DayOfMonthRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start());
  }

  // uint32 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeModifier_DayOfMonthRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTimeModifier_DayOfMonthRange* source =
      ::google::protobuf::DynamicCastToGenerated<DateTimeModifier_DayOfMonthRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
    MergeFrom(*source);
  }
}

void DateTimeModifier_DayOfMonthRange::MergeFrom(const DateTimeModifier_DayOfMonthRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void DateTimeModifier_DayOfMonthRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeModifier_DayOfMonthRange::CopyFrom(const DateTimeModifier_DayOfMonthRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeModifier_DayOfMonthRange::IsInitialized() const {
  return true;
}

void DateTimeModifier_DayOfMonthRange::Swap(DateTimeModifier_DayOfMonthRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTimeModifier_DayOfMonthRange::InternalSwap(DateTimeModifier_DayOfMonthRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::google::protobuf::Metadata DateTimeModifier_DayOfMonthRange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::InitAsDefaultInstance() {
}
class DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::kDayOfWeekFieldNumber;
const int DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::kWeekInMonthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
}
DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth(const DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&day_of_week_, &from.day_of_week_,
    static_cast<size_t>(reinterpret_cast<char*>(&week_in_month_) -
    reinterpret_cast<char*>(&day_of_week_)) + sizeof(week_in_month_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
}

void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::SharedCtor() {
  ::memset(&day_of_week_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_in_month_) -
      reinterpret_cast<char*>(&day_of_week_)) + sizeof(week_in_month_));
}

DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::~DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
  SharedDtor();
}

void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::SharedDtor() {
}

void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  return *internal_default_instance();
}


void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&day_of_week_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_in_month_) -
      reinterpret_cast<char*>(&day_of_week_)) + sizeof(week_in_month_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_day_of_week(static_cast<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth week_in_month = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_week_in_month(static_cast<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_day_of_week(static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth week_in_month = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_week_in_month(static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
  if (this->day_of_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->day_of_week(), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth week_in_month = 2;
  if (this->week_in_month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->week_in_month(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
}

::google::protobuf::uint8* DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
  if (this->day_of_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->day_of_week(), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth week_in_month = 2;
  if (this->week_in_month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->week_in_month(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
  return target;
}

size_t DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
  if (this->day_of_week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->day_of_week());
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth week_in_month = 2;
  if (this->week_in_month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->week_in_month());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* source =
      ::google::protobuf::DynamicCastToGenerated<DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
    MergeFrom(*source);
  }
}

void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::MergeFrom(const DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.day_of_week() != 0) {
    set_day_of_week(from.day_of_week());
  }
  if (from.week_in_month() != 0) {
    set_week_in_month(from.week_in_month());
  }
}

void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::CopyFrom(const DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::IsInitialized() const {
  return true;
}

void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::Swap(DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::InternalSwap(DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(day_of_week_, other->day_of_week_);
  swap(week_in_month_, other->week_in_month_);
}

::google::protobuf::Metadata DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTimeModifier_DayOfWeekOfMonthRange::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfMonthRange_default_instance_._instance.get_mutable()->start_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfMonthRange_default_instance_._instance.get_mutable()->end_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::internal_default_instance());
}
class DateTimeModifier_DayOfWeekOfMonthRange::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& start(const DateTimeModifier_DayOfWeekOfMonthRange* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& end(const DateTimeModifier_DayOfWeekOfMonthRange* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth&
DateTimeModifier_DayOfWeekOfMonthRange::HasBitSetters::start(const DateTimeModifier_DayOfWeekOfMonthRange* msg) {
  return *msg->start_;
}
const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth&
DateTimeModifier_DayOfWeekOfMonthRange::HasBitSetters::end(const DateTimeModifier_DayOfWeekOfMonthRange* msg) {
  return *msg->end_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTimeModifier_DayOfWeekOfMonthRange::kStartFieldNumber;
const int DateTimeModifier_DayOfWeekOfMonthRange::kEndFieldNumber;
const int DateTimeModifier_DayOfWeekOfMonthRange::kIsFromEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTimeModifier_DayOfWeekOfMonthRange::DateTimeModifier_DayOfWeekOfMonthRange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
}
DateTimeModifier_DayOfWeekOfMonthRange::DateTimeModifier_DayOfWeekOfMonthRange(const DateTimeModifier_DayOfWeekOfMonthRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from.has_end()) {
    end_ = new ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth(*from.end_);
  } else {
    end_ = nullptr;
  }
  isfromend_ = from.isfromend_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
}

void DateTimeModifier_DayOfWeekOfMonthRange::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DateTimeModifier_DayOfWeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfromend_) -
      reinterpret_cast<char*>(&start_)) + sizeof(isfromend_));
}

DateTimeModifier_DayOfWeekOfMonthRange::~DateTimeModifier_DayOfWeekOfMonthRange() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
  SharedDtor();
}

void DateTimeModifier_DayOfWeekOfMonthRange::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void DateTimeModifier_DayOfWeekOfMonthRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTimeModifier_DayOfWeekOfMonthRange& DateTimeModifier_DayOfWeekOfMonthRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTimeModifier_DayOfWeekOfMonthRange_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  return *internal_default_instance();
}


void DateTimeModifier_DayOfWeekOfMonthRange::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  isfromend_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTimeModifier_DayOfWeekOfMonthRange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTimeModifier_DayOfWeekOfMonthRange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::_InternalParse;
        object = msg->mutable_start();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::_InternalParse;
        object = msg->mutable_end();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool isFromEnd = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_isfromend(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTimeModifier_DayOfWeekOfMonthRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isFromEnd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfromend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTimeModifier_DayOfWeekOfMonthRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth start = 1;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::start(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth end = 2;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::end(this), output);
  }

  // bool isFromEnd = 3;
  if (this->isfromend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isfromend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
}

::google::protobuf::uint8* DateTimeModifier_DayOfWeekOfMonthRange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth start = 1;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::start(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth end = 2;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::end(this), target);
  }

  // bool isFromEnd = 3;
  if (this->isfromend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isfromend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
  return target;
}

size_t DateTimeModifier_DayOfWeekOfMonthRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth end = 2;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // bool isFromEnd = 3;
  if (this->isfromend() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeModifier_DayOfWeekOfMonthRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTimeModifier_DayOfWeekOfMonthRange* source =
      ::google::protobuf::DynamicCastToGenerated<DateTimeModifier_DayOfWeekOfMonthRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
    MergeFrom(*source);
  }
}

void DateTimeModifier_DayOfWeekOfMonthRange::MergeFrom(const DateTimeModifier_DayOfWeekOfMonthRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    mutable_start()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::MergeFrom(from.start());
  }
  if (from.has_end()) {
    mutable_end()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::MergeFrom(from.end());
  }
  if (from.isfromend() != 0) {
    set_isfromend(from.isfromend());
  }
}

void DateTimeModifier_DayOfWeekOfMonthRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeModifier_DayOfWeekOfMonthRange::CopyFrom(const DateTimeModifier_DayOfWeekOfMonthRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeModifier_DayOfWeekOfMonthRange::IsInitialized() const {
  return true;
}

void DateTimeModifier_DayOfWeekOfMonthRange::Swap(DateTimeModifier_DayOfWeekOfMonthRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTimeModifier_DayOfWeekOfMonthRange::InternalSwap(DateTimeModifier_DayOfWeekOfMonthRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(isfromend_, other->isfromend_);
}

::google::protobuf::Metadata DateTimeModifier_DayOfWeekOfMonthRange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTimeModifier_DaysOfWeek::InitAsDefaultInstance() {
}
class DateTimeModifier_DaysOfWeek::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTimeModifier_DaysOfWeek::kDayOfWeekFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTimeModifier_DaysOfWeek::DateTimeModifier_DaysOfWeek()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
}
DateTimeModifier_DaysOfWeek::DateTimeModifier_DaysOfWeek(const DateTimeModifier_DaysOfWeek& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      day_of_week_(from.day_of_week_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
}

void DateTimeModifier_DaysOfWeek::SharedCtor() {
}

DateTimeModifier_DaysOfWeek::~DateTimeModifier_DaysOfWeek() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
  SharedDtor();
}

void DateTimeModifier_DaysOfWeek::SharedDtor() {
}

void DateTimeModifier_DaysOfWeek::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTimeModifier_DaysOfWeek& DateTimeModifier_DaysOfWeek::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTimeModifier_DaysOfWeek_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  return *internal_default_instance();
}


void DateTimeModifier_DaysOfWeek::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  day_of_week_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTimeModifier_DaysOfWeek::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTimeModifier_DaysOfWeek*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_day_of_week();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_day_of_week(static_cast<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTimeModifier_DaysOfWeek::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_day_of_week(static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_day_of_week(static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTimeModifier_DaysOfWeek::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
  if (this->day_of_week_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_day_of_week_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->day_of_week_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->day_of_week(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
}

::google::protobuf::uint8* DateTimeModifier_DaysOfWeek::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
  if (this->day_of_week_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _day_of_week_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->day_of_week_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
  return target;
}

size_t DateTimeModifier_DaysOfWeek::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->day_of_week_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->day_of_week(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _day_of_week_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeModifier_DaysOfWeek::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTimeModifier_DaysOfWeek* source =
      ::google::protobuf::DynamicCastToGenerated<DateTimeModifier_DaysOfWeek>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
    MergeFrom(*source);
  }
}

void DateTimeModifier_DaysOfWeek::MergeFrom(const DateTimeModifier_DaysOfWeek& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  day_of_week_.MergeFrom(from.day_of_week_);
}

void DateTimeModifier_DaysOfWeek::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeModifier_DaysOfWeek::CopyFrom(const DateTimeModifier_DaysOfWeek& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeModifier_DaysOfWeek::IsInitialized() const {
  return true;
}

void DateTimeModifier_DaysOfWeek::Swap(DateTimeModifier_DaysOfWeek* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTimeModifier_DaysOfWeek::InternalSwap(DateTimeModifier_DaysOfWeek* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  day_of_week_.InternalSwap(&other->day_of_week_);
}

::google::protobuf::Metadata DateTimeModifier_DaysOfWeek::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTimeModifier::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_default_instance_.days_of_week_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_default_instance_.date_range_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_default_instance_.day_of_month_range_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_default_instance_.day_of_week_of_month_range_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_default_instance_.day_of_week_of_year_range_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_default_instance_.week_of_month_range_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_default_instance_.month_of_year_range_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_default_instance_.day_of_month_of_year_range_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_default_instance_.externally_specified_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_default_instance_.time_range_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange*>(
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_default_instance_.is_dawn_to_dusk_ = false;
  ::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_default_instance_.is_dusk_to_dawn_ = false;
}
class DateTimeModifier::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek& days_of_week(const DateTimeModifier* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange& date_range(const DateTimeModifier* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange& day_of_month_range(const DateTimeModifier* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange& day_of_week_of_month_range(const DateTimeModifier* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange& day_of_week_of_year_range(const DateTimeModifier* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange& week_of_month_range(const DateTimeModifier* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange& month_of_year_range(const DateTimeModifier* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange& day_of_month_of_year_range(const DateTimeModifier* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange& time_range(const DateTimeModifier* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek&
DateTimeModifier::HasBitSetters::days_of_week(const DateTimeModifier* msg) {
  return *msg->dateModifier_.days_of_week_;
}
const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange&
DateTimeModifier::HasBitSetters::date_range(const DateTimeModifier* msg) {
  return *msg->dateModifier_.date_range_;
}
const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange&
DateTimeModifier::HasBitSetters::day_of_month_range(const DateTimeModifier* msg) {
  return *msg->dateModifier_.day_of_month_range_;
}
const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange&
DateTimeModifier::HasBitSetters::day_of_week_of_month_range(const DateTimeModifier* msg) {
  return *msg->dateModifier_.day_of_week_of_month_range_;
}
const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange&
DateTimeModifier::HasBitSetters::day_of_week_of_year_range(const DateTimeModifier* msg) {
  return *msg->dateModifier_.day_of_week_of_year_range_;
}
const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange&
DateTimeModifier::HasBitSetters::week_of_month_range(const DateTimeModifier* msg) {
  return *msg->dateModifier_.week_of_month_range_;
}
const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange&
DateTimeModifier::HasBitSetters::month_of_year_range(const DateTimeModifier* msg) {
  return *msg->dateModifier_.month_of_year_range_;
}
const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange&
DateTimeModifier::HasBitSetters::day_of_month_of_year_range(const DateTimeModifier* msg) {
  return *msg->dateModifier_.day_of_month_of_year_range_;
}
const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange&
DateTimeModifier::HasBitSetters::time_range(const DateTimeModifier* msg) {
  return *msg->timeModifier_.time_range_;
}
void DateTimeModifier::set_allocated_days_of_week(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek* days_of_week) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_dateModifier();
  if (days_of_week) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      days_of_week = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, days_of_week, submessage_arena);
    }
    set_has_days_of_week();
    dateModifier_.days_of_week_ = days_of_week;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.days_of_week)
}
void DateTimeModifier::set_allocated_date_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange* date_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_dateModifier();
  if (date_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      date_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date_range, submessage_arena);
    }
    set_has_date_range();
    dateModifier_.date_range_ = date_range;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.date_range)
}
void DateTimeModifier::set_allocated_day_of_month_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange* day_of_month_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_dateModifier();
  if (day_of_month_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      day_of_month_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, day_of_month_range, submessage_arena);
    }
    set_has_day_of_month_range();
    dateModifier_.day_of_month_range_ = day_of_month_range;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_month_range)
}
void DateTimeModifier::set_allocated_day_of_week_of_month_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange* day_of_week_of_month_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_dateModifier();
  if (day_of_week_of_month_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      day_of_week_of_month_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, day_of_week_of_month_range, submessage_arena);
    }
    set_has_day_of_week_of_month_range();
    dateModifier_.day_of_week_of_month_range_ = day_of_week_of_month_range;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_week_of_month_range)
}
void DateTimeModifier::set_allocated_day_of_week_of_year_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange* day_of_week_of_year_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_dateModifier();
  if (day_of_week_of_year_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      day_of_week_of_year_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, day_of_week_of_year_range, submessage_arena);
    }
    set_has_day_of_week_of_year_range();
    dateModifier_.day_of_week_of_year_range_ = day_of_week_of_year_range;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_week_of_year_range)
}
void DateTimeModifier::set_allocated_week_of_month_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange* week_of_month_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_dateModifier();
  if (week_of_month_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      week_of_month_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, week_of_month_range, submessage_arena);
    }
    set_has_week_of_month_range();
    dateModifier_.week_of_month_range_ = week_of_month_range;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.week_of_month_range)
}
void DateTimeModifier::set_allocated_month_of_year_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange* month_of_year_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_dateModifier();
  if (month_of_year_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      month_of_year_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, month_of_year_range, submessage_arena);
    }
    set_has_month_of_year_range();
    dateModifier_.month_of_year_range_ = month_of_year_range;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.month_of_year_range)
}
void DateTimeModifier::set_allocated_day_of_month_of_year_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange* day_of_month_of_year_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_dateModifier();
  if (day_of_month_of_year_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      day_of_month_of_year_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, day_of_month_of_year_range, submessage_arena);
    }
    set_has_day_of_month_of_year_range();
    dateModifier_.day_of_month_of_year_range_ = day_of_month_of_year_range;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_month_of_year_range)
}
void DateTimeModifier::set_allocated_time_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange* time_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_timeModifier();
  if (time_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_range, submessage_arena);
    }
    set_has_time_range();
    timeModifier_.time_range_ = time_range;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.time_range)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTimeModifier::kDaysOfWeekFieldNumber;
const int DateTimeModifier::kDateRangeFieldNumber;
const int DateTimeModifier::kDayOfMonthRangeFieldNumber;
const int DateTimeModifier::kDayOfWeekOfMonthRangeFieldNumber;
const int DateTimeModifier::kDayOfWeekOfYearRangeFieldNumber;
const int DateTimeModifier::kWeekOfMonthRangeFieldNumber;
const int DateTimeModifier::kMonthOfYearRangeFieldNumber;
const int DateTimeModifier::kDayOfMonthOfYearRangeFieldNumber;
const int DateTimeModifier::kExternallySpecifiedFieldNumber;
const int DateTimeModifier::kTimeRangeFieldNumber;
const int DateTimeModifier::kIsDawnToDuskFieldNumber;
const int DateTimeModifier::kIsDuskToDawnFieldNumber;
const int DateTimeModifier::kIsExclusionFieldNumber;
const int DateTimeModifier::kIsApproximateSeasonalRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTimeModifier::DateTimeModifier()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
}
DateTimeModifier::DateTimeModifier(const DateTimeModifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_exclusion_, &from.is_exclusion_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_approximate_seasonal_range_) -
    reinterpret_cast<char*>(&is_exclusion_)) + sizeof(is_approximate_seasonal_range_));
  clear_has_dateModifier();
  switch (from.dateModifier_case()) {
    case kDaysOfWeek: {
      mutable_days_of_week()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek::MergeFrom(from.days_of_week());
      break;
    }
    case kDateRange: {
      mutable_date_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange::MergeFrom(from.date_range());
      break;
    }
    case kDayOfMonthRange: {
      mutable_day_of_month_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange::MergeFrom(from.day_of_month_range());
      break;
    }
    case kDayOfWeekOfMonthRange: {
      mutable_day_of_week_of_month_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange::MergeFrom(from.day_of_week_of_month_range());
      break;
    }
    case kDayOfWeekOfYearRange: {
      mutable_day_of_week_of_year_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange::MergeFrom(from.day_of_week_of_year_range());
      break;
    }
    case kWeekOfMonthRange: {
      mutable_week_of_month_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange::MergeFrom(from.week_of_month_range());
      break;
    }
    case kMonthOfYearRange: {
      mutable_month_of_year_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange::MergeFrom(from.month_of_year_range());
      break;
    }
    case kDayOfMonthOfYearRange: {
      mutable_day_of_month_of_year_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange::MergeFrom(from.day_of_month_of_year_range());
      break;
    }
    case kExternallySpecified: {
      set_externally_specified(from.externally_specified());
      break;
    }
    case DATEMODIFIER_NOT_SET: {
      break;
    }
  }
  clear_has_timeModifier();
  switch (from.timeModifier_case()) {
    case kTimeRange: {
      mutable_time_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange::MergeFrom(from.time_range());
      break;
    }
    case kIsDawnToDusk: {
      set_is_dawn_to_dusk(from.is_dawn_to_dusk());
      break;
    }
    case kIsDuskToDawn: {
      set_is_dusk_to_dawn(from.is_dusk_to_dawn());
      break;
    }
    case TIMEMODIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
}

void DateTimeModifier::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  ::memset(&is_exclusion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_approximate_seasonal_range_) -
      reinterpret_cast<char*>(&is_exclusion_)) + sizeof(is_approximate_seasonal_range_));
  clear_has_dateModifier();
  clear_has_timeModifier();
}

DateTimeModifier::~DateTimeModifier() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  SharedDtor();
}

void DateTimeModifier::SharedDtor() {
  if (has_dateModifier()) {
    clear_dateModifier();
  }
  if (has_timeModifier()) {
    clear_timeModifier();
  }
}

void DateTimeModifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTimeModifier& DateTimeModifier::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base);
  return *internal_default_instance();
}


void DateTimeModifier::clear_dateModifier() {
// @@protoc_insertion_point(one_of_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  switch (dateModifier_case()) {
    case kDaysOfWeek: {
      delete dateModifier_.days_of_week_;
      break;
    }
    case kDateRange: {
      delete dateModifier_.date_range_;
      break;
    }
    case kDayOfMonthRange: {
      delete dateModifier_.day_of_month_range_;
      break;
    }
    case kDayOfWeekOfMonthRange: {
      delete dateModifier_.day_of_week_of_month_range_;
      break;
    }
    case kDayOfWeekOfYearRange: {
      delete dateModifier_.day_of_week_of_year_range_;
      break;
    }
    case kWeekOfMonthRange: {
      delete dateModifier_.week_of_month_range_;
      break;
    }
    case kMonthOfYearRange: {
      delete dateModifier_.month_of_year_range_;
      break;
    }
    case kDayOfMonthOfYearRange: {
      delete dateModifier_.day_of_month_of_year_range_;
      break;
    }
    case kExternallySpecified: {
      dateModifier_.externally_specified_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case DATEMODIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATEMODIFIER_NOT_SET;
}

void DateTimeModifier::clear_timeModifier() {
// @@protoc_insertion_point(one_of_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  switch (timeModifier_case()) {
    case kTimeRange: {
      delete timeModifier_.time_range_;
      break;
    }
    case kIsDawnToDusk: {
      // No need to clear
      break;
    }
    case kIsDuskToDawn: {
      // No need to clear
      break;
    }
    case TIMEMODIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = TIMEMODIFIER_NOT_SET;
}


void DateTimeModifier::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_exclusion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_approximate_seasonal_range_) -
      reinterpret_cast<char*>(&is_exclusion_)) + sizeof(is_approximate_seasonal_range_));
  clear_dateModifier();
  clear_timeModifier();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTimeModifier::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTimeModifier*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek days_of_week = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek::_InternalParse;
        object = msg->mutable_days_of_week();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange date_range = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange::_InternalParse;
        object = msg->mutable_date_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange day_of_month_range = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange::_InternalParse;
        object = msg->mutable_day_of_month_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange day_of_week_of_month_range = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange::_InternalParse;
        object = msg->mutable_day_of_week_of_month_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange day_of_week_of_year_range = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange::_InternalParse;
        object = msg->mutable_day_of_week_of_year_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange week_of_month_range = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange::_InternalParse;
        object = msg->mutable_week_of_month_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange month_of_year_range = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange::_InternalParse;
        object = msg->mutable_month_of_year_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange day_of_month_of_year_range = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange::_InternalParse;
        object = msg->mutable_day_of_month_of_year_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string externally_specified = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.here.pb.hdmap.shared.v1.core.DateTimeModifier.externally_specified");
        object = msg->mutable_externally_specified();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange time_range = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange::_InternalParse;
        object = msg->mutable_time_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool is_dawn_to_dusk = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_is_dawn_to_dusk(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_dusk_to_dawn = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_is_dusk_to_dawn(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_exclusion = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_is_exclusion(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_approximate_seasonal_range = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_is_approximate_seasonal_range(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTimeModifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek days_of_week = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_days_of_week()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange date_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_date_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange day_of_month_range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_day_of_month_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange day_of_week_of_month_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_day_of_week_of_month_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange day_of_week_of_year_range = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_day_of_week_of_year_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange week_of_month_range = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_week_of_month_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange month_of_year_range = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_month_of_year_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange day_of_month_of_year_range = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_day_of_month_of_year_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string externally_specified = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_externally_specified()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->externally_specified().data(), static_cast<int>(this->externally_specified().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.here.pb.hdmap.shared.v1.core.DateTimeModifier.externally_specified"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange time_range = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dawn_to_dusk = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          clear_timeModifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timeModifier_.is_dawn_to_dusk_)));
          set_has_is_dawn_to_dusk();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dusk_to_dawn = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          clear_timeModifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timeModifier_.is_dusk_to_dawn_)));
          set_has_is_dusk_to_dawn();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_exclusion = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_exclusion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_approximate_seasonal_range = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_approximate_seasonal_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTimeModifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek days_of_week = 1;
  if (has_days_of_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::days_of_week(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange date_range = 2;
  if (has_date_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::date_range(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange day_of_month_range = 3;
  if (has_day_of_month_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::day_of_month_range(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange day_of_week_of_month_range = 4;
  if (has_day_of_week_of_month_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::day_of_week_of_month_range(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange day_of_week_of_year_range = 5;
  if (has_day_of_week_of_year_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::day_of_week_of_year_range(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange week_of_month_range = 6;
  if (has_week_of_month_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::week_of_month_range(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange month_of_year_range = 7;
  if (has_month_of_year_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::month_of_year_range(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange day_of_month_of_year_range = 8;
  if (has_day_of_month_of_year_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::day_of_month_of_year_range(this), output);
  }

  // string externally_specified = 9;
  if (has_externally_specified()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->externally_specified().data(), static_cast<int>(this->externally_specified().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.here.pb.hdmap.shared.v1.core.DateTimeModifier.externally_specified");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->externally_specified(), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange time_range = 10;
  if (has_time_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::time_range(this), output);
  }

  // bool is_dawn_to_dusk = 11;
  if (has_is_dawn_to_dusk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_dawn_to_dusk(), output);
  }

  // bool is_dusk_to_dawn = 12;
  if (has_is_dusk_to_dawn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_dusk_to_dawn(), output);
  }

  // bool is_exclusion = 13;
  if (this->is_exclusion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_exclusion(), output);
  }

  // bool is_approximate_seasonal_range = 14;
  if (this->is_approximate_seasonal_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_approximate_seasonal_range(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
}

::google::protobuf::uint8* DateTimeModifier::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek days_of_week = 1;
  if (has_days_of_week()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::days_of_week(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange date_range = 2;
  if (has_date_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::date_range(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange day_of_month_range = 3;
  if (has_day_of_month_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::day_of_month_range(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange day_of_week_of_month_range = 4;
  if (has_day_of_week_of_month_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::day_of_week_of_month_range(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange day_of_week_of_year_range = 5;
  if (has_day_of_week_of_year_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::day_of_week_of_year_range(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange week_of_month_range = 6;
  if (has_week_of_month_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::week_of_month_range(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange month_of_year_range = 7;
  if (has_month_of_year_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::month_of_year_range(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange day_of_month_of_year_range = 8;
  if (has_day_of_month_of_year_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::day_of_month_of_year_range(this), target);
  }

  // string externally_specified = 9;
  if (has_externally_specified()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->externally_specified().data(), static_cast<int>(this->externally_specified().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.here.pb.hdmap.shared.v1.core.DateTimeModifier.externally_specified");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->externally_specified(), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange time_range = 10;
  if (has_time_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::time_range(this), target);
  }

  // bool is_dawn_to_dusk = 11;
  if (has_is_dawn_to_dusk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_dawn_to_dusk(), target);
  }

  // bool is_dusk_to_dawn = 12;
  if (has_is_dusk_to_dawn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_dusk_to_dawn(), target);
  }

  // bool is_exclusion = 13;
  if (this->is_exclusion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_exclusion(), target);
  }

  // bool is_approximate_seasonal_range = 14;
  if (this->is_approximate_seasonal_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_approximate_seasonal_range(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  return target;
}

size_t DateTimeModifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_exclusion = 13;
  if (this->is_exclusion() != 0) {
    total_size += 1 + 1;
  }

  // bool is_approximate_seasonal_range = 14;
  if (this->is_approximate_seasonal_range() != 0) {
    total_size += 1 + 1;
  }

  switch (dateModifier_case()) {
    // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek days_of_week = 1;
    case kDaysOfWeek: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dateModifier_.days_of_week_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange date_range = 2;
    case kDateRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dateModifier_.date_range_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange day_of_month_range = 3;
    case kDayOfMonthRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dateModifier_.day_of_month_range_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange day_of_week_of_month_range = 4;
    case kDayOfWeekOfMonthRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dateModifier_.day_of_week_of_month_range_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange day_of_week_of_year_range = 5;
    case kDayOfWeekOfYearRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dateModifier_.day_of_week_of_year_range_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange week_of_month_range = 6;
    case kWeekOfMonthRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dateModifier_.week_of_month_range_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange month_of_year_range = 7;
    case kMonthOfYearRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dateModifier_.month_of_year_range_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange day_of_month_of_year_range = 8;
    case kDayOfMonthOfYearRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dateModifier_.day_of_month_of_year_range_);
      break;
    }
    // string externally_specified = 9;
    case kExternallySpecified: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->externally_specified());
      break;
    }
    case DATEMODIFIER_NOT_SET: {
      break;
    }
  }
  switch (timeModifier_case()) {
    // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange time_range = 10;
    case kTimeRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *timeModifier_.time_range_);
      break;
    }
    // bool is_dawn_to_dusk = 11;
    case kIsDawnToDusk: {
      total_size += 1 + 1;
      break;
    }
    // bool is_dusk_to_dawn = 12;
    case kIsDuskToDawn: {
      total_size += 1 + 1;
      break;
    }
    case TIMEMODIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeModifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTimeModifier* source =
      ::google::protobuf::DynamicCastToGenerated<DateTimeModifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
    MergeFrom(*source);
  }
}

void DateTimeModifier::MergeFrom(const DateTimeModifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_exclusion() != 0) {
    set_is_exclusion(from.is_exclusion());
  }
  if (from.is_approximate_seasonal_range() != 0) {
    set_is_approximate_seasonal_range(from.is_approximate_seasonal_range());
  }
  switch (from.dateModifier_case()) {
    case kDaysOfWeek: {
      mutable_days_of_week()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek::MergeFrom(from.days_of_week());
      break;
    }
    case kDateRange: {
      mutable_date_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange::MergeFrom(from.date_range());
      break;
    }
    case kDayOfMonthRange: {
      mutable_day_of_month_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange::MergeFrom(from.day_of_month_range());
      break;
    }
    case kDayOfWeekOfMonthRange: {
      mutable_day_of_week_of_month_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange::MergeFrom(from.day_of_week_of_month_range());
      break;
    }
    case kDayOfWeekOfYearRange: {
      mutable_day_of_week_of_year_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange::MergeFrom(from.day_of_week_of_year_range());
      break;
    }
    case kWeekOfMonthRange: {
      mutable_week_of_month_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange::MergeFrom(from.week_of_month_range());
      break;
    }
    case kMonthOfYearRange: {
      mutable_month_of_year_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange::MergeFrom(from.month_of_year_range());
      break;
    }
    case kDayOfMonthOfYearRange: {
      mutable_day_of_month_of_year_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange::MergeFrom(from.day_of_month_of_year_range());
      break;
    }
    case kExternallySpecified: {
      set_externally_specified(from.externally_specified());
      break;
    }
    case DATEMODIFIER_NOT_SET: {
      break;
    }
  }
  switch (from.timeModifier_case()) {
    case kTimeRange: {
      mutable_time_range()->::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange::MergeFrom(from.time_range());
      break;
    }
    case kIsDawnToDusk: {
      set_is_dawn_to_dusk(from.is_dawn_to_dusk());
      break;
    }
    case kIsDuskToDawn: {
      set_is_dusk_to_dawn(from.is_dusk_to_dawn());
      break;
    }
    case TIMEMODIFIER_NOT_SET: {
      break;
    }
  }
}

void DateTimeModifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeModifier::CopyFrom(const DateTimeModifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeModifier::IsInitialized() const {
  return true;
}

void DateTimeModifier::Swap(DateTimeModifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTimeModifier::InternalSwap(DateTimeModifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_exclusion_, other->is_exclusion_);
  swap(is_approximate_seasonal_range_, other->is_approximate_seasonal_range_);
  swap(dateModifier_, other->dateModifier_);
  swap(timeModifier_, other->timeModifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::google::protobuf::Metadata DateTimeModifier::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace v1
}  // namespace shared
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
