// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/external/v1/speed/layer-speed-attributes.proto

#include "com/here/pb/hdmap/external/v1/speed/layer-speed-attributes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ParametricRange_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TiledStrandAttributionReference_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SpeedLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_SpeedLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_ConditionalSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VariableSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VariableSpeedSign_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto;
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace speed {
class SpeedAttributesLayerTileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedAttributesLayerTile> _instance;
} _SpeedAttributesLayerTile_default_instance_;
class LinkAttribution_ParametricAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinkAttribution_ParametricAttribution> _instance;
} _LinkAttribution_ParametricAttribution_default_instance_;
class LinkAttribution_PointAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinkAttribution_PointAttribution> _instance;
} _LinkAttribution_PointAttribution_default_instance_;
class LinkAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinkAttribution> _instance;
} _LinkAttribution_default_instance_;
class SpeedLinkParametricAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedLinkParametricAttribution> _instance;
  const ::com::here::pb::hdmap::shared::v1::core::SpeedLimit* speed_limit_;
  int speed_category_;
  const ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit* variable_speed_limit_;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit* conditional_speed_limit_;
} _SpeedLinkParametricAttribution_default_instance_;
class SpeedLinkPointAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedLinkPointAttribution> _instance;
  const ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign* variable_speed_sign_;
} _SpeedLinkPointAttribution_default_instance_;
}  // namespace speed
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
static void InitDefaultsSpeedAttributesLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::speed::_SpeedAttributesLayerTile_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::speed::SpeedAttributesLayerTile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::speed::SpeedAttributesLayerTile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpeedAttributesLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeedAttributesLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto}, {
      &scc_info_LinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base,}};

static void InitDefaultsLinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::speed::_LinkAttribution_ParametricAttribution_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto}, {
      &scc_info_ParametricRange_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto.base,
      &scc_info_SpeedLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base,}};

static void InitDefaultsLinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::speed::_LinkAttribution_PointAttribution_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto}, {
      &scc_info_SpeedLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base,}};

static void InitDefaultsLinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::speed::_LinkAttribution_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::speed::LinkAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::speed::LinkAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto}, {
      &scc_info_LinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base,
      &scc_info_LinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base,
      &scc_info_TiledStrandAttributionReference_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto.base,}};

static void InitDefaultsSpeedLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::speed::_SpeedLinkParametricAttribution_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SpeedLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSpeedLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto}, {
      &scc_info_SpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base,
      &scc_info_VariableSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base,
      &scc_info_ConditionalSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base,}};

static void InitDefaultsSpeedLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::speed::_SpeedLinkPointAttribution_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpeedLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeedLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto}, {
      &scc_info_VariableSpeedSign_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base,}};

void InitDefaults_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedAttributesLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto[6];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::SpeedAttributesLayerTile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::SpeedAttributesLayerTile, here_tile_id_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::SpeedAttributesLayerTile, link_attribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution, applies_to_range_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution, applies_to_direction_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution, attribution_group_indexes_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution, link_parametric_attribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution, applies_to_location_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution, applies_to_direction_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution, attribution_group_indexes_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution, link_point_attribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution, link_local_ref_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution, parametric_attribution_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution, point_attribution_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::LinkAttribution, strand_attribution_refs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttributionDefaultTypeInternal, speed_limit_),
  offsetof(::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttributionDefaultTypeInternal, speed_category_),
  offsetof(::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttributionDefaultTypeInternal, variable_speed_limit_),
  offsetof(::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttributionDefaultTypeInternal, conditional_speed_limit_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution, attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttributionDefaultTypeInternal, variable_speed_sign_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution, attribute_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::here::pb::hdmap::external::v1::speed::SpeedAttributesLayerTile)},
  { 7, -1, sizeof(::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution)},
  { 16, -1, sizeof(::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution)},
  { 25, -1, sizeof(::com::here::pb::hdmap::external::v1::speed::LinkAttribution)},
  { 34, -1, sizeof(::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution)},
  { 44, -1, sizeof(::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::speed::_SpeedAttributesLayerTile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::speed::_LinkAttribution_ParametricAttribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::speed::_LinkAttribution_PointAttribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::speed::_LinkAttribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::speed::_SpeedLinkParametricAttribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::speed::_SpeedLinkPointAttribution_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto = {
  {}, AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto, "com/here/pb/hdmap/external/v1/speed/layer-speed-attributes.proto", schemas,
  file_default_instances, TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto::offsets,
  file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto, 6, file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto, file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto,
};

const char descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto[] =
  "\n@com/here/pb/hdmap/external/v1/speed/la"
  "yer-speed-attributes.proto\022#com.here.pb."
  "hdmap.external.v1.speed\0321com/here/pb/hdm"
  "ap/external/v1/common/common.proto\032-com/"
  "here/pb/hdmap/shared/v1/core/common.prot"
  "o\032=com/here/pb/hdmap/shared/v1/core/cond"
  "itional-attributes.proto\032\?com/here/pb/hd"
  "map/shared/v1/core/unconditional-attribu"
  "tes.proto\"\200\001\n\030SpeedAttributesLayerTile\022\024"
  "\n\014here_tile_id\030\001 \001(\r\022N\n\020link_attribution"
  "\030\002 \003(\01324.com.here.pb.hdmap.external.v1.s"
  "peed.LinkAttribution\"\302\007\n\017LinkAttribution"
  "\022\026\n\016link_local_ref\030\001 \001(\r\022j\n\026parametric_a"
  "ttribution\030\002 \003(\0132J.com.here.pb.hdmap.ext"
  "ernal.v1.speed.LinkAttribution.Parametri"
  "cAttribution\022`\n\021point_attribution\030\003 \003(\0132"
  "E.com.here.pb.hdmap.external.v1.speed.Li"
  "nkAttribution.PointAttribution\022f\n\027strand"
  "_attribution_refs\030\004 \003(\0132E.com.here.pb.hd"
  "map.external.v1.common.TiledStrandAttrib"
  "utionReference\032\320\002\n\025ParametricAttribution"
  "\022O\n\020applies_to_range\030\001 \001(\01325.com.here.pb"
  ".hdmap.external.v1.common.ParametricRang"
  "e\022U\n\024applies_to_direction\030\002 \001(\01627.com.he"
  "re.pb.hdmap.external.v1.common.RelativeD"
  "irection\022%\n\031attribution_group_indexes\030\003 "
  "\003(\rB\002\020\001\022h\n\033link_parametric_attribution\030\004"
  " \003(\0132C.com.here.pb.hdmap.external.v1.spe"
  "ed.SpeedLinkParametricAttribution\032\215\002\n\020Po"
  "intAttribution\022\033\n\023applies_to_location\030\001 "
  "\001(\001\022U\n\024applies_to_direction\030\002 \001(\01627.com."
  "here.pb.hdmap.external.v1.common.Relativ"
  "eDirection\022%\n\031attribution_group_indexes\030"
  "\003 \003(\rB\002\020\001\022^\n\026link_point_attribution\030\004 \003("
  "\0132>.com.here.pb.hdmap.external.v1.speed."
  "SpeedLinkPointAttribution\"\357\002\n\036SpeedLinkP"
  "arametricAttribution\022C\n\013speed_limit\030\001 \001("
  "\0132,.com.here.pb.hdmap.shared.v1.core.Spe"
  "edLimitH\000\022I\n\016speed_category\030\002 \001(\0162/.com."
  "here.pb.hdmap.shared.v1.core.SpeedCatego"
  "ryH\000\022T\n\024variable_speed_limit\030\003 \001(\01324.com"
  ".here.pb.hdmap.shared.v1.core.VariableSp"
  "eedLimitH\000\022Z\n\027conditional_speed_limit\030\004 "
  "\001(\01327.com.here.pb.hdmap.shared.v1.core.C"
  "onditionalSpeedLimitH\000B\013\n\tattribute\"|\n\031S"
  "peedLinkPointAttribution\022R\n\023variable_spe"
  "ed_sign\030\001 \001(\01323.com.here.pb.hdmap.shared"
  ".v1.core.VariableSpeedSignH\000B\013\n\tattribut"
  "eb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto = {
  false, InitDefaults_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto, 
  descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto,
  "com/here/pb/hdmap/external/v1/speed/layer-speed-attributes.proto", &assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto, 1929,
};

void AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[4] =
  {
    ::AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto,
    ::AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto,
    ::AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto,
    ::AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto, deps, 4);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto = []() { AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto(); return true; }();
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace speed {

// ===================================================================

void SpeedAttributesLayerTile::InitAsDefaultInstance() {
}
class SpeedAttributesLayerTile::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedAttributesLayerTile::kHereTileIdFieldNumber;
const int SpeedAttributesLayerTile::kLinkAttributionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedAttributesLayerTile::SpeedAttributesLayerTile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
}
SpeedAttributesLayerTile::SpeedAttributesLayerTile(const SpeedAttributesLayerTile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      link_attribution_(from.link_attribution_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  here_tile_id_ = from.here_tile_id_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
}

void SpeedAttributesLayerTile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SpeedAttributesLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  here_tile_id_ = 0u;
}

SpeedAttributesLayerTile::~SpeedAttributesLayerTile() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
  SharedDtor();
}

void SpeedAttributesLayerTile::SharedDtor() {
}

void SpeedAttributesLayerTile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedAttributesLayerTile& SpeedAttributesLayerTile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SpeedAttributesLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void SpeedAttributesLayerTile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_attribution_.Clear();
  here_tile_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpeedAttributesLayerTile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SpeedAttributesLayerTile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 here_tile_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_here_tile_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution link_attribution = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::speed::LinkAttribution::_InternalParse;
          object = msg->add_link_attribution();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpeedAttributesLayerTile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 here_tile_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &here_tile_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution link_attribution = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_link_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpeedAttributesLayerTile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->here_tile_id(), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution link_attribution = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->link_attribution(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
}

::google::protobuf::uint8* SpeedAttributesLayerTile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->here_tile_id(), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution link_attribution = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->link_attribution(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
  return target;
}

size_t SpeedAttributesLayerTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution link_attribution = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->link_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->link_attribution(static_cast<int>(i)));
    }
  }

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->here_tile_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedAttributesLayerTile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedAttributesLayerTile* source =
      ::google::protobuf::DynamicCastToGenerated<SpeedAttributesLayerTile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
    MergeFrom(*source);
  }
}

void SpeedAttributesLayerTile::MergeFrom(const SpeedAttributesLayerTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  link_attribution_.MergeFrom(from.link_attribution_);
  if (from.here_tile_id() != 0) {
    set_here_tile_id(from.here_tile_id());
  }
}

void SpeedAttributesLayerTile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedAttributesLayerTile::CopyFrom(const SpeedAttributesLayerTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedAttributesLayerTile::IsInitialized() const {
  return true;
}

void SpeedAttributesLayerTile::Swap(SpeedAttributesLayerTile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedAttributesLayerTile::InternalSwap(SpeedAttributesLayerTile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&link_attribution_)->InternalSwap(CastToBase(&other->link_attribution_));
  swap(here_tile_id_, other->here_tile_id_);
}

::google::protobuf::Metadata SpeedAttributesLayerTile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LinkAttribution_ParametricAttribution::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::speed::_LinkAttribution_ParametricAttribution_default_instance_._instance.get_mutable()->applies_to_range_ = const_cast< ::com::here::pb::hdmap::external::v1::common::ParametricRange*>(
      ::com::here::pb::hdmap::external::v1::common::ParametricRange::internal_default_instance());
}
class LinkAttribution_ParametricAttribution::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::external::v1::common::ParametricRange& applies_to_range(const LinkAttribution_ParametricAttribution* msg);
};

const ::com::here::pb::hdmap::external::v1::common::ParametricRange&
LinkAttribution_ParametricAttribution::HasBitSetters::applies_to_range(const LinkAttribution_ParametricAttribution* msg) {
  return *msg->applies_to_range_;
}
void LinkAttribution_ParametricAttribution::clear_applies_to_range() {
  if (GetArenaNoVirtual() == nullptr && applies_to_range_ != nullptr) {
    delete applies_to_range_;
  }
  applies_to_range_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkAttribution_ParametricAttribution::kAppliesToRangeFieldNumber;
const int LinkAttribution_ParametricAttribution::kAppliesToDirectionFieldNumber;
const int LinkAttribution_ParametricAttribution::kAttributionGroupIndexesFieldNumber;
const int LinkAttribution_ParametricAttribution::kLinkParametricAttributionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkAttribution_ParametricAttribution::LinkAttribution_ParametricAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
}
LinkAttribution_ParametricAttribution::LinkAttribution_ParametricAttribution(const LinkAttribution_ParametricAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      attribution_group_indexes_(from.attribution_group_indexes_),
      link_parametric_attribution_(from.link_parametric_attribution_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_applies_to_range()) {
    applies_to_range_ = new ::com::here::pb::hdmap::external::v1::common::ParametricRange(*from.applies_to_range_);
  } else {
    applies_to_range_ = nullptr;
  }
  applies_to_direction_ = from.applies_to_direction_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
}

void LinkAttribution_ParametricAttribution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  ::memset(&applies_to_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applies_to_direction_) -
      reinterpret_cast<char*>(&applies_to_range_)) + sizeof(applies_to_direction_));
}

LinkAttribution_ParametricAttribution::~LinkAttribution_ParametricAttribution() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
  SharedDtor();
}

void LinkAttribution_ParametricAttribution::SharedDtor() {
  if (this != internal_default_instance()) delete applies_to_range_;
}

void LinkAttribution_ParametricAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkAttribution_ParametricAttribution& LinkAttribution_ParametricAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void LinkAttribution_ParametricAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribution_group_indexes_.Clear();
  link_parametric_attribution_.Clear();
  if (GetArenaNoVirtual() == nullptr && applies_to_range_ != nullptr) {
    delete applies_to_range_;
  }
  applies_to_range_ = nullptr;
  applies_to_direction_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LinkAttribution_ParametricAttribution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LinkAttribution_ParametricAttribution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.external.v1.common.ParametricRange applies_to_range = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::common::ParametricRange::_InternalParse;
        object = msg->mutable_applies_to_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_applies_to_direction(static_cast<::com::here::pb::hdmap::external::v1::common::RelativeDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 attribution_group_indexes = 3 [packed = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_attribution_group_indexes();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_attribution_group_indexes(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution link_parametric_attribution = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution::_InternalParse;
          object = msg->add_link_parametric_attribution();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LinkAttribution_ParametricAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.external.v1.common.ParametricRange applies_to_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_applies_to_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_applies_to_direction(static_cast< ::com::here::pb::hdmap::external::v1::common::RelativeDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 attribution_group_indexes = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attribution_group_indexes())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_attribution_group_indexes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution link_parametric_attribution = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_link_parametric_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LinkAttribution_ParametricAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.external.v1.common.ParametricRange applies_to_range = 1;
  if (this->has_applies_to_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::applies_to_range(this), output);
  }

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  if (this->applies_to_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->applies_to_direction(), output);
  }

  // repeated uint32 attribution_group_indexes = 3 [packed = true];
  if (this->attribution_group_indexes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_attribution_group_indexes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->attribution_group_indexes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->attribution_group_indexes(i), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution link_parametric_attribution = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_parametric_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->link_parametric_attribution(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
}

::google::protobuf::uint8* LinkAttribution_ParametricAttribution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.external.v1.common.ParametricRange applies_to_range = 1;
  if (this->has_applies_to_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::applies_to_range(this), target);
  }

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  if (this->applies_to_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->applies_to_direction(), target);
  }

  // repeated uint32 attribution_group_indexes = 3 [packed = true];
  if (this->attribution_group_indexes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _attribution_group_indexes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->attribution_group_indexes_, target);
  }

  // repeated .com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution link_parametric_attribution = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_parametric_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->link_parametric_attribution(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
  return target;
}

size_t LinkAttribution_ParametricAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 attribution_group_indexes = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->attribution_group_indexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _attribution_group_indexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution link_parametric_attribution = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->link_parametric_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->link_parametric_attribution(static_cast<int>(i)));
    }
  }

  // .com.here.pb.hdmap.external.v1.common.ParametricRange applies_to_range = 1;
  if (this->has_applies_to_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *applies_to_range_);
  }

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  if (this->applies_to_direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->applies_to_direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkAttribution_ParametricAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkAttribution_ParametricAttribution* source =
      ::google::protobuf::DynamicCastToGenerated<LinkAttribution_ParametricAttribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
    MergeFrom(*source);
  }
}

void LinkAttribution_ParametricAttribution::MergeFrom(const LinkAttribution_ParametricAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribution_group_indexes_.MergeFrom(from.attribution_group_indexes_);
  link_parametric_attribution_.MergeFrom(from.link_parametric_attribution_);
  if (from.has_applies_to_range()) {
    mutable_applies_to_range()->::com::here::pb::hdmap::external::v1::common::ParametricRange::MergeFrom(from.applies_to_range());
  }
  if (from.applies_to_direction() != 0) {
    set_applies_to_direction(from.applies_to_direction());
  }
}

void LinkAttribution_ParametricAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkAttribution_ParametricAttribution::CopyFrom(const LinkAttribution_ParametricAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkAttribution_ParametricAttribution::IsInitialized() const {
  return true;
}

void LinkAttribution_ParametricAttribution::Swap(LinkAttribution_ParametricAttribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkAttribution_ParametricAttribution::InternalSwap(LinkAttribution_ParametricAttribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attribution_group_indexes_.InternalSwap(&other->attribution_group_indexes_);
  CastToBase(&link_parametric_attribution_)->InternalSwap(CastToBase(&other->link_parametric_attribution_));
  swap(applies_to_range_, other->applies_to_range_);
  swap(applies_to_direction_, other->applies_to_direction_);
}

::google::protobuf::Metadata LinkAttribution_ParametricAttribution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LinkAttribution_PointAttribution::InitAsDefaultInstance() {
}
class LinkAttribution_PointAttribution::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkAttribution_PointAttribution::kAppliesToLocationFieldNumber;
const int LinkAttribution_PointAttribution::kAppliesToDirectionFieldNumber;
const int LinkAttribution_PointAttribution::kAttributionGroupIndexesFieldNumber;
const int LinkAttribution_PointAttribution::kLinkPointAttributionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkAttribution_PointAttribution::LinkAttribution_PointAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
}
LinkAttribution_PointAttribution::LinkAttribution_PointAttribution(const LinkAttribution_PointAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      attribution_group_indexes_(from.attribution_group_indexes_),
      link_point_attribution_(from.link_point_attribution_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&applies_to_location_, &from.applies_to_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&applies_to_direction_) -
    reinterpret_cast<char*>(&applies_to_location_)) + sizeof(applies_to_direction_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
}

void LinkAttribution_PointAttribution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  ::memset(&applies_to_location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applies_to_direction_) -
      reinterpret_cast<char*>(&applies_to_location_)) + sizeof(applies_to_direction_));
}

LinkAttribution_PointAttribution::~LinkAttribution_PointAttribution() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
  SharedDtor();
}

void LinkAttribution_PointAttribution::SharedDtor() {
}

void LinkAttribution_PointAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkAttribution_PointAttribution& LinkAttribution_PointAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void LinkAttribution_PointAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribution_group_indexes_.Clear();
  link_point_attribution_.Clear();
  ::memset(&applies_to_location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applies_to_direction_) -
      reinterpret_cast<char*>(&applies_to_location_)) + sizeof(applies_to_direction_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LinkAttribution_PointAttribution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LinkAttribution_PointAttribution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double applies_to_location = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_applies_to_location(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_applies_to_direction(static_cast<::com::here::pb::hdmap::external::v1::common::RelativeDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 attribution_group_indexes = 3 [packed = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_attribution_group_indexes();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_attribution_group_indexes(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution link_point_attribution = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution::_InternalParse;
          object = msg->add_link_point_attribution();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LinkAttribution_PointAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double applies_to_location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &applies_to_location_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_applies_to_direction(static_cast< ::com::here::pb::hdmap::external::v1::common::RelativeDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 attribution_group_indexes = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attribution_group_indexes())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_attribution_group_indexes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution link_point_attribution = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_link_point_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LinkAttribution_PointAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double applies_to_location = 1;
  if (this->applies_to_location() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->applies_to_location(), output);
  }

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  if (this->applies_to_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->applies_to_direction(), output);
  }

  // repeated uint32 attribution_group_indexes = 3 [packed = true];
  if (this->attribution_group_indexes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_attribution_group_indexes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->attribution_group_indexes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->attribution_group_indexes(i), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution link_point_attribution = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_point_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->link_point_attribution(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
}

::google::protobuf::uint8* LinkAttribution_PointAttribution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double applies_to_location = 1;
  if (this->applies_to_location() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->applies_to_location(), target);
  }

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  if (this->applies_to_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->applies_to_direction(), target);
  }

  // repeated uint32 attribution_group_indexes = 3 [packed = true];
  if (this->attribution_group_indexes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _attribution_group_indexes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->attribution_group_indexes_, target);
  }

  // repeated .com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution link_point_attribution = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_point_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->link_point_attribution(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
  return target;
}

size_t LinkAttribution_PointAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 attribution_group_indexes = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->attribution_group_indexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _attribution_group_indexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution link_point_attribution = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->link_point_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->link_point_attribution(static_cast<int>(i)));
    }
  }

  // double applies_to_location = 1;
  if (this->applies_to_location() != 0) {
    total_size += 1 + 8;
  }

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  if (this->applies_to_direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->applies_to_direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkAttribution_PointAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkAttribution_PointAttribution* source =
      ::google::protobuf::DynamicCastToGenerated<LinkAttribution_PointAttribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
    MergeFrom(*source);
  }
}

void LinkAttribution_PointAttribution::MergeFrom(const LinkAttribution_PointAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribution_group_indexes_.MergeFrom(from.attribution_group_indexes_);
  link_point_attribution_.MergeFrom(from.link_point_attribution_);
  if (from.applies_to_location() != 0) {
    set_applies_to_location(from.applies_to_location());
  }
  if (from.applies_to_direction() != 0) {
    set_applies_to_direction(from.applies_to_direction());
  }
}

void LinkAttribution_PointAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkAttribution_PointAttribution::CopyFrom(const LinkAttribution_PointAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkAttribution_PointAttribution::IsInitialized() const {
  return true;
}

void LinkAttribution_PointAttribution::Swap(LinkAttribution_PointAttribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkAttribution_PointAttribution::InternalSwap(LinkAttribution_PointAttribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attribution_group_indexes_.InternalSwap(&other->attribution_group_indexes_);
  CastToBase(&link_point_attribution_)->InternalSwap(CastToBase(&other->link_point_attribution_));
  swap(applies_to_location_, other->applies_to_location_);
  swap(applies_to_direction_, other->applies_to_direction_);
}

::google::protobuf::Metadata LinkAttribution_PointAttribution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LinkAttribution::InitAsDefaultInstance() {
}
class LinkAttribution::HasBitSetters {
 public:
};

void LinkAttribution::clear_strand_attribution_refs() {
  strand_attribution_refs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkAttribution::kLinkLocalRefFieldNumber;
const int LinkAttribution::kParametricAttributionFieldNumber;
const int LinkAttribution::kPointAttributionFieldNumber;
const int LinkAttribution::kStrandAttributionRefsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkAttribution::LinkAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
}
LinkAttribution::LinkAttribution(const LinkAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      parametric_attribution_(from.parametric_attribution_),
      point_attribution_(from.point_attribution_),
      strand_attribution_refs_(from.strand_attribution_refs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  link_local_ref_ = from.link_local_ref_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
}

void LinkAttribution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  link_local_ref_ = 0u;
}

LinkAttribution::~LinkAttribution() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
  SharedDtor();
}

void LinkAttribution::SharedDtor() {
}

void LinkAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkAttribution& LinkAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void LinkAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parametric_attribution_.Clear();
  point_attribution_.Clear();
  strand_attribution_refs_.Clear();
  link_local_ref_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LinkAttribution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LinkAttribution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 link_local_ref = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_link_local_ref(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution parametric_attribution = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution::_InternalParse;
          object = msg->add_parametric_attribution();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution point_attribution = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution::_InternalParse;
          object = msg->add_point_attribution();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.common.TiledStrandAttributionReference strand_attribution_refs = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference::_InternalParse;
          object = msg->add_strand_attribution_refs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LinkAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 link_local_ref = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_local_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution parametric_attribution = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_parametric_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution point_attribution = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.common.TiledStrandAttributionReference strand_attribution_refs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_strand_attribution_refs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LinkAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 link_local_ref = 1;
  if (this->link_local_ref() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->link_local_ref(), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution parametric_attribution = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parametric_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->parametric_attribution(static_cast<int>(i)),
      output);
  }

  // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution point_attribution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->point_attribution(static_cast<int>(i)),
      output);
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledStrandAttributionReference strand_attribution_refs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->strand_attribution_refs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->strand_attribution_refs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
}

::google::protobuf::uint8* LinkAttribution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 link_local_ref = 1;
  if (this->link_local_ref() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->link_local_ref(), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution parametric_attribution = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parametric_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->parametric_attribution(static_cast<int>(i)), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution point_attribution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->point_attribution(static_cast<int>(i)), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledStrandAttributionReference strand_attribution_refs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->strand_attribution_refs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->strand_attribution_refs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
  return target;
}

size_t LinkAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution parametric_attribution = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->parametric_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->parametric_attribution(static_cast<int>(i)));
    }
  }

  // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution point_attribution = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->point_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point_attribution(static_cast<int>(i)));
    }
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledStrandAttributionReference strand_attribution_refs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->strand_attribution_refs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->strand_attribution_refs(static_cast<int>(i)));
    }
  }

  // uint32 link_local_ref = 1;
  if (this->link_local_ref() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->link_local_ref());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkAttribution* source =
      ::google::protobuf::DynamicCastToGenerated<LinkAttribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
    MergeFrom(*source);
  }
}

void LinkAttribution::MergeFrom(const LinkAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parametric_attribution_.MergeFrom(from.parametric_attribution_);
  point_attribution_.MergeFrom(from.point_attribution_);
  strand_attribution_refs_.MergeFrom(from.strand_attribution_refs_);
  if (from.link_local_ref() != 0) {
    set_link_local_ref(from.link_local_ref());
  }
}

void LinkAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkAttribution::CopyFrom(const LinkAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkAttribution::IsInitialized() const {
  return true;
}

void LinkAttribution::Swap(LinkAttribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkAttribution::InternalSwap(LinkAttribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&parametric_attribution_)->InternalSwap(CastToBase(&other->parametric_attribution_));
  CastToBase(&point_attribution_)->InternalSwap(CastToBase(&other->point_attribution_));
  CastToBase(&strand_attribution_refs_)->InternalSwap(CastToBase(&other->strand_attribution_refs_));
  swap(link_local_ref_, other->link_local_ref_);
}

::google::protobuf::Metadata LinkAttribution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SpeedLinkParametricAttribution::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::speed::_SpeedLinkParametricAttribution_default_instance_.speed_limit_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit*>(
      ::com::here::pb::hdmap::shared::v1::core::SpeedLimit::internal_default_instance());
  ::com::here::pb::hdmap::external::v1::speed::_SpeedLinkParametricAttribution_default_instance_.speed_category_ = 0;
  ::com::here::pb::hdmap::external::v1::speed::_SpeedLinkParametricAttribution_default_instance_.variable_speed_limit_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit*>(
      ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit::internal_default_instance());
  ::com::here::pb::hdmap::external::v1::speed::_SpeedLinkParametricAttribution_default_instance_.conditional_speed_limit_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit*>(
      ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit::internal_default_instance());
}
class SpeedLinkParametricAttribution::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::SpeedLimit& speed_limit(const SpeedLinkParametricAttribution* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit& variable_speed_limit(const SpeedLinkParametricAttribution* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit& conditional_speed_limit(const SpeedLinkParametricAttribution* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::SpeedLimit&
SpeedLinkParametricAttribution::HasBitSetters::speed_limit(const SpeedLinkParametricAttribution* msg) {
  return *msg->attribute_.speed_limit_;
}
const ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit&
SpeedLinkParametricAttribution::HasBitSetters::variable_speed_limit(const SpeedLinkParametricAttribution* msg) {
  return *msg->attribute_.variable_speed_limit_;
}
const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit&
SpeedLinkParametricAttribution::HasBitSetters::conditional_speed_limit(const SpeedLinkParametricAttribution* msg) {
  return *msg->attribute_.conditional_speed_limit_;
}
void SpeedLinkParametricAttribution::set_allocated_speed_limit(::com::here::pb::hdmap::shared::v1::core::SpeedLimit* speed_limit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (speed_limit) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      speed_limit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed_limit, submessage_arena);
    }
    set_has_speed_limit();
    attribute_.speed_limit_ = speed_limit;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution.speed_limit)
}
void SpeedLinkParametricAttribution::clear_speed_limit() {
  if (has_speed_limit()) {
    delete attribute_.speed_limit_;
    clear_has_attribute();
  }
}
void SpeedLinkParametricAttribution::set_allocated_variable_speed_limit(::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit* variable_speed_limit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (variable_speed_limit) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      variable_speed_limit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, variable_speed_limit, submessage_arena);
    }
    set_has_variable_speed_limit();
    attribute_.variable_speed_limit_ = variable_speed_limit;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution.variable_speed_limit)
}
void SpeedLinkParametricAttribution::clear_variable_speed_limit() {
  if (has_variable_speed_limit()) {
    delete attribute_.variable_speed_limit_;
    clear_has_attribute();
  }
}
void SpeedLinkParametricAttribution::set_allocated_conditional_speed_limit(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit* conditional_speed_limit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (conditional_speed_limit) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conditional_speed_limit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conditional_speed_limit, submessage_arena);
    }
    set_has_conditional_speed_limit();
    attribute_.conditional_speed_limit_ = conditional_speed_limit;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution.conditional_speed_limit)
}
void SpeedLinkParametricAttribution::clear_conditional_speed_limit() {
  if (has_conditional_speed_limit()) {
    delete attribute_.conditional_speed_limit_;
    clear_has_attribute();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedLinkParametricAttribution::kSpeedLimitFieldNumber;
const int SpeedLinkParametricAttribution::kSpeedCategoryFieldNumber;
const int SpeedLinkParametricAttribution::kVariableSpeedLimitFieldNumber;
const int SpeedLinkParametricAttribution::kConditionalSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedLinkParametricAttribution::SpeedLinkParametricAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
}
SpeedLinkParametricAttribution::SpeedLinkParametricAttribution(const SpeedLinkParametricAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_attribute();
  switch (from.attribute_case()) {
    case kSpeedLimit: {
      mutable_speed_limit()->::com::here::pb::hdmap::shared::v1::core::SpeedLimit::MergeFrom(from.speed_limit());
      break;
    }
    case kSpeedCategory: {
      set_speed_category(from.speed_category());
      break;
    }
    case kVariableSpeedLimit: {
      mutable_variable_speed_limit()->::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit::MergeFrom(from.variable_speed_limit());
      break;
    }
    case kConditionalSpeedLimit: {
      mutable_conditional_speed_limit()->::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit::MergeFrom(from.conditional_speed_limit());
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
}

void SpeedLinkParametricAttribution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SpeedLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  clear_has_attribute();
}

SpeedLinkParametricAttribution::~SpeedLinkParametricAttribution() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
  SharedDtor();
}

void SpeedLinkParametricAttribution::SharedDtor() {
  if (has_attribute()) {
    clear_attribute();
  }
}

void SpeedLinkParametricAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedLinkParametricAttribution& SpeedLinkParametricAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SpeedLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void SpeedLinkParametricAttribution::clear_attribute() {
// @@protoc_insertion_point(one_of_clear_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
  switch (attribute_case()) {
    case kSpeedLimit: {
      delete attribute_.speed_limit_;
      break;
    }
    case kSpeedCategory: {
      // No need to clear
      break;
    }
    case kVariableSpeedLimit: {
      delete attribute_.variable_speed_limit_;
      break;
    }
    case kConditionalSpeedLimit: {
      delete attribute_.conditional_speed_limit_;
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATTRIBUTE_NOT_SET;
}


void SpeedLinkParametricAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_attribute();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpeedLinkParametricAttribution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SpeedLinkParametricAttribution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.SpeedLimit speed_limit = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::SpeedLimit::_InternalParse;
        object = msg->mutable_speed_limit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.SpeedCategory speed_category = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_speed_category(static_cast<::com::here::pb::hdmap::shared::v1::core::SpeedCategory>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit variable_speed_limit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit::_InternalParse;
        object = msg->mutable_variable_speed_limit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit conditional_speed_limit = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit::_InternalParse;
        object = msg->mutable_conditional_speed_limit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpeedLinkParametricAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.SpeedLimit speed_limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.SpeedCategory speed_category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_speed_category(static_cast< ::com::here::pb::hdmap::shared::v1::core::SpeedCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit variable_speed_limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_variable_speed_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit conditional_speed_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conditional_speed_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpeedLinkParametricAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit speed_limit = 1;
  if (has_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::speed_limit(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.SpeedCategory speed_category = 2;
  if (has_speed_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->speed_category(), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit variable_speed_limit = 3;
  if (has_variable_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::variable_speed_limit(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit conditional_speed_limit = 4;
  if (has_conditional_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::conditional_speed_limit(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
}

::google::protobuf::uint8* SpeedLinkParametricAttribution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit speed_limit = 1;
  if (has_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::speed_limit(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.SpeedCategory speed_category = 2;
  if (has_speed_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->speed_category(), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit variable_speed_limit = 3;
  if (has_variable_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::variable_speed_limit(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit conditional_speed_limit = 4;
  if (has_conditional_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::conditional_speed_limit(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
  return target;
}

size_t SpeedLinkParametricAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (attribute_case()) {
    // .com.here.pb.hdmap.shared.v1.core.SpeedLimit speed_limit = 1;
    case kSpeedLimit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.speed_limit_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.SpeedCategory speed_category = 2;
    case kSpeedCategory: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->speed_category());
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit variable_speed_limit = 3;
    case kVariableSpeedLimit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.variable_speed_limit_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit conditional_speed_limit = 4;
    case kConditionalSpeedLimit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.conditional_speed_limit_);
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedLinkParametricAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedLinkParametricAttribution* source =
      ::google::protobuf::DynamicCastToGenerated<SpeedLinkParametricAttribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
    MergeFrom(*source);
  }
}

void SpeedLinkParametricAttribution::MergeFrom(const SpeedLinkParametricAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.attribute_case()) {
    case kSpeedLimit: {
      mutable_speed_limit()->::com::here::pb::hdmap::shared::v1::core::SpeedLimit::MergeFrom(from.speed_limit());
      break;
    }
    case kSpeedCategory: {
      set_speed_category(from.speed_category());
      break;
    }
    case kVariableSpeedLimit: {
      mutable_variable_speed_limit()->::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit::MergeFrom(from.variable_speed_limit());
      break;
    }
    case kConditionalSpeedLimit: {
      mutable_conditional_speed_limit()->::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit::MergeFrom(from.conditional_speed_limit());
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
}

void SpeedLinkParametricAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedLinkParametricAttribution::CopyFrom(const SpeedLinkParametricAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedLinkParametricAttribution::IsInitialized() const {
  return true;
}

void SpeedLinkParametricAttribution::Swap(SpeedLinkParametricAttribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedLinkParametricAttribution::InternalSwap(SpeedLinkParametricAttribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attribute_, other->attribute_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata SpeedLinkParametricAttribution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SpeedLinkPointAttribution::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::speed::_SpeedLinkPointAttribution_default_instance_.variable_speed_sign_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign*>(
      ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign::internal_default_instance());
}
class SpeedLinkPointAttribution::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign& variable_speed_sign(const SpeedLinkPointAttribution* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign&
SpeedLinkPointAttribution::HasBitSetters::variable_speed_sign(const SpeedLinkPointAttribution* msg) {
  return *msg->attribute_.variable_speed_sign_;
}
void SpeedLinkPointAttribution::set_allocated_variable_speed_sign(::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign* variable_speed_sign) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (variable_speed_sign) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      variable_speed_sign = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, variable_speed_sign, submessage_arena);
    }
    set_has_variable_speed_sign();
    attribute_.variable_speed_sign_ = variable_speed_sign;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution.variable_speed_sign)
}
void SpeedLinkPointAttribution::clear_variable_speed_sign() {
  if (has_variable_speed_sign()) {
    delete attribute_.variable_speed_sign_;
    clear_has_attribute();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedLinkPointAttribution::kVariableSpeedSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedLinkPointAttribution::SpeedLinkPointAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
}
SpeedLinkPointAttribution::SpeedLinkPointAttribution(const SpeedLinkPointAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_attribute();
  switch (from.attribute_case()) {
    case kVariableSpeedSign: {
      mutable_variable_speed_sign()->::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign::MergeFrom(from.variable_speed_sign());
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
}

void SpeedLinkPointAttribution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SpeedLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  clear_has_attribute();
}

SpeedLinkPointAttribution::~SpeedLinkPointAttribution() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
  SharedDtor();
}

void SpeedLinkPointAttribution::SharedDtor() {
  if (has_attribute()) {
    clear_attribute();
  }
}

void SpeedLinkPointAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedLinkPointAttribution& SpeedLinkPointAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SpeedLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void SpeedLinkPointAttribution::clear_attribute() {
// @@protoc_insertion_point(one_of_clear_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
  switch (attribute_case()) {
    case kVariableSpeedSign: {
      delete attribute_.variable_speed_sign_;
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATTRIBUTE_NOT_SET;
}


void SpeedLinkPointAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_attribute();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpeedLinkPointAttribution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SpeedLinkPointAttribution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.VariableSpeedSign variable_speed_sign = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign::_InternalParse;
        object = msg->mutable_variable_speed_sign();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpeedLinkPointAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.VariableSpeedSign variable_speed_sign = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_variable_speed_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpeedLinkPointAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.VariableSpeedSign variable_speed_sign = 1;
  if (has_variable_speed_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::variable_speed_sign(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
}

::google::protobuf::uint8* SpeedLinkPointAttribution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.VariableSpeedSign variable_speed_sign = 1;
  if (has_variable_speed_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::variable_speed_sign(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
  return target;
}

size_t SpeedLinkPointAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (attribute_case()) {
    // .com.here.pb.hdmap.shared.v1.core.VariableSpeedSign variable_speed_sign = 1;
    case kVariableSpeedSign: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.variable_speed_sign_);
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedLinkPointAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedLinkPointAttribution* source =
      ::google::protobuf::DynamicCastToGenerated<SpeedLinkPointAttribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
    MergeFrom(*source);
  }
}

void SpeedLinkPointAttribution::MergeFrom(const SpeedLinkPointAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.attribute_case()) {
    case kVariableSpeedSign: {
      mutable_variable_speed_sign()->::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign::MergeFrom(from.variable_speed_sign());
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
}

void SpeedLinkPointAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedLinkPointAttribution::CopyFrom(const SpeedLinkPointAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedLinkPointAttribution::IsInitialized() const {
  return true;
}

void SpeedLinkPointAttribution::Swap(SpeedLinkPointAttribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedLinkPointAttribution::InternalSwap(SpeedLinkPointAttribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attribute_, other->attribute_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata SpeedLinkPointAttribution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace speed
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::speed::SpeedAttributesLayerTile* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::speed::SpeedAttributesLayerTile >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::speed::SpeedAttributesLayerTile >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::speed::LinkAttribution* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
