// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/external/v1/topology/layer-topology-geometry.proto

#include "com/here/pb/hdmap/external/v1/topology/layer-topology-geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ParametricRange_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TiledLinkReference_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TiledNodeReference_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LineString2dOffset_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point2d_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Link_TileLinkSections_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Node_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Link_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto;
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace topology {
class TopologyLayerTileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TopologyLayerTile> _instance;
} _TopologyLayerTile_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class Link_TileLinkSectionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Link_TileLinkSections> _instance;
} _Link_TileLinkSections_default_instance_;
class LinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Link> _instance;
} _Link_default_instance_;
}  // namespace topology
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
static void InitDefaultsTopologyLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::topology::_TopologyLayerTile_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::topology::TopologyLayerTile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::topology::TopologyLayerTile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TopologyLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTopologyLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto}, {
      &scc_info_Node_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base,
      &scc_info_Link_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base,
      &scc_info_TiledLinkReference_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto.base,}};

static void InitDefaultsNode_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::topology::_Node_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::topology::Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::topology::Node::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Node_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNode_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto}, {
      &scc_info_TiledLinkReference_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto.base,
      &scc_info_Point2d_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto.base,}};

static void InitDefaultsLink_TileLinkSections_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::topology::_Link_TileLinkSections_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Link_TileLinkSections_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLink_TileLinkSections_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto}, {
      &scc_info_ParametricRange_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto.base,}};

static void InitDefaultsLink_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::topology::_Link_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::topology::Link();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::topology::Link::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Link_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLink_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto}, {
      &scc_info_TiledNodeReference_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto.base,
      &scc_info_LineString2dOffset_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto.base,
      &scc_info_Link_TileLinkSections_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base,}};

void InitDefaults_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TopologyLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Node_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Link_TileLinkSections_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Link_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::TopologyLayerTile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::TopologyLayerTile, here_tile_id_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::TopologyLayerTile, tile_center_here_2d_coordinate_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::TopologyLayerTile, nodes_in_tile_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::TopologyLayerTile, links_starting_in_tile_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::TopologyLayerTile, intersecting_link_refs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::Node, node_id_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::Node, connected_link_refs_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::Node, geometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections, intersected_here_tile_id_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections, link_range_in_tile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::Link, link_id_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::Link, start_node_id_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::Link, end_node_ref_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::Link, geometry_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::Link, intersects_tiles_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::topology::Link, link_length_meters_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::here::pb::hdmap::external::v1::topology::TopologyLayerTile)},
  { 10, -1, sizeof(::com::here::pb::hdmap::external::v1::topology::Node)},
  { 18, -1, sizeof(::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections)},
  { 25, -1, sizeof(::com::here::pb::hdmap::external::v1::topology::Link)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::topology::_TopologyLayerTile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::topology::_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::topology::_Link_TileLinkSections_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::topology::_Link_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto = {
  {}, AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto, "com/here/pb/hdmap/external/v1/topology/layer-topology-geometry.proto", schemas,
  file_default_instances, TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto::offsets,
  file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto, 4, file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto, file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto,
};

const char descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto[] =
  "\nDcom/here/pb/hdmap/external/v1/topology"
  "/layer-topology-geometry.proto\022&com.here"
  ".pb.hdmap.external.v1.topology\0325com/here"
  "/pb/hdmap/external/v1/geometry/geometry."
  "proto\0321com/here/pb/hdmap/external/v1/com"
  "mon/common.proto\"\276\002\n\021TopologyLayerTile\022\024"
  "\n\014here_tile_id\030\001 \001(\r\022&\n\036tile_center_here"
  "_2d_coordinate\030\002 \001(\022\022C\n\rnodes_in_tile\030\003 "
  "\003(\0132,.com.here.pb.hdmap.external.v1.topo"
  "logy.Node\022L\n\026links_starting_in_tile\030\004 \003("
  "\0132,.com.here.pb.hdmap.external.v1.topolo"
  "gy.Link\022X\n\026intersecting_link_refs\030\005 \003(\0132"
  "8.com.here.pb.hdmap.external.v1.common.T"
  "iledLinkReference\"\261\001\n\004Node\022\017\n\007node_id\030\001 "
  "\001(\r\022U\n\023connected_link_refs\030\002 \003(\01328.com.h"
  "ere.pb.hdmap.external.v1.common.TiledLin"
  "kReference\022A\n\010geometry\030\003 \001(\0132/.com.here."
  "pb.hdmap.external.v1.geometry.Point2d\"\313\003"
  "\n\004Link\022\017\n\007link_id\030\001 \001(\r\022\025\n\rstart_node_id"
  "\030\002 \001(\r\022N\n\014end_node_ref\030\003 \001(\01328.com.here."
  "pb.hdmap.external.v1.common.TiledNodeRef"
  "erence\022L\n\010geometry\030\004 \001(\0132:.com.here.pb.h"
  "dmap.external.v1.geometry.LineString2dOf"
  "fset\022W\n\020intersects_tiles\030\005 \003(\0132=.com.her"
  "e.pb.hdmap.external.v1.topology.Link.Til"
  "eLinkSections\022\032\n\022link_length_meters\030\006 \001("
  "\r\032\207\001\n\020TileLinkSections\022 \n\030intersected_he"
  "re_tile_id\030\001 \001(\r\022Q\n\022link_range_in_tile\030\002"
  " \003(\01325.com.here.pb.hdmap.external.v1.com"
  "mon.ParametricRangeb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto = {
  false, InitDefaults_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto, 
  descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto,
  "com/here/pb/hdmap/external/v1/topology/layer-topology-geometry.proto", &assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto, 1187,
};

void AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto,
    ::AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto = []() { AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto(); return true; }();
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace topology {

// ===================================================================

void TopologyLayerTile::InitAsDefaultInstance() {
}
class TopologyLayerTile::HasBitSetters {
 public:
};

void TopologyLayerTile::clear_intersecting_link_refs() {
  intersecting_link_refs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopologyLayerTile::kHereTileIdFieldNumber;
const int TopologyLayerTile::kTileCenterHere2DCoordinateFieldNumber;
const int TopologyLayerTile::kNodesInTileFieldNumber;
const int TopologyLayerTile::kLinksStartingInTileFieldNumber;
const int TopologyLayerTile::kIntersectingLinkRefsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopologyLayerTile::TopologyLayerTile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
}
TopologyLayerTile::TopologyLayerTile(const TopologyLayerTile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      nodes_in_tile_(from.nodes_in_tile_),
      links_starting_in_tile_(from.links_starting_in_tile_),
      intersecting_link_refs_(from.intersecting_link_refs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tile_center_here_2d_coordinate_, &from.tile_center_here_2d_coordinate_,
    static_cast<size_t>(reinterpret_cast<char*>(&here_tile_id_) -
    reinterpret_cast<char*>(&tile_center_here_2d_coordinate_)) + sizeof(here_tile_id_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
}

void TopologyLayerTile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TopologyLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base);
  ::memset(&tile_center_here_2d_coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&here_tile_id_) -
      reinterpret_cast<char*>(&tile_center_here_2d_coordinate_)) + sizeof(here_tile_id_));
}

TopologyLayerTile::~TopologyLayerTile() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
  SharedDtor();
}

void TopologyLayerTile::SharedDtor() {
}

void TopologyLayerTile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopologyLayerTile& TopologyLayerTile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TopologyLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base);
  return *internal_default_instance();
}


void TopologyLayerTile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_in_tile_.Clear();
  links_starting_in_tile_.Clear();
  intersecting_link_refs_.Clear();
  ::memset(&tile_center_here_2d_coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&here_tile_id_) -
      reinterpret_cast<char*>(&tile_center_here_2d_coordinate_)) + sizeof(here_tile_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TopologyLayerTile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TopologyLayerTile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 here_tile_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_here_tile_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // sint64 tile_center_here_2d_coordinate = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_tile_center_here_2d_coordinate(::google::protobuf::internal::ReadVarintZigZag64(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.topology.Node nodes_in_tile = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::topology::Node::_InternalParse;
          object = msg->add_nodes_in_tile();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.topology.Link links_starting_in_tile = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::topology::Link::_InternalParse;
          object = msg->add_links_starting_in_tile();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference intersecting_link_refs = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::common::TiledLinkReference::_InternalParse;
          object = msg->add_intersecting_link_refs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TopologyLayerTile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 here_tile_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &here_tile_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 tile_center_here_2d_coordinate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &tile_center_here_2d_coordinate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.topology.Node nodes_in_tile = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes_in_tile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.topology.Link links_starting_in_tile = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_links_starting_in_tile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference intersecting_link_refs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_intersecting_link_refs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TopologyLayerTile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->here_tile_id(), output);
  }

  // sint64 tile_center_here_2d_coordinate = 2;
  if (this->tile_center_here_2d_coordinate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->tile_center_here_2d_coordinate(), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.topology.Node nodes_in_tile = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_in_tile_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->nodes_in_tile(static_cast<int>(i)),
      output);
  }

  // repeated .com.here.pb.hdmap.external.v1.topology.Link links_starting_in_tile = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_starting_in_tile_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->links_starting_in_tile(static_cast<int>(i)),
      output);
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference intersecting_link_refs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intersecting_link_refs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->intersecting_link_refs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
}

::google::protobuf::uint8* TopologyLayerTile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->here_tile_id(), target);
  }

  // sint64 tile_center_here_2d_coordinate = 2;
  if (this->tile_center_here_2d_coordinate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->tile_center_here_2d_coordinate(), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.topology.Node nodes_in_tile = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_in_tile_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->nodes_in_tile(static_cast<int>(i)), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.topology.Link links_starting_in_tile = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_starting_in_tile_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->links_starting_in_tile(static_cast<int>(i)), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference intersecting_link_refs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intersecting_link_refs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->intersecting_link_refs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
  return target;
}

size_t TopologyLayerTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.topology.Node nodes_in_tile = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_in_tile_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes_in_tile(static_cast<int>(i)));
    }
  }

  // repeated .com.here.pb.hdmap.external.v1.topology.Link links_starting_in_tile = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->links_starting_in_tile_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->links_starting_in_tile(static_cast<int>(i)));
    }
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference intersecting_link_refs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->intersecting_link_refs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->intersecting_link_refs(static_cast<int>(i)));
    }
  }

  // sint64 tile_center_here_2d_coordinate = 2;
  if (this->tile_center_here_2d_coordinate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->tile_center_here_2d_coordinate());
  }

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->here_tile_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopologyLayerTile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
  GOOGLE_DCHECK_NE(&from, this);
  const TopologyLayerTile* source =
      ::google::protobuf::DynamicCastToGenerated<TopologyLayerTile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
    MergeFrom(*source);
  }
}

void TopologyLayerTile::MergeFrom(const TopologyLayerTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_in_tile_.MergeFrom(from.nodes_in_tile_);
  links_starting_in_tile_.MergeFrom(from.links_starting_in_tile_);
  intersecting_link_refs_.MergeFrom(from.intersecting_link_refs_);
  if (from.tile_center_here_2d_coordinate() != 0) {
    set_tile_center_here_2d_coordinate(from.tile_center_here_2d_coordinate());
  }
  if (from.here_tile_id() != 0) {
    set_here_tile_id(from.here_tile_id());
  }
}

void TopologyLayerTile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopologyLayerTile::CopyFrom(const TopologyLayerTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopologyLayerTile::IsInitialized() const {
  return true;
}

void TopologyLayerTile::Swap(TopologyLayerTile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopologyLayerTile::InternalSwap(TopologyLayerTile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&nodes_in_tile_)->InternalSwap(CastToBase(&other->nodes_in_tile_));
  CastToBase(&links_starting_in_tile_)->InternalSwap(CastToBase(&other->links_starting_in_tile_));
  CastToBase(&intersecting_link_refs_)->InternalSwap(CastToBase(&other->intersecting_link_refs_));
  swap(tile_center_here_2d_coordinate_, other->tile_center_here_2d_coordinate_);
  swap(here_tile_id_, other->here_tile_id_);
}

::google::protobuf::Metadata TopologyLayerTile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::topology::_Node_default_instance_._instance.get_mutable()->geometry_ = const_cast< ::com::here::pb::hdmap::external::v1::geometry::Point2d*>(
      ::com::here::pb::hdmap::external::v1::geometry::Point2d::internal_default_instance());
}
class Node::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::external::v1::geometry::Point2d& geometry(const Node* msg);
};

const ::com::here::pb::hdmap::external::v1::geometry::Point2d&
Node::HasBitSetters::geometry(const Node* msg) {
  return *msg->geometry_;
}
void Node::clear_connected_link_refs() {
  connected_link_refs_.Clear();
}
void Node::clear_geometry() {
  if (GetArenaNoVirtual() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kNodeIdFieldNumber;
const int Node::kConnectedLinkRefsFieldNumber;
const int Node::kGeometryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.topology.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      connected_link_refs_(from.connected_link_refs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_geometry()) {
    geometry_ = new ::com::here::pb::hdmap::external::v1::geometry::Point2d(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.topology.Node)
}

void Node::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Node_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base);
  ::memset(&geometry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&geometry_)) + sizeof(node_id_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.topology.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (this != internal_default_instance()) delete geometry_;
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Node_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.topology.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connected_link_refs_.Clear();
  if (GetArenaNoVirtual() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
  node_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Node::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Node*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 node_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference connected_link_refs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::common::TiledLinkReference::_InternalParse;
          object = msg->add_connected_link_refs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .com.here.pb.hdmap.external.v1.geometry.Point2d geometry = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::geometry::Point2d::_InternalParse;
        object = msg->mutable_geometry();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.topology.Node)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference connected_link_refs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_connected_link_refs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.geometry.Point2d geometry = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.topology.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.topology.Node)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.topology.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_id(), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference connected_link_refs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connected_link_refs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->connected_link_refs(static_cast<int>(i)),
      output);
  }

  // .com.here.pb.hdmap.external.v1.geometry.Point2d geometry = 3;
  if (this->has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::geometry(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.topology.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.topology.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_id(), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference connected_link_refs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connected_link_refs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->connected_link_refs(static_cast<int>(i)), target);
  }

  // .com.here.pb.hdmap.external.v1.geometry.Point2d geometry = 3;
  if (this->has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::geometry(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.topology.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.topology.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference connected_link_refs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->connected_link_refs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connected_link_refs(static_cast<int>(i)));
    }
  }

  // .com.here.pb.hdmap.external.v1.geometry.Point2d geometry = 3;
  if (this->has_geometry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *geometry_);
  }

  // uint32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.topology.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.topology.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.topology.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.topology.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connected_link_refs_.MergeFrom(from.connected_link_refs_);
  if (from.has_geometry()) {
    mutable_geometry()->::com::here::pb::hdmap::external::v1::geometry::Point2d::MergeFrom(from.geometry());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.topology.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.topology.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&connected_link_refs_)->InternalSwap(CastToBase(&other->connected_link_refs_));
  swap(geometry_, other->geometry_);
  swap(node_id_, other->node_id_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Link_TileLinkSections::InitAsDefaultInstance() {
}
class Link_TileLinkSections::HasBitSetters {
 public:
};

void Link_TileLinkSections::clear_link_range_in_tile() {
  link_range_in_tile_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Link_TileLinkSections::kIntersectedHereTileIdFieldNumber;
const int Link_TileLinkSections::kLinkRangeInTileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Link_TileLinkSections::Link_TileLinkSections()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
}
Link_TileLinkSections::Link_TileLinkSections(const Link_TileLinkSections& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      link_range_in_tile_(from.link_range_in_tile_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  intersected_here_tile_id_ = from.intersected_here_tile_id_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
}

void Link_TileLinkSections::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Link_TileLinkSections_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base);
  intersected_here_tile_id_ = 0u;
}

Link_TileLinkSections::~Link_TileLinkSections() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
  SharedDtor();
}

void Link_TileLinkSections::SharedDtor() {
}

void Link_TileLinkSections::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Link_TileLinkSections& Link_TileLinkSections::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Link_TileLinkSections_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base);
  return *internal_default_instance();
}


void Link_TileLinkSections::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_range_in_tile_.Clear();
  intersected_here_tile_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Link_TileLinkSections::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Link_TileLinkSections*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 intersected_here_tile_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_intersected_here_tile_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.common.ParametricRange link_range_in_tile = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::common::ParametricRange::_InternalParse;
          object = msg->add_link_range_in_tile();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Link_TileLinkSections::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 intersected_here_tile_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intersected_here_tile_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.common.ParametricRange link_range_in_tile = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_link_range_in_tile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Link_TileLinkSections::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 intersected_here_tile_id = 1;
  if (this->intersected_here_tile_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->intersected_here_tile_id(), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.common.ParametricRange link_range_in_tile = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_range_in_tile_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->link_range_in_tile(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
}

::google::protobuf::uint8* Link_TileLinkSections::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 intersected_here_tile_id = 1;
  if (this->intersected_here_tile_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->intersected_here_tile_id(), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.common.ParametricRange link_range_in_tile = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_range_in_tile_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->link_range_in_tile(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
  return target;
}

size_t Link_TileLinkSections::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.common.ParametricRange link_range_in_tile = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->link_range_in_tile_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->link_range_in_tile(static_cast<int>(i)));
    }
  }

  // uint32 intersected_here_tile_id = 1;
  if (this->intersected_here_tile_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->intersected_here_tile_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Link_TileLinkSections::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
  GOOGLE_DCHECK_NE(&from, this);
  const Link_TileLinkSections* source =
      ::google::protobuf::DynamicCastToGenerated<Link_TileLinkSections>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
    MergeFrom(*source);
  }
}

void Link_TileLinkSections::MergeFrom(const Link_TileLinkSections& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  link_range_in_tile_.MergeFrom(from.link_range_in_tile_);
  if (from.intersected_here_tile_id() != 0) {
    set_intersected_here_tile_id(from.intersected_here_tile_id());
  }
}

void Link_TileLinkSections::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link_TileLinkSections::CopyFrom(const Link_TileLinkSections& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link_TileLinkSections::IsInitialized() const {
  return true;
}

void Link_TileLinkSections::Swap(Link_TileLinkSections* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link_TileLinkSections::InternalSwap(Link_TileLinkSections* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&link_range_in_tile_)->InternalSwap(CastToBase(&other->link_range_in_tile_));
  swap(intersected_here_tile_id_, other->intersected_here_tile_id_);
}

::google::protobuf::Metadata Link_TileLinkSections::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Link::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::topology::_Link_default_instance_._instance.get_mutable()->end_node_ref_ = const_cast< ::com::here::pb::hdmap::external::v1::common::TiledNodeReference*>(
      ::com::here::pb::hdmap::external::v1::common::TiledNodeReference::internal_default_instance());
  ::com::here::pb::hdmap::external::v1::topology::_Link_default_instance_._instance.get_mutable()->geometry_ = const_cast< ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset*>(
      ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset::internal_default_instance());
}
class Link::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::external::v1::common::TiledNodeReference& end_node_ref(const Link* msg);
  static const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset& geometry(const Link* msg);
};

const ::com::here::pb::hdmap::external::v1::common::TiledNodeReference&
Link::HasBitSetters::end_node_ref(const Link* msg) {
  return *msg->end_node_ref_;
}
const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset&
Link::HasBitSetters::geometry(const Link* msg) {
  return *msg->geometry_;
}
void Link::clear_end_node_ref() {
  if (GetArenaNoVirtual() == nullptr && end_node_ref_ != nullptr) {
    delete end_node_ref_;
  }
  end_node_ref_ = nullptr;
}
void Link::clear_geometry() {
  if (GetArenaNoVirtual() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Link::kLinkIdFieldNumber;
const int Link::kStartNodeIdFieldNumber;
const int Link::kEndNodeRefFieldNumber;
const int Link::kGeometryFieldNumber;
const int Link::kIntersectsTilesFieldNumber;
const int Link::kLinkLengthMetersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Link::Link()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.topology.Link)
}
Link::Link(const Link& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      intersects_tiles_(from.intersects_tiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_end_node_ref()) {
    end_node_ref_ = new ::com::here::pb::hdmap::external::v1::common::TiledNodeReference(*from.end_node_ref_);
  } else {
    end_node_ref_ = nullptr;
  }
  if (from.has_geometry()) {
    geometry_ = new ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  ::memcpy(&link_id_, &from.link_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&link_length_meters_) -
    reinterpret_cast<char*>(&link_id_)) + sizeof(link_length_meters_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.topology.Link)
}

void Link::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Link_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base);
  ::memset(&end_node_ref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_length_meters_) -
      reinterpret_cast<char*>(&end_node_ref_)) + sizeof(link_length_meters_));
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.topology.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  if (this != internal_default_instance()) delete end_node_ref_;
  if (this != internal_default_instance()) delete geometry_;
}

void Link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Link& Link::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Link_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto.base);
  return *internal_default_instance();
}


void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.topology.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intersects_tiles_.Clear();
  if (GetArenaNoVirtual() == nullptr && end_node_ref_ != nullptr) {
    delete end_node_ref_;
  }
  end_node_ref_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
  ::memset(&link_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_length_meters_) -
      reinterpret_cast<char*>(&link_id_)) + sizeof(link_length_meters_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Link::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Link*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 link_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_link_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 start_node_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_start_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .com.here.pb.hdmap.external.v1.common.TiledNodeReference end_node_ref = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::common::TiledNodeReference::_InternalParse;
        object = msg->mutable_end_node_ref();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset geometry = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset::_InternalParse;
        object = msg->mutable_geometry();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections intersects_tiles = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections::_InternalParse;
          object = msg->add_intersects_tiles();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // uint32 link_length_meters = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_link_length_meters(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.topology.Link)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 link_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.common.TiledNodeReference end_node_ref = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_node_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset geometry = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections intersects_tiles = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_intersects_tiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 link_length_meters = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_length_meters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.topology.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.topology.Link)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.topology.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 link_id = 1;
  if (this->link_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->link_id(), output);
  }

  // uint32 start_node_id = 2;
  if (this->start_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_node_id(), output);
  }

  // .com.here.pb.hdmap.external.v1.common.TiledNodeReference end_node_ref = 3;
  if (this->has_end_node_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::end_node_ref(this), output);
  }

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset geometry = 4;
  if (this->has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::geometry(this), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections intersects_tiles = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intersects_tiles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->intersects_tiles(static_cast<int>(i)),
      output);
  }

  // uint32 link_length_meters = 6;
  if (this->link_length_meters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->link_length_meters(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.topology.Link)
}

::google::protobuf::uint8* Link::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.topology.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 link_id = 1;
  if (this->link_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->link_id(), target);
  }

  // uint32 start_node_id = 2;
  if (this->start_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_node_id(), target);
  }

  // .com.here.pb.hdmap.external.v1.common.TiledNodeReference end_node_ref = 3;
  if (this->has_end_node_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::end_node_ref(this), target);
  }

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset geometry = 4;
  if (this->has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::geometry(this), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections intersects_tiles = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intersects_tiles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->intersects_tiles(static_cast<int>(i)), target);
  }

  // uint32 link_length_meters = 6;
  if (this->link_length_meters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->link_length_meters(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.topology.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.topology.Link)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections intersects_tiles = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->intersects_tiles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->intersects_tiles(static_cast<int>(i)));
    }
  }

  // .com.here.pb.hdmap.external.v1.common.TiledNodeReference end_node_ref = 3;
  if (this->has_end_node_ref()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_node_ref_);
  }

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset geometry = 4;
  if (this->has_geometry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *geometry_);
  }

  // uint32 link_id = 1;
  if (this->link_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->link_id());
  }

  // uint32 start_node_id = 2;
  if (this->start_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_node_id());
  }

  // uint32 link_length_meters = 6;
  if (this->link_length_meters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->link_length_meters());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.topology.Link)
  GOOGLE_DCHECK_NE(&from, this);
  const Link* source =
      ::google::protobuf::DynamicCastToGenerated<Link>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.topology.Link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.topology.Link)
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.topology.Link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intersects_tiles_.MergeFrom(from.intersects_tiles_);
  if (from.has_end_node_ref()) {
    mutable_end_node_ref()->::com::here::pb::hdmap::external::v1::common::TiledNodeReference::MergeFrom(from.end_node_ref());
  }
  if (from.has_geometry()) {
    mutable_geometry()->::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset::MergeFrom(from.geometry());
  }
  if (from.link_id() != 0) {
    set_link_id(from.link_id());
  }
  if (from.start_node_id() != 0) {
    set_start_node_id(from.start_node_id());
  }
  if (from.link_length_meters() != 0) {
    set_link_length_meters(from.link_length_meters());
  }
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.topology.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.topology.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::Swap(Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link::InternalSwap(Link* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&intersects_tiles_)->InternalSwap(CastToBase(&other->intersects_tiles_));
  swap(end_node_ref_, other->end_node_ref_);
  swap(geometry_, other->geometry_);
  swap(link_id_, other->link_id_);
  swap(start_node_id_, other->start_node_id_);
  swap(link_length_meters_, other->link_length_meters_);
}

::google::protobuf::Metadata Link::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace topology
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::topology::TopologyLayerTile* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::topology::TopologyLayerTile >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::topology::TopologyLayerTile >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::topology::Node* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::topology::Node >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::topology::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::topology::Link* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::topology::Link >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::topology::Link >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
