// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/shared/v1/core/conditional-attributes.proto

#include "com/here/pb/hdmap/shared/v1/core/conditional-attributes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RoadUsers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_DateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConditionalSpeedLimit_LaneDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConditionalSpeedLimit_TrafficCalmingMeasures_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ConditionalSpeedLimit_Advisory_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ConditionalSpeedLimit_Environmental_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ConditionalSpeedLimit_LocationProximity_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ConditionalSpeedLimit_TimeDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto;
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace shared {
namespace v1 {
namespace core {
class ConditionalOvertakingRestrictionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalOvertakingRestriction> _instance;
} _ConditionalOvertakingRestriction_default_instance_;
class ConditionalUsageFeeRequiredDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalUsageFeeRequired> _instance;
} _ConditionalUsageFeeRequired_default_instance_;
class ConditionalRestrictedDrivingManoeuvreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalRestrictedDrivingManoeuvre> _instance;
} _ConditionalRestrictedDrivingManoeuvre_default_instance_;
class ConditionalPermittedDrivingManoeuvreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalPermittedDrivingManoeuvre> _instance;
} _ConditionalPermittedDrivingManoeuvre_default_instance_;
class ConditionalAccessRestrictionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalAccessRestriction> _instance;
} _ConditionalAccessRestriction_default_instance_;
class ConditionalAccessPermissionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalAccessPermission> _instance;
} _ConditionalAccessPermission_default_instance_;
class ConditionalSpeedLimit_AdvisoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalSpeedLimit_Advisory> _instance;
} _ConditionalSpeedLimit_Advisory_default_instance_;
class ConditionalSpeedLimit_TrafficCalmingMeasuresDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalSpeedLimit_TrafficCalmingMeasures> _instance;
} _ConditionalSpeedLimit_TrafficCalmingMeasures_default_instance_;
class ConditionalSpeedLimit_LocationProximityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalSpeedLimit_LocationProximity> _instance;
} _ConditionalSpeedLimit_LocationProximity_default_instance_;
class ConditionalSpeedLimit_EnvironmentalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalSpeedLimit_Environmental> _instance;
} _ConditionalSpeedLimit_Environmental_default_instance_;
class ConditionalSpeedLimit_TimeDependentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalSpeedLimit_TimeDependent> _instance;
} _ConditionalSpeedLimit_TimeDependent_default_instance_;
class ConditionalSpeedLimit_LaneDependentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalSpeedLimit_LaneDependent> _instance;
} _ConditionalSpeedLimit_LaneDependent_default_instance_;
class ConditionalSpeedLimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalSpeedLimit> _instance;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory* advisory_;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures* traffic_calming_measures_;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity* location_proximity_;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental* environmental_;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent* time_dependent_;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent* lane_dependent_;
} _ConditionalSpeedLimit_default_instance_;
class ConditionalTollStructureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionalTollStructure> _instance;
} _ConditionalTollStructure_default_instance_;
}  // namespace core
}  // namespace v1
}  // namespace shared
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
static void InitDefaultsConditionalOvertakingRestriction_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ConditionalOvertakingRestriction_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ConditionalOvertakingRestriction_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConditionalOvertakingRestriction_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto}, {
      &scc_info_RoadUsers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base,
      &scc_info_DateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,}};

static void InitDefaultsConditionalUsageFeeRequired_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ConditionalUsageFeeRequired_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ConditionalUsageFeeRequired_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConditionalUsageFeeRequired_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto}, {
      &scc_info_RoadUsers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base,
      &scc_info_DateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,}};

static void InitDefaultsConditionalRestrictedDrivingManoeuvre_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ConditionalRestrictedDrivingManoeuvre_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ConditionalRestrictedDrivingManoeuvre_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConditionalRestrictedDrivingManoeuvre_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto}, {
      &scc_info_RoadUsers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base,
      &scc_info_DateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,}};

static void InitDefaultsConditionalPermittedDrivingManoeuvre_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ConditionalPermittedDrivingManoeuvre_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ConditionalPermittedDrivingManoeuvre_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConditionalPermittedDrivingManoeuvre_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto}, {
      &scc_info_RoadUsers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base,
      &scc_info_DateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,}};

static void InitDefaultsConditionalAccessRestriction_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ConditionalAccessRestriction_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ConditionalAccessRestriction_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConditionalAccessRestriction_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto}, {
      &scc_info_RoadUsers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base,
      &scc_info_DateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,}};

static void InitDefaultsConditionalAccessPermission_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ConditionalAccessPermission_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ConditionalAccessPermission_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConditionalAccessPermission_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto}, {
      &scc_info_RoadUsers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base,
      &scc_info_DateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,}};

static void InitDefaultsConditionalSpeedLimit_Advisory_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_Advisory_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConditionalSpeedLimit_Advisory_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConditionalSpeedLimit_Advisory_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto}, {
      &scc_info_SpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base,}};

static void InitDefaultsConditionalSpeedLimit_TrafficCalmingMeasures_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_TrafficCalmingMeasures_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConditionalSpeedLimit_TrafficCalmingMeasures_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConditionalSpeedLimit_TrafficCalmingMeasures_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto}, {}};

static void InitDefaultsConditionalSpeedLimit_LocationProximity_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_LocationProximity_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ConditionalSpeedLimit_LocationProximity_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConditionalSpeedLimit_LocationProximity_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto}, {
      &scc_info_SpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base,
      &scc_info_DateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,}};

static void InitDefaultsConditionalSpeedLimit_Environmental_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_Environmental_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConditionalSpeedLimit_Environmental_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConditionalSpeedLimit_Environmental_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto}, {
      &scc_info_SpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base,}};

static void InitDefaultsConditionalSpeedLimit_TimeDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_TimeDependent_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ConditionalSpeedLimit_TimeDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConditionalSpeedLimit_TimeDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto}, {
      &scc_info_SpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base,
      &scc_info_DateTimeModifier_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto.base,}};

static void InitDefaultsConditionalSpeedLimit_LaneDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_LaneDependent_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConditionalSpeedLimit_LaneDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConditionalSpeedLimit_LaneDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto}, {}};

static void InitDefaultsConditionalSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_ConditionalSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsConditionalSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto}, {
      &scc_info_ConditionalSpeedLimit_Advisory_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base,
      &scc_info_ConditionalSpeedLimit_TrafficCalmingMeasures_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base,
      &scc_info_ConditionalSpeedLimit_LocationProximity_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base,
      &scc_info_ConditionalSpeedLimit_Environmental_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base,
      &scc_info_ConditionalSpeedLimit_TimeDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base,
      &scc_info_ConditionalSpeedLimit_LaneDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base,}};

static void InitDefaultsConditionalTollStructure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ConditionalTollStructure_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConditionalTollStructure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConditionalTollStructure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto}, {
      &scc_info_RoadUsers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto.base,}};

void InitDefaults_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalOvertakingRestriction_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalUsageFeeRequired_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalRestrictedDrivingManoeuvre_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalPermittedDrivingManoeuvre_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalAccessRestriction_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalAccessPermission_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalSpeedLimit_Advisory_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalSpeedLimit_TrafficCalmingMeasures_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalSpeedLimit_LocationProximity_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalSpeedLimit_Environmental_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalSpeedLimit_TimeDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalSpeedLimit_LaneDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionalTollStructure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[9];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction, applies_to_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction, applies_during_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction, applies_in_weather_conditions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired, applies_to_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired, applies_during_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired, toll_feature_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre, applies_to_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre, applies_during_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre, restriction_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre, applies_to_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre, applies_during_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre, permission_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction, applies_to_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction, applies_during_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction, dependent_access_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission, applies_to_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission, applies_during_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory, override_speed_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity, overridespeedlimit_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity, during_date_time_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity, location_proximity_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental, override_speed_limit_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental, environmental_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent, override_speed_limit_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent, during_date_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimitDefaultTypeInternal, advisory_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimitDefaultTypeInternal, traffic_calming_measures_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimitDefaultTypeInternal, location_proximity_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimitDefaultTypeInternal, environmental_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimitDefaultTypeInternal, time_dependent_),
  offsetof(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimitDefaultTypeInternal, lane_dependent_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit, situation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure, applies_to_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure, toll_structure_type_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure, toll_payment_method_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction)},
  { 8, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired)},
  { 16, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre)},
  { 24, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre)},
  { 32, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction)},
  { 40, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission)},
  { 47, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory)},
  { 53, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures)},
  { 58, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity)},
  { 66, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental)},
  { 73, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent)},
  { 80, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent)},
  { 85, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit)},
  { 97, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalOvertakingRestriction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalUsageFeeRequired_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalRestrictedDrivingManoeuvre_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalPermittedDrivingManoeuvre_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalAccessRestriction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalAccessPermission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_Advisory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_TrafficCalmingMeasures_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_LocationProximity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_Environmental_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_TimeDependent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_LaneDependent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalTollStructure_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto = {
  {}, AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto, "com/here/pb/hdmap/shared/v1/core/conditional-attributes.proto", schemas,
  file_default_instances, TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto::offsets,
  file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto, 14, file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto, file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto,
};

const char descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[] =
  "\n=com/here/pb/hdmap/shared/v1/core/condi"
  "tional-attributes.proto\022 com.here.pb.hdm"
  "ap.shared.v1.core\032-com/here/pb/hdmap/sha"
  "red/v1/core/common.proto\032Fcom/here/pb/hd"
  "map/shared/v1/core/conditional-attribute"
  "-modifiers.proto\"\377\002\n ConditionalOvertaki"
  "ngRestriction\022\?\n\napplies_to\030\001 \001(\0132+.com."
  "here.pb.hdmap.shared.v1.core.RoadUsers\022J"
  "\n\016applies_during\030\002 \003(\01322.com.here.pb.hdm"
  "ap.shared.v1.core.DateTimeModifier\022u\n\035ap"
  "plies_in_weather_conditions\030\003 \001(\0162N.com."
  "here.pb.hdmap.shared.v1.core.Conditional"
  "OvertakingRestriction.WeatherType\"W\n\013Wea"
  "therType\022\027\n\023WeatherType_UNKNOWN\020\000\022\010\n\004RAI"
  "N\020\001\022\010\n\004SNOW\020\002\022\007\n\003FOG\020\003\022\022\n\016NOT_APPLICABLE"
  "\020\004\"\275\003\n\033ConditionalUsageFeeRequired\022\?\n\nap"
  "plies_to\030\001 \001(\0132+.com.here.pb.hdmap.share"
  "d.v1.core.RoadUsers\022J\n\016applies_during\030\002 "
  "\003(\01322.com.here.pb.hdmap.shared.v1.core.D"
  "ateTimeModifier\022h\n\021toll_feature_type\030\003 \001"
  "(\0162M.com.here.pb.hdmap.shared.v1.core.Co"
  "nditionalUsageFeeRequired.TollFeatureTyp"
  "e\"\246\001\n\017TollFeatureType\022\033\n\027TollFeatureType"
  "_UNKNOWN\020\000\022\r\n\tTOLL_ROAD\020\001\022\n\n\006BRIDGE\020\002\022\n\n"
  "\006TUNNEL\020\003\022\010\n\004PARK\020\004\022\021\n\rMOUNTAIN_PASS\020\005\022\020"
  "\n\014SCENIC_ROUTE\020\006\022\021\n\rVIGNETTE_ROAD\020\007\022\r\n\tT"
  "OLL_ZONE\020\010\"\372\002\n%ConditionalRestrictedDriv"
  "ingManoeuvre\022\?\n\napplies_to\030\001 \001(\0132+.com.h"
  "ere.pb.hdmap.shared.v1.core.RoadUsers\022J\n"
  "\016applies_during\030\002 \003(\01322.com.here.pb.hdma"
  "p.shared.v1.core.DateTimeModifier\022q\n\020res"
  "triction_type\030\003 \001(\0162W.com.here.pb.hdmap."
  "shared.v1.core.ConditionalRestrictedDriv"
  "ingManoeuvre.RestrictionType\"Q\n\017Restrict"
  "ionType\022\030\n\024RestrictionType_NONE\020\000\022\t\n\005LEG"
  "AL\020\001\022\014\n\010PHYSICAL\020\002\022\013\n\007LOGICAL\020\003\"\334\002\n$Cond"
  "itionalPermittedDrivingManoeuvre\022\?\n\nappl"
  "ies_to\030\001 \001(\0132+.com.here.pb.hdmap.shared."
  "v1.core.RoadUsers\022J\n\016applies_during\030\002 \003("
  "\01322.com.here.pb.hdmap.shared.v1.core.Dat"
  "eTimeModifier\022n\n\017permission_type\030\003 \001(\0162U"
  ".com.here.pb.hdmap.shared.v1.core.Condit"
  "ionalPermittedDrivingManoeuvre.Permissio"
  "nType\"7\n\016PermissionType\022\032\n\026PermissionTyp"
  "e_UNKNOWN\020\000\022\t\n\005LEGAL\020\001\"\344\002\n\034ConditionalAc"
  "cessRestriction\022\?\n\napplies_to\030\001 \001(\0132+.co"
  "m.here.pb.hdmap.shared.v1.core.RoadUsers"
  "\022J\n\016applies_during\030\002 \003(\01322.com.here.pb.h"
  "dmap.shared.v1.core.DateTimeModifier\022q\n\025"
  "dependent_access_type\030\003 \001(\0162R.com.here.p"
  "b.hdmap.shared.v1.core.ConditionalAccess"
  "Restriction.DependentAccessType\"D\n\023Depen"
  "dentAccessType\022\037\n\033DependentAccessType_UN"
  "KNOWN\020\000\022\014\n\010VARIABLE\020\001\"\252\001\n\033ConditionalAcc"
  "essPermission\022\?\n\napplies_to\030\001 \001(\0132+.com."
  "here.pb.hdmap.shared.v1.core.RoadUsers\022J"
  "\n\016applies_during\030\002 \003(\01322.com.here.pb.hdm"
  "ap.shared.v1.core.DateTimeModifier\"\305\014\n\025C"
  "onditionalSpeedLimit\022T\n\010advisory\030\001 \001(\0132@"
  ".com.here.pb.hdmap.shared.v1.core.Condit"
  "ionalSpeedLimit.AdvisoryH\000\022r\n\030traffic_ca"
  "lming_measures\030\002 \001(\0132N.com.here.pb.hdmap"
  ".shared.v1.core.ConditionalSpeedLimit.Tr"
  "afficCalmingMeasuresH\000\022g\n\022location_proxi"
  "mity\030\003 \001(\0132I.com.here.pb.hdmap.shared.v1"
  ".core.ConditionalSpeedLimit.LocationProx"
  "imityH\000\022^\n\renvironmental\030\004 \001(\0132E.com.her"
  "e.pb.hdmap.shared.v1.core.ConditionalSpe"
  "edLimit.EnvironmentalH\000\022_\n\016time_dependen"
  "t\030\005 \001(\0132E.com.here.pb.hdmap.shared.v1.co"
  "re.ConditionalSpeedLimit.TimeDependentH\000"
  "\022_\n\016lane_dependent\030\006 \001(\0132E.com.here.pb.h"
  "dmap.shared.v1.core.ConditionalSpeedLimi"
  "t.LaneDependentH\000\032V\n\010Advisory\022J\n\024overrid"
  "e_speed_limit\030\001 \001(\0132,.com.here.pb.hdmap."
  "shared.v1.core.SpeedLimit\032\030\n\026TrafficCalm"
  "ingMeasures\032\366\002\n\021LocationProximity\022H\n\022ove"
  "rrideSpeedLimit\030\001 \001(\0132,.com.here.pb.hdma"
  "p.shared.v1.core.SpeedLimit\022L\n\020during_da"
  "te_time\030\002 \003(\01322.com.here.pb.hdmap.shared"
  ".v1.core.DateTimeModifier\022\200\001\n\027location_p"
  "roximity_type\030\003 \001(\0162_.com.here.pb.hdmap."
  "shared.v1.core.ConditionalSpeedLimit.Loc"
  "ationProximity.LocationProximityType\"F\n\025"
  "LocationProximityType\022!\n\035LocationProximi"
  "tyType_UNKNOWN\020\000\022\n\n\006SCHOOL\020\001\032\241\002\n\rEnviron"
  "mental\022J\n\024override_speed_limit\030\001 \001(\0132,.c"
  "om.here.pb.hdmap.shared.v1.core.SpeedLim"
  "it\022s\n\022environmental_type\030\002 \001(\0162W.com.her"
  "e.pb.hdmap.shared.v1.core.ConditionalSpe"
  "edLimit.Environmental.EnvironmentalType\""
  "O\n\021EnvironmentalType\022\035\n\031EnvironmentalTyp"
  "e_UNKNOWN\020\000\022\007\n\003FOG\020\001\022\010\n\004RAIN\020\002\022\010\n\004SNOW\020\003"
  "\032\251\001\n\rTimeDependent\022J\n\024override_speed_lim"
  "it\030\001 \001(\0132,.com.here.pb.hdmap.shared.v1.c"
  "ore.SpeedLimit\022L\n\020during_date_time\030\002 \003(\013"
  "22.com.here.pb.hdmap.shared.v1.core.Date"
  "TimeModifier\032\017\n\rLaneDependentB\013\n\tsituati"
  "on\"\355\004\n\030ConditionalTollStructure\022\?\n\nappli"
  "es_to\030\001 \001(\0132+.com.here.pb.hdmap.shared.v"
  "1.core.RoadUsers\022i\n\023toll_structure_type\030"
  "\002 \003(\0162L.com.here.pb.hdmap.shared.v1.core"
  ".ConditionalTollStructure.TollStructureT"
  "ype\022i\n\023toll_payment_method\030\003 \003(\0162L.com.h"
  "ere.pb.hdmap.shared.v1.core.ConditionalT"
  "ollStructure.TollPaymentMethod\"x\n\021TollSt"
  "ructureType\022\035\n\031TollStructureType_UNKNOWN"
  "\020\000\022\r\n\tFIXED_FEE\020\001\022\021\n\rOBTAIN_TICKET\020\002\022\022\n\016"
  "PAY_PER_TICKET\020\003\022\016\n\nELECTRONIC\020\004\"\277\001\n\021Tol"
  "lPaymentMethod\022\035\n\031TollPaymentMethod_UNKN"
  "OWN\020\000\022\010\n\004CASH\020\001\022\r\n\tBANK_CARD\020\002\022\017\n\013CREDIT"
  "_CARD\020\003\022\030\n\024PASS_OR_SUBSCRIPTION\020\004\022\017\n\013TRA"
  "NSPONDER\020\005\022\025\n\021VIDEO_TOLL_CHARGE\020\006\022\016\n\nEXA"
  "CT_CASH\020\007\022\017\n\013TRAVEL_CARD\020\010b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto = {
  false, InitDefaults_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto, 
  descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto,
  "com/here/pb/hdmap/shared/v1/core/conditional-attributes.proto", &assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto, 4554,
};

void AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto,
    ::AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto = []() { AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto(); return true; }();
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace shared {
namespace v1 {
namespace core {
const ::google::protobuf::EnumDescriptor* ConditionalOvertakingRestriction_WeatherType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[0];
}
bool ConditionalOvertakingRestriction_WeatherType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConditionalOvertakingRestriction_WeatherType ConditionalOvertakingRestriction::WeatherType_UNKNOWN;
const ConditionalOvertakingRestriction_WeatherType ConditionalOvertakingRestriction::RAIN;
const ConditionalOvertakingRestriction_WeatherType ConditionalOvertakingRestriction::SNOW;
const ConditionalOvertakingRestriction_WeatherType ConditionalOvertakingRestriction::FOG;
const ConditionalOvertakingRestriction_WeatherType ConditionalOvertakingRestriction::NOT_APPLICABLE;
const ConditionalOvertakingRestriction_WeatherType ConditionalOvertakingRestriction::WeatherType_MIN;
const ConditionalOvertakingRestriction_WeatherType ConditionalOvertakingRestriction::WeatherType_MAX;
const int ConditionalOvertakingRestriction::WeatherType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConditionalUsageFeeRequired_TollFeatureType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[1];
}
bool ConditionalUsageFeeRequired_TollFeatureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConditionalUsageFeeRequired_TollFeatureType ConditionalUsageFeeRequired::TollFeatureType_UNKNOWN;
const ConditionalUsageFeeRequired_TollFeatureType ConditionalUsageFeeRequired::TOLL_ROAD;
const ConditionalUsageFeeRequired_TollFeatureType ConditionalUsageFeeRequired::BRIDGE;
const ConditionalUsageFeeRequired_TollFeatureType ConditionalUsageFeeRequired::TUNNEL;
const ConditionalUsageFeeRequired_TollFeatureType ConditionalUsageFeeRequired::PARK;
const ConditionalUsageFeeRequired_TollFeatureType ConditionalUsageFeeRequired::MOUNTAIN_PASS;
const ConditionalUsageFeeRequired_TollFeatureType ConditionalUsageFeeRequired::SCENIC_ROUTE;
const ConditionalUsageFeeRequired_TollFeatureType ConditionalUsageFeeRequired::VIGNETTE_ROAD;
const ConditionalUsageFeeRequired_TollFeatureType ConditionalUsageFeeRequired::TOLL_ZONE;
const ConditionalUsageFeeRequired_TollFeatureType ConditionalUsageFeeRequired::TollFeatureType_MIN;
const ConditionalUsageFeeRequired_TollFeatureType ConditionalUsageFeeRequired::TollFeatureType_MAX;
const int ConditionalUsageFeeRequired::TollFeatureType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConditionalRestrictedDrivingManoeuvre_RestrictionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[2];
}
bool ConditionalRestrictedDrivingManoeuvre_RestrictionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConditionalRestrictedDrivingManoeuvre_RestrictionType ConditionalRestrictedDrivingManoeuvre::RestrictionType_NONE;
const ConditionalRestrictedDrivingManoeuvre_RestrictionType ConditionalRestrictedDrivingManoeuvre::LEGAL;
const ConditionalRestrictedDrivingManoeuvre_RestrictionType ConditionalRestrictedDrivingManoeuvre::PHYSICAL;
const ConditionalRestrictedDrivingManoeuvre_RestrictionType ConditionalRestrictedDrivingManoeuvre::LOGICAL;
const ConditionalRestrictedDrivingManoeuvre_RestrictionType ConditionalRestrictedDrivingManoeuvre::RestrictionType_MIN;
const ConditionalRestrictedDrivingManoeuvre_RestrictionType ConditionalRestrictedDrivingManoeuvre::RestrictionType_MAX;
const int ConditionalRestrictedDrivingManoeuvre::RestrictionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConditionalPermittedDrivingManoeuvre_PermissionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[3];
}
bool ConditionalPermittedDrivingManoeuvre_PermissionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConditionalPermittedDrivingManoeuvre_PermissionType ConditionalPermittedDrivingManoeuvre::PermissionType_UNKNOWN;
const ConditionalPermittedDrivingManoeuvre_PermissionType ConditionalPermittedDrivingManoeuvre::LEGAL;
const ConditionalPermittedDrivingManoeuvre_PermissionType ConditionalPermittedDrivingManoeuvre::PermissionType_MIN;
const ConditionalPermittedDrivingManoeuvre_PermissionType ConditionalPermittedDrivingManoeuvre::PermissionType_MAX;
const int ConditionalPermittedDrivingManoeuvre::PermissionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConditionalAccessRestriction_DependentAccessType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[4];
}
bool ConditionalAccessRestriction_DependentAccessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConditionalAccessRestriction_DependentAccessType ConditionalAccessRestriction::DependentAccessType_UNKNOWN;
const ConditionalAccessRestriction_DependentAccessType ConditionalAccessRestriction::VARIABLE;
const ConditionalAccessRestriction_DependentAccessType ConditionalAccessRestriction::DependentAccessType_MIN;
const ConditionalAccessRestriction_DependentAccessType ConditionalAccessRestriction::DependentAccessType_MAX;
const int ConditionalAccessRestriction::DependentAccessType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConditionalSpeedLimit_LocationProximity_LocationProximityType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[5];
}
bool ConditionalSpeedLimit_LocationProximity_LocationProximityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConditionalSpeedLimit_LocationProximity_LocationProximityType ConditionalSpeedLimit_LocationProximity::LocationProximityType_UNKNOWN;
const ConditionalSpeedLimit_LocationProximity_LocationProximityType ConditionalSpeedLimit_LocationProximity::SCHOOL;
const ConditionalSpeedLimit_LocationProximity_LocationProximityType ConditionalSpeedLimit_LocationProximity::LocationProximityType_MIN;
const ConditionalSpeedLimit_LocationProximity_LocationProximityType ConditionalSpeedLimit_LocationProximity::LocationProximityType_MAX;
const int ConditionalSpeedLimit_LocationProximity::LocationProximityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConditionalSpeedLimit_Environmental_EnvironmentalType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[6];
}
bool ConditionalSpeedLimit_Environmental_EnvironmentalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConditionalSpeedLimit_Environmental_EnvironmentalType ConditionalSpeedLimit_Environmental::EnvironmentalType_UNKNOWN;
const ConditionalSpeedLimit_Environmental_EnvironmentalType ConditionalSpeedLimit_Environmental::FOG;
const ConditionalSpeedLimit_Environmental_EnvironmentalType ConditionalSpeedLimit_Environmental::RAIN;
const ConditionalSpeedLimit_Environmental_EnvironmentalType ConditionalSpeedLimit_Environmental::SNOW;
const ConditionalSpeedLimit_Environmental_EnvironmentalType ConditionalSpeedLimit_Environmental::EnvironmentalType_MIN;
const ConditionalSpeedLimit_Environmental_EnvironmentalType ConditionalSpeedLimit_Environmental::EnvironmentalType_MAX;
const int ConditionalSpeedLimit_Environmental::EnvironmentalType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConditionalTollStructure_TollStructureType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[7];
}
bool ConditionalTollStructure_TollStructureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConditionalTollStructure_TollStructureType ConditionalTollStructure::TollStructureType_UNKNOWN;
const ConditionalTollStructure_TollStructureType ConditionalTollStructure::FIXED_FEE;
const ConditionalTollStructure_TollStructureType ConditionalTollStructure::OBTAIN_TICKET;
const ConditionalTollStructure_TollStructureType ConditionalTollStructure::PAY_PER_TICKET;
const ConditionalTollStructure_TollStructureType ConditionalTollStructure::ELECTRONIC;
const ConditionalTollStructure_TollStructureType ConditionalTollStructure::TollStructureType_MIN;
const ConditionalTollStructure_TollStructureType ConditionalTollStructure::TollStructureType_MAX;
const int ConditionalTollStructure::TollStructureType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConditionalTollStructure_TollPaymentMethod_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[8];
}
bool ConditionalTollStructure_TollPaymentMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConditionalTollStructure_TollPaymentMethod ConditionalTollStructure::TollPaymentMethod_UNKNOWN;
const ConditionalTollStructure_TollPaymentMethod ConditionalTollStructure::CASH;
const ConditionalTollStructure_TollPaymentMethod ConditionalTollStructure::BANK_CARD;
const ConditionalTollStructure_TollPaymentMethod ConditionalTollStructure::CREDIT_CARD;
const ConditionalTollStructure_TollPaymentMethod ConditionalTollStructure::PASS_OR_SUBSCRIPTION;
const ConditionalTollStructure_TollPaymentMethod ConditionalTollStructure::TRANSPONDER;
const ConditionalTollStructure_TollPaymentMethod ConditionalTollStructure::VIDEO_TOLL_CHARGE;
const ConditionalTollStructure_TollPaymentMethod ConditionalTollStructure::EXACT_CASH;
const ConditionalTollStructure_TollPaymentMethod ConditionalTollStructure::TRAVEL_CARD;
const ConditionalTollStructure_TollPaymentMethod ConditionalTollStructure::TollPaymentMethod_MIN;
const ConditionalTollStructure_TollPaymentMethod ConditionalTollStructure::TollPaymentMethod_MAX;
const int ConditionalTollStructure::TollPaymentMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ConditionalOvertakingRestriction::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalOvertakingRestriction_default_instance_._instance.get_mutable()->applies_to_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::RoadUsers*>(
      ::com::here::pb::hdmap::shared::v1::core::RoadUsers::internal_default_instance());
}
class ConditionalOvertakingRestriction::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::RoadUsers& applies_to(const ConditionalOvertakingRestriction* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::RoadUsers&
ConditionalOvertakingRestriction::HasBitSetters::applies_to(const ConditionalOvertakingRestriction* msg) {
  return *msg->applies_to_;
}
void ConditionalOvertakingRestriction::clear_applies_to() {
  if (GetArenaNoVirtual() == nullptr && applies_to_ != nullptr) {
    delete applies_to_;
  }
  applies_to_ = nullptr;
}
void ConditionalOvertakingRestriction::clear_applies_during() {
  applies_during_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalOvertakingRestriction::kAppliesToFieldNumber;
const int ConditionalOvertakingRestriction::kAppliesDuringFieldNumber;
const int ConditionalOvertakingRestriction::kAppliesInWeatherConditionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalOvertakingRestriction::ConditionalOvertakingRestriction()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
}
ConditionalOvertakingRestriction::ConditionalOvertakingRestriction(const ConditionalOvertakingRestriction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      applies_during_(from.applies_during_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_applies_to()) {
    applies_to_ = new ::com::here::pb::hdmap::shared::v1::core::RoadUsers(*from.applies_to_);
  } else {
    applies_to_ = nullptr;
  }
  applies_in_weather_conditions_ = from.applies_in_weather_conditions_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
}

void ConditionalOvertakingRestriction::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConditionalOvertakingRestriction_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::memset(&applies_to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applies_in_weather_conditions_) -
      reinterpret_cast<char*>(&applies_to_)) + sizeof(applies_in_weather_conditions_));
}

ConditionalOvertakingRestriction::~ConditionalOvertakingRestriction() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
  SharedDtor();
}

void ConditionalOvertakingRestriction::SharedDtor() {
  if (this != internal_default_instance()) delete applies_to_;
}

void ConditionalOvertakingRestriction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalOvertakingRestriction& ConditionalOvertakingRestriction::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionalOvertakingRestriction_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ConditionalOvertakingRestriction::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applies_during_.Clear();
  if (GetArenaNoVirtual() == nullptr && applies_to_ != nullptr) {
    delete applies_to_;
  }
  applies_to_ = nullptr;
  applies_in_weather_conditions_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalOvertakingRestriction::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionalOvertakingRestriction*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::RoadUsers::_InternalParse;
        object = msg->mutable_applies_to();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier::_InternalParse;
          object = msg->add_applies_during();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction.WeatherType applies_in_weather_conditions = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_applies_in_weather_conditions(static_cast<::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction_WeatherType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalOvertakingRestriction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_applies_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_applies_during()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction.WeatherType applies_in_weather_conditions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_applies_in_weather_conditions(static_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction_WeatherType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalOvertakingRestriction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::applies_to(this), output);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applies_during_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->applies_during(static_cast<int>(i)),
      output);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction.WeatherType applies_in_weather_conditions = 3;
  if (this->applies_in_weather_conditions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->applies_in_weather_conditions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
}

::google::protobuf::uint8* ConditionalOvertakingRestriction::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::applies_to(this), target);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applies_during_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->applies_during(static_cast<int>(i)), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction.WeatherType applies_in_weather_conditions = 3;
  if (this->applies_in_weather_conditions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->applies_in_weather_conditions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
  return target;
}

size_t ConditionalOvertakingRestriction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->applies_during_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->applies_during(static_cast<int>(i)));
    }
  }

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *applies_to_);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction.WeatherType applies_in_weather_conditions = 3;
  if (this->applies_in_weather_conditions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->applies_in_weather_conditions());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalOvertakingRestriction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalOvertakingRestriction* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionalOvertakingRestriction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
    MergeFrom(*source);
  }
}

void ConditionalOvertakingRestriction::MergeFrom(const ConditionalOvertakingRestriction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  applies_during_.MergeFrom(from.applies_during_);
  if (from.has_applies_to()) {
    mutable_applies_to()->::com::here::pb::hdmap::shared::v1::core::RoadUsers::MergeFrom(from.applies_to());
  }
  if (from.applies_in_weather_conditions() != 0) {
    set_applies_in_weather_conditions(from.applies_in_weather_conditions());
  }
}

void ConditionalOvertakingRestriction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalOvertakingRestriction::CopyFrom(const ConditionalOvertakingRestriction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalOvertakingRestriction::IsInitialized() const {
  return true;
}

void ConditionalOvertakingRestriction::Swap(ConditionalOvertakingRestriction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalOvertakingRestriction::InternalSwap(ConditionalOvertakingRestriction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&applies_during_)->InternalSwap(CastToBase(&other->applies_during_));
  swap(applies_to_, other->applies_to_);
  swap(applies_in_weather_conditions_, other->applies_in_weather_conditions_);
}

::google::protobuf::Metadata ConditionalOvertakingRestriction::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConditionalUsageFeeRequired::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalUsageFeeRequired_default_instance_._instance.get_mutable()->applies_to_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::RoadUsers*>(
      ::com::here::pb::hdmap::shared::v1::core::RoadUsers::internal_default_instance());
}
class ConditionalUsageFeeRequired::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::RoadUsers& applies_to(const ConditionalUsageFeeRequired* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::RoadUsers&
ConditionalUsageFeeRequired::HasBitSetters::applies_to(const ConditionalUsageFeeRequired* msg) {
  return *msg->applies_to_;
}
void ConditionalUsageFeeRequired::clear_applies_to() {
  if (GetArenaNoVirtual() == nullptr && applies_to_ != nullptr) {
    delete applies_to_;
  }
  applies_to_ = nullptr;
}
void ConditionalUsageFeeRequired::clear_applies_during() {
  applies_during_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalUsageFeeRequired::kAppliesToFieldNumber;
const int ConditionalUsageFeeRequired::kAppliesDuringFieldNumber;
const int ConditionalUsageFeeRequired::kTollFeatureTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalUsageFeeRequired::ConditionalUsageFeeRequired()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
}
ConditionalUsageFeeRequired::ConditionalUsageFeeRequired(const ConditionalUsageFeeRequired& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      applies_during_(from.applies_during_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_applies_to()) {
    applies_to_ = new ::com::here::pb::hdmap::shared::v1::core::RoadUsers(*from.applies_to_);
  } else {
    applies_to_ = nullptr;
  }
  toll_feature_type_ = from.toll_feature_type_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
}

void ConditionalUsageFeeRequired::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConditionalUsageFeeRequired_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::memset(&applies_to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&toll_feature_type_) -
      reinterpret_cast<char*>(&applies_to_)) + sizeof(toll_feature_type_));
}

ConditionalUsageFeeRequired::~ConditionalUsageFeeRequired() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
  SharedDtor();
}

void ConditionalUsageFeeRequired::SharedDtor() {
  if (this != internal_default_instance()) delete applies_to_;
}

void ConditionalUsageFeeRequired::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalUsageFeeRequired& ConditionalUsageFeeRequired::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionalUsageFeeRequired_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ConditionalUsageFeeRequired::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applies_during_.Clear();
  if (GetArenaNoVirtual() == nullptr && applies_to_ != nullptr) {
    delete applies_to_;
  }
  applies_to_ = nullptr;
  toll_feature_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalUsageFeeRequired::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionalUsageFeeRequired*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::RoadUsers::_InternalParse;
        object = msg->mutable_applies_to();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier::_InternalParse;
          object = msg->add_applies_during();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired.TollFeatureType toll_feature_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_toll_feature_type(static_cast<::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired_TollFeatureType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalUsageFeeRequired::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_applies_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_applies_during()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired.TollFeatureType toll_feature_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_toll_feature_type(static_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired_TollFeatureType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalUsageFeeRequired::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::applies_to(this), output);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applies_during_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->applies_during(static_cast<int>(i)),
      output);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired.TollFeatureType toll_feature_type = 3;
  if (this->toll_feature_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->toll_feature_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
}

::google::protobuf::uint8* ConditionalUsageFeeRequired::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::applies_to(this), target);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applies_during_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->applies_during(static_cast<int>(i)), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired.TollFeatureType toll_feature_type = 3;
  if (this->toll_feature_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->toll_feature_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
  return target;
}

size_t ConditionalUsageFeeRequired::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->applies_during_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->applies_during(static_cast<int>(i)));
    }
  }

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *applies_to_);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired.TollFeatureType toll_feature_type = 3;
  if (this->toll_feature_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->toll_feature_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalUsageFeeRequired::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalUsageFeeRequired* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionalUsageFeeRequired>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
    MergeFrom(*source);
  }
}

void ConditionalUsageFeeRequired::MergeFrom(const ConditionalUsageFeeRequired& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  applies_during_.MergeFrom(from.applies_during_);
  if (from.has_applies_to()) {
    mutable_applies_to()->::com::here::pb::hdmap::shared::v1::core::RoadUsers::MergeFrom(from.applies_to());
  }
  if (from.toll_feature_type() != 0) {
    set_toll_feature_type(from.toll_feature_type());
  }
}

void ConditionalUsageFeeRequired::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalUsageFeeRequired::CopyFrom(const ConditionalUsageFeeRequired& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalUsageFeeRequired::IsInitialized() const {
  return true;
}

void ConditionalUsageFeeRequired::Swap(ConditionalUsageFeeRequired* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalUsageFeeRequired::InternalSwap(ConditionalUsageFeeRequired* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&applies_during_)->InternalSwap(CastToBase(&other->applies_during_));
  swap(applies_to_, other->applies_to_);
  swap(toll_feature_type_, other->toll_feature_type_);
}

::google::protobuf::Metadata ConditionalUsageFeeRequired::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConditionalRestrictedDrivingManoeuvre::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalRestrictedDrivingManoeuvre_default_instance_._instance.get_mutable()->applies_to_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::RoadUsers*>(
      ::com::here::pb::hdmap::shared::v1::core::RoadUsers::internal_default_instance());
}
class ConditionalRestrictedDrivingManoeuvre::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::RoadUsers& applies_to(const ConditionalRestrictedDrivingManoeuvre* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::RoadUsers&
ConditionalRestrictedDrivingManoeuvre::HasBitSetters::applies_to(const ConditionalRestrictedDrivingManoeuvre* msg) {
  return *msg->applies_to_;
}
void ConditionalRestrictedDrivingManoeuvre::clear_applies_to() {
  if (GetArenaNoVirtual() == nullptr && applies_to_ != nullptr) {
    delete applies_to_;
  }
  applies_to_ = nullptr;
}
void ConditionalRestrictedDrivingManoeuvre::clear_applies_during() {
  applies_during_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalRestrictedDrivingManoeuvre::kAppliesToFieldNumber;
const int ConditionalRestrictedDrivingManoeuvre::kAppliesDuringFieldNumber;
const int ConditionalRestrictedDrivingManoeuvre::kRestrictionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalRestrictedDrivingManoeuvre::ConditionalRestrictedDrivingManoeuvre()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
}
ConditionalRestrictedDrivingManoeuvre::ConditionalRestrictedDrivingManoeuvre(const ConditionalRestrictedDrivingManoeuvre& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      applies_during_(from.applies_during_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_applies_to()) {
    applies_to_ = new ::com::here::pb::hdmap::shared::v1::core::RoadUsers(*from.applies_to_);
  } else {
    applies_to_ = nullptr;
  }
  restriction_type_ = from.restriction_type_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
}

void ConditionalRestrictedDrivingManoeuvre::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConditionalRestrictedDrivingManoeuvre_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::memset(&applies_to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restriction_type_) -
      reinterpret_cast<char*>(&applies_to_)) + sizeof(restriction_type_));
}

ConditionalRestrictedDrivingManoeuvre::~ConditionalRestrictedDrivingManoeuvre() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
  SharedDtor();
}

void ConditionalRestrictedDrivingManoeuvre::SharedDtor() {
  if (this != internal_default_instance()) delete applies_to_;
}

void ConditionalRestrictedDrivingManoeuvre::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalRestrictedDrivingManoeuvre& ConditionalRestrictedDrivingManoeuvre::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionalRestrictedDrivingManoeuvre_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ConditionalRestrictedDrivingManoeuvre::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applies_during_.Clear();
  if (GetArenaNoVirtual() == nullptr && applies_to_ != nullptr) {
    delete applies_to_;
  }
  applies_to_ = nullptr;
  restriction_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalRestrictedDrivingManoeuvre::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionalRestrictedDrivingManoeuvre*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::RoadUsers::_InternalParse;
        object = msg->mutable_applies_to();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier::_InternalParse;
          object = msg->add_applies_during();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre.RestrictionType restriction_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_restriction_type(static_cast<::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre_RestrictionType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalRestrictedDrivingManoeuvre::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_applies_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_applies_during()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre.RestrictionType restriction_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_restriction_type(static_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre_RestrictionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalRestrictedDrivingManoeuvre::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::applies_to(this), output);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applies_during_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->applies_during(static_cast<int>(i)),
      output);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre.RestrictionType restriction_type = 3;
  if (this->restriction_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->restriction_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
}

::google::protobuf::uint8* ConditionalRestrictedDrivingManoeuvre::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::applies_to(this), target);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applies_during_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->applies_during(static_cast<int>(i)), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre.RestrictionType restriction_type = 3;
  if (this->restriction_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->restriction_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
  return target;
}

size_t ConditionalRestrictedDrivingManoeuvre::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->applies_during_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->applies_during(static_cast<int>(i)));
    }
  }

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *applies_to_);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre.RestrictionType restriction_type = 3;
  if (this->restriction_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->restriction_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalRestrictedDrivingManoeuvre::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalRestrictedDrivingManoeuvre* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionalRestrictedDrivingManoeuvre>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
    MergeFrom(*source);
  }
}

void ConditionalRestrictedDrivingManoeuvre::MergeFrom(const ConditionalRestrictedDrivingManoeuvre& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  applies_during_.MergeFrom(from.applies_during_);
  if (from.has_applies_to()) {
    mutable_applies_to()->::com::here::pb::hdmap::shared::v1::core::RoadUsers::MergeFrom(from.applies_to());
  }
  if (from.restriction_type() != 0) {
    set_restriction_type(from.restriction_type());
  }
}

void ConditionalRestrictedDrivingManoeuvre::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalRestrictedDrivingManoeuvre::CopyFrom(const ConditionalRestrictedDrivingManoeuvre& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalRestrictedDrivingManoeuvre::IsInitialized() const {
  return true;
}

void ConditionalRestrictedDrivingManoeuvre::Swap(ConditionalRestrictedDrivingManoeuvre* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalRestrictedDrivingManoeuvre::InternalSwap(ConditionalRestrictedDrivingManoeuvre* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&applies_during_)->InternalSwap(CastToBase(&other->applies_during_));
  swap(applies_to_, other->applies_to_);
  swap(restriction_type_, other->restriction_type_);
}

::google::protobuf::Metadata ConditionalRestrictedDrivingManoeuvre::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConditionalPermittedDrivingManoeuvre::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalPermittedDrivingManoeuvre_default_instance_._instance.get_mutable()->applies_to_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::RoadUsers*>(
      ::com::here::pb::hdmap::shared::v1::core::RoadUsers::internal_default_instance());
}
class ConditionalPermittedDrivingManoeuvre::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::RoadUsers& applies_to(const ConditionalPermittedDrivingManoeuvre* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::RoadUsers&
ConditionalPermittedDrivingManoeuvre::HasBitSetters::applies_to(const ConditionalPermittedDrivingManoeuvre* msg) {
  return *msg->applies_to_;
}
void ConditionalPermittedDrivingManoeuvre::clear_applies_to() {
  if (GetArenaNoVirtual() == nullptr && applies_to_ != nullptr) {
    delete applies_to_;
  }
  applies_to_ = nullptr;
}
void ConditionalPermittedDrivingManoeuvre::clear_applies_during() {
  applies_during_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalPermittedDrivingManoeuvre::kAppliesToFieldNumber;
const int ConditionalPermittedDrivingManoeuvre::kAppliesDuringFieldNumber;
const int ConditionalPermittedDrivingManoeuvre::kPermissionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalPermittedDrivingManoeuvre::ConditionalPermittedDrivingManoeuvre()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
}
ConditionalPermittedDrivingManoeuvre::ConditionalPermittedDrivingManoeuvre(const ConditionalPermittedDrivingManoeuvre& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      applies_during_(from.applies_during_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_applies_to()) {
    applies_to_ = new ::com::here::pb::hdmap::shared::v1::core::RoadUsers(*from.applies_to_);
  } else {
    applies_to_ = nullptr;
  }
  permission_type_ = from.permission_type_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
}

void ConditionalPermittedDrivingManoeuvre::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConditionalPermittedDrivingManoeuvre_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::memset(&applies_to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_type_) -
      reinterpret_cast<char*>(&applies_to_)) + sizeof(permission_type_));
}

ConditionalPermittedDrivingManoeuvre::~ConditionalPermittedDrivingManoeuvre() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
  SharedDtor();
}

void ConditionalPermittedDrivingManoeuvre::SharedDtor() {
  if (this != internal_default_instance()) delete applies_to_;
}

void ConditionalPermittedDrivingManoeuvre::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalPermittedDrivingManoeuvre& ConditionalPermittedDrivingManoeuvre::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionalPermittedDrivingManoeuvre_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ConditionalPermittedDrivingManoeuvre::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applies_during_.Clear();
  if (GetArenaNoVirtual() == nullptr && applies_to_ != nullptr) {
    delete applies_to_;
  }
  applies_to_ = nullptr;
  permission_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalPermittedDrivingManoeuvre::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionalPermittedDrivingManoeuvre*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::RoadUsers::_InternalParse;
        object = msg->mutable_applies_to();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier::_InternalParse;
          object = msg->add_applies_during();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre.PermissionType permission_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_permission_type(static_cast<::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre_PermissionType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalPermittedDrivingManoeuvre::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_applies_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_applies_during()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre.PermissionType permission_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_permission_type(static_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre_PermissionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalPermittedDrivingManoeuvre::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::applies_to(this), output);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applies_during_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->applies_during(static_cast<int>(i)),
      output);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre.PermissionType permission_type = 3;
  if (this->permission_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->permission_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
}

::google::protobuf::uint8* ConditionalPermittedDrivingManoeuvre::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::applies_to(this), target);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applies_during_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->applies_during(static_cast<int>(i)), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre.PermissionType permission_type = 3;
  if (this->permission_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->permission_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
  return target;
}

size_t ConditionalPermittedDrivingManoeuvre::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->applies_during_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->applies_during(static_cast<int>(i)));
    }
  }

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *applies_to_);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre.PermissionType permission_type = 3;
  if (this->permission_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->permission_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalPermittedDrivingManoeuvre::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalPermittedDrivingManoeuvre* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionalPermittedDrivingManoeuvre>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
    MergeFrom(*source);
  }
}

void ConditionalPermittedDrivingManoeuvre::MergeFrom(const ConditionalPermittedDrivingManoeuvre& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  applies_during_.MergeFrom(from.applies_during_);
  if (from.has_applies_to()) {
    mutable_applies_to()->::com::here::pb::hdmap::shared::v1::core::RoadUsers::MergeFrom(from.applies_to());
  }
  if (from.permission_type() != 0) {
    set_permission_type(from.permission_type());
  }
}

void ConditionalPermittedDrivingManoeuvre::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalPermittedDrivingManoeuvre::CopyFrom(const ConditionalPermittedDrivingManoeuvre& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalPermittedDrivingManoeuvre::IsInitialized() const {
  return true;
}

void ConditionalPermittedDrivingManoeuvre::Swap(ConditionalPermittedDrivingManoeuvre* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalPermittedDrivingManoeuvre::InternalSwap(ConditionalPermittedDrivingManoeuvre* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&applies_during_)->InternalSwap(CastToBase(&other->applies_during_));
  swap(applies_to_, other->applies_to_);
  swap(permission_type_, other->permission_type_);
}

::google::protobuf::Metadata ConditionalPermittedDrivingManoeuvre::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConditionalAccessRestriction::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalAccessRestriction_default_instance_._instance.get_mutable()->applies_to_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::RoadUsers*>(
      ::com::here::pb::hdmap::shared::v1::core::RoadUsers::internal_default_instance());
}
class ConditionalAccessRestriction::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::RoadUsers& applies_to(const ConditionalAccessRestriction* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::RoadUsers&
ConditionalAccessRestriction::HasBitSetters::applies_to(const ConditionalAccessRestriction* msg) {
  return *msg->applies_to_;
}
void ConditionalAccessRestriction::clear_applies_to() {
  if (GetArenaNoVirtual() == nullptr && applies_to_ != nullptr) {
    delete applies_to_;
  }
  applies_to_ = nullptr;
}
void ConditionalAccessRestriction::clear_applies_during() {
  applies_during_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalAccessRestriction::kAppliesToFieldNumber;
const int ConditionalAccessRestriction::kAppliesDuringFieldNumber;
const int ConditionalAccessRestriction::kDependentAccessTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalAccessRestriction::ConditionalAccessRestriction()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
}
ConditionalAccessRestriction::ConditionalAccessRestriction(const ConditionalAccessRestriction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      applies_during_(from.applies_during_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_applies_to()) {
    applies_to_ = new ::com::here::pb::hdmap::shared::v1::core::RoadUsers(*from.applies_to_);
  } else {
    applies_to_ = nullptr;
  }
  dependent_access_type_ = from.dependent_access_type_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
}

void ConditionalAccessRestriction::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConditionalAccessRestriction_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::memset(&applies_to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dependent_access_type_) -
      reinterpret_cast<char*>(&applies_to_)) + sizeof(dependent_access_type_));
}

ConditionalAccessRestriction::~ConditionalAccessRestriction() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
  SharedDtor();
}

void ConditionalAccessRestriction::SharedDtor() {
  if (this != internal_default_instance()) delete applies_to_;
}

void ConditionalAccessRestriction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalAccessRestriction& ConditionalAccessRestriction::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionalAccessRestriction_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ConditionalAccessRestriction::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applies_during_.Clear();
  if (GetArenaNoVirtual() == nullptr && applies_to_ != nullptr) {
    delete applies_to_;
  }
  applies_to_ = nullptr;
  dependent_access_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalAccessRestriction::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionalAccessRestriction*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::RoadUsers::_InternalParse;
        object = msg->mutable_applies_to();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier::_InternalParse;
          object = msg->add_applies_during();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction.DependentAccessType dependent_access_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_dependent_access_type(static_cast<::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction_DependentAccessType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalAccessRestriction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_applies_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_applies_during()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction.DependentAccessType dependent_access_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dependent_access_type(static_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction_DependentAccessType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalAccessRestriction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::applies_to(this), output);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applies_during_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->applies_during(static_cast<int>(i)),
      output);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction.DependentAccessType dependent_access_type = 3;
  if (this->dependent_access_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dependent_access_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
}

::google::protobuf::uint8* ConditionalAccessRestriction::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::applies_to(this), target);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applies_during_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->applies_during(static_cast<int>(i)), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction.DependentAccessType dependent_access_type = 3;
  if (this->dependent_access_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dependent_access_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
  return target;
}

size_t ConditionalAccessRestriction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->applies_during_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->applies_during(static_cast<int>(i)));
    }
  }

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *applies_to_);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction.DependentAccessType dependent_access_type = 3;
  if (this->dependent_access_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dependent_access_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalAccessRestriction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalAccessRestriction* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionalAccessRestriction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
    MergeFrom(*source);
  }
}

void ConditionalAccessRestriction::MergeFrom(const ConditionalAccessRestriction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  applies_during_.MergeFrom(from.applies_during_);
  if (from.has_applies_to()) {
    mutable_applies_to()->::com::here::pb::hdmap::shared::v1::core::RoadUsers::MergeFrom(from.applies_to());
  }
  if (from.dependent_access_type() != 0) {
    set_dependent_access_type(from.dependent_access_type());
  }
}

void ConditionalAccessRestriction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalAccessRestriction::CopyFrom(const ConditionalAccessRestriction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalAccessRestriction::IsInitialized() const {
  return true;
}

void ConditionalAccessRestriction::Swap(ConditionalAccessRestriction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalAccessRestriction::InternalSwap(ConditionalAccessRestriction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&applies_during_)->InternalSwap(CastToBase(&other->applies_during_));
  swap(applies_to_, other->applies_to_);
  swap(dependent_access_type_, other->dependent_access_type_);
}

::google::protobuf::Metadata ConditionalAccessRestriction::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConditionalAccessPermission::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalAccessPermission_default_instance_._instance.get_mutable()->applies_to_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::RoadUsers*>(
      ::com::here::pb::hdmap::shared::v1::core::RoadUsers::internal_default_instance());
}
class ConditionalAccessPermission::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::RoadUsers& applies_to(const ConditionalAccessPermission* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::RoadUsers&
ConditionalAccessPermission::HasBitSetters::applies_to(const ConditionalAccessPermission* msg) {
  return *msg->applies_to_;
}
void ConditionalAccessPermission::clear_applies_to() {
  if (GetArenaNoVirtual() == nullptr && applies_to_ != nullptr) {
    delete applies_to_;
  }
  applies_to_ = nullptr;
}
void ConditionalAccessPermission::clear_applies_during() {
  applies_during_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalAccessPermission::kAppliesToFieldNumber;
const int ConditionalAccessPermission::kAppliesDuringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalAccessPermission::ConditionalAccessPermission()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
}
ConditionalAccessPermission::ConditionalAccessPermission(const ConditionalAccessPermission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      applies_during_(from.applies_during_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_applies_to()) {
    applies_to_ = new ::com::here::pb::hdmap::shared::v1::core::RoadUsers(*from.applies_to_);
  } else {
    applies_to_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
}

void ConditionalAccessPermission::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConditionalAccessPermission_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  applies_to_ = nullptr;
}

ConditionalAccessPermission::~ConditionalAccessPermission() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
  SharedDtor();
}

void ConditionalAccessPermission::SharedDtor() {
  if (this != internal_default_instance()) delete applies_to_;
}

void ConditionalAccessPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalAccessPermission& ConditionalAccessPermission::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionalAccessPermission_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ConditionalAccessPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applies_during_.Clear();
  if (GetArenaNoVirtual() == nullptr && applies_to_ != nullptr) {
    delete applies_to_;
  }
  applies_to_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalAccessPermission::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionalAccessPermission*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::RoadUsers::_InternalParse;
        object = msg->mutable_applies_to();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier::_InternalParse;
          object = msg->add_applies_during();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalAccessPermission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_applies_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_applies_during()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalAccessPermission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::applies_to(this), output);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applies_during_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->applies_during(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
}

::google::protobuf::uint8* ConditionalAccessPermission::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::applies_to(this), target);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->applies_during_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->applies_during(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
  return target;
}

size_t ConditionalAccessPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier applies_during = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->applies_during_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->applies_during(static_cast<int>(i)));
    }
  }

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *applies_to_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalAccessPermission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalAccessPermission* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionalAccessPermission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
    MergeFrom(*source);
  }
}

void ConditionalAccessPermission::MergeFrom(const ConditionalAccessPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  applies_during_.MergeFrom(from.applies_during_);
  if (from.has_applies_to()) {
    mutable_applies_to()->::com::here::pb::hdmap::shared::v1::core::RoadUsers::MergeFrom(from.applies_to());
  }
}

void ConditionalAccessPermission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalAccessPermission::CopyFrom(const ConditionalAccessPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalAccessPermission::IsInitialized() const {
  return true;
}

void ConditionalAccessPermission::Swap(ConditionalAccessPermission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalAccessPermission::InternalSwap(ConditionalAccessPermission* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&applies_during_)->InternalSwap(CastToBase(&other->applies_during_));
  swap(applies_to_, other->applies_to_);
}

::google::protobuf::Metadata ConditionalAccessPermission::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConditionalSpeedLimit_Advisory::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_Advisory_default_instance_._instance.get_mutable()->override_speed_limit_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit*>(
      ::com::here::pb::hdmap::shared::v1::core::SpeedLimit::internal_default_instance());
}
class ConditionalSpeedLimit_Advisory::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::SpeedLimit& override_speed_limit(const ConditionalSpeedLimit_Advisory* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::SpeedLimit&
ConditionalSpeedLimit_Advisory::HasBitSetters::override_speed_limit(const ConditionalSpeedLimit_Advisory* msg) {
  return *msg->override_speed_limit_;
}
void ConditionalSpeedLimit_Advisory::clear_override_speed_limit() {
  if (GetArenaNoVirtual() == nullptr && override_speed_limit_ != nullptr) {
    delete override_speed_limit_;
  }
  override_speed_limit_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalSpeedLimit_Advisory::kOverrideSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalSpeedLimit_Advisory::ConditionalSpeedLimit_Advisory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
}
ConditionalSpeedLimit_Advisory::ConditionalSpeedLimit_Advisory(const ConditionalSpeedLimit_Advisory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_override_speed_limit()) {
    override_speed_limit_ = new ::com::here::pb::hdmap::shared::v1::core::SpeedLimit(*from.override_speed_limit_);
  } else {
    override_speed_limit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
}

void ConditionalSpeedLimit_Advisory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConditionalSpeedLimit_Advisory_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  override_speed_limit_ = nullptr;
}

ConditionalSpeedLimit_Advisory::~ConditionalSpeedLimit_Advisory() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
  SharedDtor();
}

void ConditionalSpeedLimit_Advisory::SharedDtor() {
  if (this != internal_default_instance()) delete override_speed_limit_;
}

void ConditionalSpeedLimit_Advisory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalSpeedLimit_Advisory& ConditionalSpeedLimit_Advisory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionalSpeedLimit_Advisory_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ConditionalSpeedLimit_Advisory::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && override_speed_limit_ != nullptr) {
    delete override_speed_limit_;
  }
  override_speed_limit_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalSpeedLimit_Advisory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionalSpeedLimit_Advisory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::SpeedLimit::_InternalParse;
        object = msg->mutable_override_speed_limit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalSpeedLimit_Advisory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_override_speed_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalSpeedLimit_Advisory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
  if (this->has_override_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::override_speed_limit(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
}

::google::protobuf::uint8* ConditionalSpeedLimit_Advisory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
  if (this->has_override_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::override_speed_limit(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
  return target;
}

size_t ConditionalSpeedLimit_Advisory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
  if (this->has_override_speed_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *override_speed_limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalSpeedLimit_Advisory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalSpeedLimit_Advisory* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionalSpeedLimit_Advisory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
    MergeFrom(*source);
  }
}

void ConditionalSpeedLimit_Advisory::MergeFrom(const ConditionalSpeedLimit_Advisory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_override_speed_limit()) {
    mutable_override_speed_limit()->::com::here::pb::hdmap::shared::v1::core::SpeedLimit::MergeFrom(from.override_speed_limit());
  }
}

void ConditionalSpeedLimit_Advisory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalSpeedLimit_Advisory::CopyFrom(const ConditionalSpeedLimit_Advisory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalSpeedLimit_Advisory::IsInitialized() const {
  return true;
}

void ConditionalSpeedLimit_Advisory::Swap(ConditionalSpeedLimit_Advisory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalSpeedLimit_Advisory::InternalSwap(ConditionalSpeedLimit_Advisory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(override_speed_limit_, other->override_speed_limit_);
}

::google::protobuf::Metadata ConditionalSpeedLimit_Advisory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConditionalSpeedLimit_TrafficCalmingMeasures::InitAsDefaultInstance() {
}
class ConditionalSpeedLimit_TrafficCalmingMeasures::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalSpeedLimit_TrafficCalmingMeasures::ConditionalSpeedLimit_TrafficCalmingMeasures()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
}
ConditionalSpeedLimit_TrafficCalmingMeasures::ConditionalSpeedLimit_TrafficCalmingMeasures(const ConditionalSpeedLimit_TrafficCalmingMeasures& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
}

void ConditionalSpeedLimit_TrafficCalmingMeasures::SharedCtor() {
}

ConditionalSpeedLimit_TrafficCalmingMeasures::~ConditionalSpeedLimit_TrafficCalmingMeasures() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
  SharedDtor();
}

void ConditionalSpeedLimit_TrafficCalmingMeasures::SharedDtor() {
}

void ConditionalSpeedLimit_TrafficCalmingMeasures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalSpeedLimit_TrafficCalmingMeasures& ConditionalSpeedLimit_TrafficCalmingMeasures::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionalSpeedLimit_TrafficCalmingMeasures_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ConditionalSpeedLimit_TrafficCalmingMeasures::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalSpeedLimit_TrafficCalmingMeasures::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionalSpeedLimit_TrafficCalmingMeasures*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalSpeedLimit_TrafficCalmingMeasures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalSpeedLimit_TrafficCalmingMeasures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
}

::google::protobuf::uint8* ConditionalSpeedLimit_TrafficCalmingMeasures::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
  return target;
}

size_t ConditionalSpeedLimit_TrafficCalmingMeasures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalSpeedLimit_TrafficCalmingMeasures::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalSpeedLimit_TrafficCalmingMeasures* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionalSpeedLimit_TrafficCalmingMeasures>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
    MergeFrom(*source);
  }
}

void ConditionalSpeedLimit_TrafficCalmingMeasures::MergeFrom(const ConditionalSpeedLimit_TrafficCalmingMeasures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ConditionalSpeedLimit_TrafficCalmingMeasures::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalSpeedLimit_TrafficCalmingMeasures::CopyFrom(const ConditionalSpeedLimit_TrafficCalmingMeasures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalSpeedLimit_TrafficCalmingMeasures::IsInitialized() const {
  return true;
}

void ConditionalSpeedLimit_TrafficCalmingMeasures::Swap(ConditionalSpeedLimit_TrafficCalmingMeasures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalSpeedLimit_TrafficCalmingMeasures::InternalSwap(ConditionalSpeedLimit_TrafficCalmingMeasures* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConditionalSpeedLimit_TrafficCalmingMeasures::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConditionalSpeedLimit_LocationProximity::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_LocationProximity_default_instance_._instance.get_mutable()->overridespeedlimit_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit*>(
      ::com::here::pb::hdmap::shared::v1::core::SpeedLimit::internal_default_instance());
}
class ConditionalSpeedLimit_LocationProximity::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::SpeedLimit& overridespeedlimit(const ConditionalSpeedLimit_LocationProximity* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::SpeedLimit&
ConditionalSpeedLimit_LocationProximity::HasBitSetters::overridespeedlimit(const ConditionalSpeedLimit_LocationProximity* msg) {
  return *msg->overridespeedlimit_;
}
void ConditionalSpeedLimit_LocationProximity::clear_overridespeedlimit() {
  if (GetArenaNoVirtual() == nullptr && overridespeedlimit_ != nullptr) {
    delete overridespeedlimit_;
  }
  overridespeedlimit_ = nullptr;
}
void ConditionalSpeedLimit_LocationProximity::clear_during_date_time() {
  during_date_time_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalSpeedLimit_LocationProximity::kOverrideSpeedLimitFieldNumber;
const int ConditionalSpeedLimit_LocationProximity::kDuringDateTimeFieldNumber;
const int ConditionalSpeedLimit_LocationProximity::kLocationProximityTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalSpeedLimit_LocationProximity::ConditionalSpeedLimit_LocationProximity()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
}
ConditionalSpeedLimit_LocationProximity::ConditionalSpeedLimit_LocationProximity(const ConditionalSpeedLimit_LocationProximity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      during_date_time_(from.during_date_time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_overridespeedlimit()) {
    overridespeedlimit_ = new ::com::here::pb::hdmap::shared::v1::core::SpeedLimit(*from.overridespeedlimit_);
  } else {
    overridespeedlimit_ = nullptr;
  }
  location_proximity_type_ = from.location_proximity_type_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
}

void ConditionalSpeedLimit_LocationProximity::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConditionalSpeedLimit_LocationProximity_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::memset(&overridespeedlimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_proximity_type_) -
      reinterpret_cast<char*>(&overridespeedlimit_)) + sizeof(location_proximity_type_));
}

ConditionalSpeedLimit_LocationProximity::~ConditionalSpeedLimit_LocationProximity() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
  SharedDtor();
}

void ConditionalSpeedLimit_LocationProximity::SharedDtor() {
  if (this != internal_default_instance()) delete overridespeedlimit_;
}

void ConditionalSpeedLimit_LocationProximity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalSpeedLimit_LocationProximity& ConditionalSpeedLimit_LocationProximity::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionalSpeedLimit_LocationProximity_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ConditionalSpeedLimit_LocationProximity::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  during_date_time_.Clear();
  if (GetArenaNoVirtual() == nullptr && overridespeedlimit_ != nullptr) {
    delete overridespeedlimit_;
  }
  overridespeedlimit_ = nullptr;
  location_proximity_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalSpeedLimit_LocationProximity::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionalSpeedLimit_LocationProximity*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.SpeedLimit overrideSpeedLimit = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::SpeedLimit::_InternalParse;
        object = msg->mutable_overridespeedlimit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier during_date_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier::_InternalParse;
          object = msg->add_during_date_time();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity.LocationProximityType location_proximity_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_location_proximity_type(static_cast<::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity_LocationProximityType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalSpeedLimit_LocationProximity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.SpeedLimit overrideSpeedLimit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_overridespeedlimit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier during_date_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_during_date_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity.LocationProximityType location_proximity_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_location_proximity_type(static_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity_LocationProximityType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalSpeedLimit_LocationProximity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit overrideSpeedLimit = 1;
  if (this->has_overridespeedlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::overridespeedlimit(this), output);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier during_date_time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->during_date_time_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->during_date_time(static_cast<int>(i)),
      output);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity.LocationProximityType location_proximity_type = 3;
  if (this->location_proximity_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->location_proximity_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
}

::google::protobuf::uint8* ConditionalSpeedLimit_LocationProximity::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit overrideSpeedLimit = 1;
  if (this->has_overridespeedlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::overridespeedlimit(this), target);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier during_date_time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->during_date_time_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->during_date_time(static_cast<int>(i)), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity.LocationProximityType location_proximity_type = 3;
  if (this->location_proximity_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->location_proximity_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
  return target;
}

size_t ConditionalSpeedLimit_LocationProximity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier during_date_time = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->during_date_time_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->during_date_time(static_cast<int>(i)));
    }
  }

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit overrideSpeedLimit = 1;
  if (this->has_overridespeedlimit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *overridespeedlimit_);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity.LocationProximityType location_proximity_type = 3;
  if (this->location_proximity_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->location_proximity_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalSpeedLimit_LocationProximity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalSpeedLimit_LocationProximity* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionalSpeedLimit_LocationProximity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
    MergeFrom(*source);
  }
}

void ConditionalSpeedLimit_LocationProximity::MergeFrom(const ConditionalSpeedLimit_LocationProximity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  during_date_time_.MergeFrom(from.during_date_time_);
  if (from.has_overridespeedlimit()) {
    mutable_overridespeedlimit()->::com::here::pb::hdmap::shared::v1::core::SpeedLimit::MergeFrom(from.overridespeedlimit());
  }
  if (from.location_proximity_type() != 0) {
    set_location_proximity_type(from.location_proximity_type());
  }
}

void ConditionalSpeedLimit_LocationProximity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalSpeedLimit_LocationProximity::CopyFrom(const ConditionalSpeedLimit_LocationProximity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalSpeedLimit_LocationProximity::IsInitialized() const {
  return true;
}

void ConditionalSpeedLimit_LocationProximity::Swap(ConditionalSpeedLimit_LocationProximity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalSpeedLimit_LocationProximity::InternalSwap(ConditionalSpeedLimit_LocationProximity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&during_date_time_)->InternalSwap(CastToBase(&other->during_date_time_));
  swap(overridespeedlimit_, other->overridespeedlimit_);
  swap(location_proximity_type_, other->location_proximity_type_);
}

::google::protobuf::Metadata ConditionalSpeedLimit_LocationProximity::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConditionalSpeedLimit_Environmental::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_Environmental_default_instance_._instance.get_mutable()->override_speed_limit_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit*>(
      ::com::here::pb::hdmap::shared::v1::core::SpeedLimit::internal_default_instance());
}
class ConditionalSpeedLimit_Environmental::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::SpeedLimit& override_speed_limit(const ConditionalSpeedLimit_Environmental* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::SpeedLimit&
ConditionalSpeedLimit_Environmental::HasBitSetters::override_speed_limit(const ConditionalSpeedLimit_Environmental* msg) {
  return *msg->override_speed_limit_;
}
void ConditionalSpeedLimit_Environmental::clear_override_speed_limit() {
  if (GetArenaNoVirtual() == nullptr && override_speed_limit_ != nullptr) {
    delete override_speed_limit_;
  }
  override_speed_limit_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalSpeedLimit_Environmental::kOverrideSpeedLimitFieldNumber;
const int ConditionalSpeedLimit_Environmental::kEnvironmentalTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalSpeedLimit_Environmental::ConditionalSpeedLimit_Environmental()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
}
ConditionalSpeedLimit_Environmental::ConditionalSpeedLimit_Environmental(const ConditionalSpeedLimit_Environmental& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_override_speed_limit()) {
    override_speed_limit_ = new ::com::here::pb::hdmap::shared::v1::core::SpeedLimit(*from.override_speed_limit_);
  } else {
    override_speed_limit_ = nullptr;
  }
  environmental_type_ = from.environmental_type_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
}

void ConditionalSpeedLimit_Environmental::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConditionalSpeedLimit_Environmental_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  ::memset(&override_speed_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&environmental_type_) -
      reinterpret_cast<char*>(&override_speed_limit_)) + sizeof(environmental_type_));
}

ConditionalSpeedLimit_Environmental::~ConditionalSpeedLimit_Environmental() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
  SharedDtor();
}

void ConditionalSpeedLimit_Environmental::SharedDtor() {
  if (this != internal_default_instance()) delete override_speed_limit_;
}

void ConditionalSpeedLimit_Environmental::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalSpeedLimit_Environmental& ConditionalSpeedLimit_Environmental::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionalSpeedLimit_Environmental_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ConditionalSpeedLimit_Environmental::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && override_speed_limit_ != nullptr) {
    delete override_speed_limit_;
  }
  override_speed_limit_ = nullptr;
  environmental_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalSpeedLimit_Environmental::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionalSpeedLimit_Environmental*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::SpeedLimit::_InternalParse;
        object = msg->mutable_override_speed_limit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental.EnvironmentalType environmental_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_environmental_type(static_cast<::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental_EnvironmentalType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalSpeedLimit_Environmental::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_override_speed_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental.EnvironmentalType environmental_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_environmental_type(static_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental_EnvironmentalType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalSpeedLimit_Environmental::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
  if (this->has_override_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::override_speed_limit(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental.EnvironmentalType environmental_type = 2;
  if (this->environmental_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->environmental_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
}

::google::protobuf::uint8* ConditionalSpeedLimit_Environmental::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
  if (this->has_override_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::override_speed_limit(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental.EnvironmentalType environmental_type = 2;
  if (this->environmental_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->environmental_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
  return target;
}

size_t ConditionalSpeedLimit_Environmental::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
  if (this->has_override_speed_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *override_speed_limit_);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental.EnvironmentalType environmental_type = 2;
  if (this->environmental_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->environmental_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalSpeedLimit_Environmental::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalSpeedLimit_Environmental* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionalSpeedLimit_Environmental>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
    MergeFrom(*source);
  }
}

void ConditionalSpeedLimit_Environmental::MergeFrom(const ConditionalSpeedLimit_Environmental& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_override_speed_limit()) {
    mutable_override_speed_limit()->::com::here::pb::hdmap::shared::v1::core::SpeedLimit::MergeFrom(from.override_speed_limit());
  }
  if (from.environmental_type() != 0) {
    set_environmental_type(from.environmental_type());
  }
}

void ConditionalSpeedLimit_Environmental::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalSpeedLimit_Environmental::CopyFrom(const ConditionalSpeedLimit_Environmental& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalSpeedLimit_Environmental::IsInitialized() const {
  return true;
}

void ConditionalSpeedLimit_Environmental::Swap(ConditionalSpeedLimit_Environmental* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalSpeedLimit_Environmental::InternalSwap(ConditionalSpeedLimit_Environmental* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(override_speed_limit_, other->override_speed_limit_);
  swap(environmental_type_, other->environmental_type_);
}

::google::protobuf::Metadata ConditionalSpeedLimit_Environmental::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConditionalSpeedLimit_TimeDependent::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_TimeDependent_default_instance_._instance.get_mutable()->override_speed_limit_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit*>(
      ::com::here::pb::hdmap::shared::v1::core::SpeedLimit::internal_default_instance());
}
class ConditionalSpeedLimit_TimeDependent::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::SpeedLimit& override_speed_limit(const ConditionalSpeedLimit_TimeDependent* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::SpeedLimit&
ConditionalSpeedLimit_TimeDependent::HasBitSetters::override_speed_limit(const ConditionalSpeedLimit_TimeDependent* msg) {
  return *msg->override_speed_limit_;
}
void ConditionalSpeedLimit_TimeDependent::clear_override_speed_limit() {
  if (GetArenaNoVirtual() == nullptr && override_speed_limit_ != nullptr) {
    delete override_speed_limit_;
  }
  override_speed_limit_ = nullptr;
}
void ConditionalSpeedLimit_TimeDependent::clear_during_date_time() {
  during_date_time_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalSpeedLimit_TimeDependent::kOverrideSpeedLimitFieldNumber;
const int ConditionalSpeedLimit_TimeDependent::kDuringDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalSpeedLimit_TimeDependent::ConditionalSpeedLimit_TimeDependent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
}
ConditionalSpeedLimit_TimeDependent::ConditionalSpeedLimit_TimeDependent(const ConditionalSpeedLimit_TimeDependent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      during_date_time_(from.during_date_time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_override_speed_limit()) {
    override_speed_limit_ = new ::com::here::pb::hdmap::shared::v1::core::SpeedLimit(*from.override_speed_limit_);
  } else {
    override_speed_limit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
}

void ConditionalSpeedLimit_TimeDependent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConditionalSpeedLimit_TimeDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  override_speed_limit_ = nullptr;
}

ConditionalSpeedLimit_TimeDependent::~ConditionalSpeedLimit_TimeDependent() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
  SharedDtor();
}

void ConditionalSpeedLimit_TimeDependent::SharedDtor() {
  if (this != internal_default_instance()) delete override_speed_limit_;
}

void ConditionalSpeedLimit_TimeDependent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalSpeedLimit_TimeDependent& ConditionalSpeedLimit_TimeDependent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionalSpeedLimit_TimeDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ConditionalSpeedLimit_TimeDependent::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  during_date_time_.Clear();
  if (GetArenaNoVirtual() == nullptr && override_speed_limit_ != nullptr) {
    delete override_speed_limit_;
  }
  override_speed_limit_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalSpeedLimit_TimeDependent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionalSpeedLimit_TimeDependent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::SpeedLimit::_InternalParse;
        object = msg->mutable_override_speed_limit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier during_date_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier::_InternalParse;
          object = msg->add_during_date_time();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalSpeedLimit_TimeDependent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_override_speed_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier during_date_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_during_date_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalSpeedLimit_TimeDependent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
  if (this->has_override_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::override_speed_limit(this), output);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier during_date_time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->during_date_time_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->during_date_time(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
}

::google::protobuf::uint8* ConditionalSpeedLimit_TimeDependent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
  if (this->has_override_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::override_speed_limit(this), target);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier during_date_time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->during_date_time_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->during_date_time(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
  return target;
}

size_t ConditionalSpeedLimit_TimeDependent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier during_date_time = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->during_date_time_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->during_date_time(static_cast<int>(i)));
    }
  }

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit override_speed_limit = 1;
  if (this->has_override_speed_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *override_speed_limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalSpeedLimit_TimeDependent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalSpeedLimit_TimeDependent* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionalSpeedLimit_TimeDependent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
    MergeFrom(*source);
  }
}

void ConditionalSpeedLimit_TimeDependent::MergeFrom(const ConditionalSpeedLimit_TimeDependent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  during_date_time_.MergeFrom(from.during_date_time_);
  if (from.has_override_speed_limit()) {
    mutable_override_speed_limit()->::com::here::pb::hdmap::shared::v1::core::SpeedLimit::MergeFrom(from.override_speed_limit());
  }
}

void ConditionalSpeedLimit_TimeDependent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalSpeedLimit_TimeDependent::CopyFrom(const ConditionalSpeedLimit_TimeDependent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalSpeedLimit_TimeDependent::IsInitialized() const {
  return true;
}

void ConditionalSpeedLimit_TimeDependent::Swap(ConditionalSpeedLimit_TimeDependent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalSpeedLimit_TimeDependent::InternalSwap(ConditionalSpeedLimit_TimeDependent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&during_date_time_)->InternalSwap(CastToBase(&other->during_date_time_));
  swap(override_speed_limit_, other->override_speed_limit_);
}

::google::protobuf::Metadata ConditionalSpeedLimit_TimeDependent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConditionalSpeedLimit_LaneDependent::InitAsDefaultInstance() {
}
class ConditionalSpeedLimit_LaneDependent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalSpeedLimit_LaneDependent::ConditionalSpeedLimit_LaneDependent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
}
ConditionalSpeedLimit_LaneDependent::ConditionalSpeedLimit_LaneDependent(const ConditionalSpeedLimit_LaneDependent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
}

void ConditionalSpeedLimit_LaneDependent::SharedCtor() {
}

ConditionalSpeedLimit_LaneDependent::~ConditionalSpeedLimit_LaneDependent() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
  SharedDtor();
}

void ConditionalSpeedLimit_LaneDependent::SharedDtor() {
}

void ConditionalSpeedLimit_LaneDependent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalSpeedLimit_LaneDependent& ConditionalSpeedLimit_LaneDependent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionalSpeedLimit_LaneDependent_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ConditionalSpeedLimit_LaneDependent::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalSpeedLimit_LaneDependent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionalSpeedLimit_LaneDependent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalSpeedLimit_LaneDependent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalSpeedLimit_LaneDependent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
}

::google::protobuf::uint8* ConditionalSpeedLimit_LaneDependent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
  return target;
}

size_t ConditionalSpeedLimit_LaneDependent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalSpeedLimit_LaneDependent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalSpeedLimit_LaneDependent* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionalSpeedLimit_LaneDependent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
    MergeFrom(*source);
  }
}

void ConditionalSpeedLimit_LaneDependent::MergeFrom(const ConditionalSpeedLimit_LaneDependent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ConditionalSpeedLimit_LaneDependent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalSpeedLimit_LaneDependent::CopyFrom(const ConditionalSpeedLimit_LaneDependent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalSpeedLimit_LaneDependent::IsInitialized() const {
  return true;
}

void ConditionalSpeedLimit_LaneDependent::Swap(ConditionalSpeedLimit_LaneDependent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalSpeedLimit_LaneDependent::InternalSwap(ConditionalSpeedLimit_LaneDependent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConditionalSpeedLimit_LaneDependent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConditionalSpeedLimit::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_default_instance_.advisory_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory*>(
      ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_default_instance_.traffic_calming_measures_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures*>(
      ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_default_instance_.location_proximity_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity*>(
      ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_default_instance_.environmental_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental*>(
      ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_default_instance_.time_dependent_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent*>(
      ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent::internal_default_instance());
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_default_instance_.lane_dependent_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent*>(
      ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent::internal_default_instance());
}
class ConditionalSpeedLimit::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory& advisory(const ConditionalSpeedLimit* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures& traffic_calming_measures(const ConditionalSpeedLimit* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity& location_proximity(const ConditionalSpeedLimit* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental& environmental(const ConditionalSpeedLimit* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent& time_dependent(const ConditionalSpeedLimit* msg);
  static const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent& lane_dependent(const ConditionalSpeedLimit* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory&
ConditionalSpeedLimit::HasBitSetters::advisory(const ConditionalSpeedLimit* msg) {
  return *msg->situation_.advisory_;
}
const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures&
ConditionalSpeedLimit::HasBitSetters::traffic_calming_measures(const ConditionalSpeedLimit* msg) {
  return *msg->situation_.traffic_calming_measures_;
}
const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity&
ConditionalSpeedLimit::HasBitSetters::location_proximity(const ConditionalSpeedLimit* msg) {
  return *msg->situation_.location_proximity_;
}
const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental&
ConditionalSpeedLimit::HasBitSetters::environmental(const ConditionalSpeedLimit* msg) {
  return *msg->situation_.environmental_;
}
const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent&
ConditionalSpeedLimit::HasBitSetters::time_dependent(const ConditionalSpeedLimit* msg) {
  return *msg->situation_.time_dependent_;
}
const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent&
ConditionalSpeedLimit::HasBitSetters::lane_dependent(const ConditionalSpeedLimit* msg) {
  return *msg->situation_.lane_dependent_;
}
void ConditionalSpeedLimit::set_allocated_advisory(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory* advisory) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_situation();
  if (advisory) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      advisory = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, advisory, submessage_arena);
    }
    set_has_advisory();
    situation_.advisory_ = advisory;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.advisory)
}
void ConditionalSpeedLimit::set_allocated_traffic_calming_measures(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures* traffic_calming_measures) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_situation();
  if (traffic_calming_measures) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      traffic_calming_measures = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, traffic_calming_measures, submessage_arena);
    }
    set_has_traffic_calming_measures();
    situation_.traffic_calming_measures_ = traffic_calming_measures;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.traffic_calming_measures)
}
void ConditionalSpeedLimit::set_allocated_location_proximity(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity* location_proximity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_situation();
  if (location_proximity) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location_proximity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location_proximity, submessage_arena);
    }
    set_has_location_proximity();
    situation_.location_proximity_ = location_proximity;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.location_proximity)
}
void ConditionalSpeedLimit::set_allocated_environmental(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental* environmental) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_situation();
  if (environmental) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      environmental = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, environmental, submessage_arena);
    }
    set_has_environmental();
    situation_.environmental_ = environmental;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.environmental)
}
void ConditionalSpeedLimit::set_allocated_time_dependent(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent* time_dependent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_situation();
  if (time_dependent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_dependent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_dependent, submessage_arena);
    }
    set_has_time_dependent();
    situation_.time_dependent_ = time_dependent;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.time_dependent)
}
void ConditionalSpeedLimit::set_allocated_lane_dependent(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent* lane_dependent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_situation();
  if (lane_dependent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_dependent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lane_dependent, submessage_arena);
    }
    set_has_lane_dependent();
    situation_.lane_dependent_ = lane_dependent;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.lane_dependent)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalSpeedLimit::kAdvisoryFieldNumber;
const int ConditionalSpeedLimit::kTrafficCalmingMeasuresFieldNumber;
const int ConditionalSpeedLimit::kLocationProximityFieldNumber;
const int ConditionalSpeedLimit::kEnvironmentalFieldNumber;
const int ConditionalSpeedLimit::kTimeDependentFieldNumber;
const int ConditionalSpeedLimit::kLaneDependentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalSpeedLimit::ConditionalSpeedLimit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
}
ConditionalSpeedLimit::ConditionalSpeedLimit(const ConditionalSpeedLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_situation();
  switch (from.situation_case()) {
    case kAdvisory: {
      mutable_advisory()->::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory::MergeFrom(from.advisory());
      break;
    }
    case kTrafficCalmingMeasures: {
      mutable_traffic_calming_measures()->::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures::MergeFrom(from.traffic_calming_measures());
      break;
    }
    case kLocationProximity: {
      mutable_location_proximity()->::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity::MergeFrom(from.location_proximity());
      break;
    }
    case kEnvironmental: {
      mutable_environmental()->::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental::MergeFrom(from.environmental());
      break;
    }
    case kTimeDependent: {
      mutable_time_dependent()->::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent::MergeFrom(from.time_dependent());
      break;
    }
    case kLaneDependent: {
      mutable_lane_dependent()->::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent::MergeFrom(from.lane_dependent());
      break;
    }
    case SITUATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
}

void ConditionalSpeedLimit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConditionalSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  clear_has_situation();
}

ConditionalSpeedLimit::~ConditionalSpeedLimit() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
  SharedDtor();
}

void ConditionalSpeedLimit::SharedDtor() {
  if (has_situation()) {
    clear_situation();
  }
}

void ConditionalSpeedLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalSpeedLimit& ConditionalSpeedLimit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionalSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ConditionalSpeedLimit::clear_situation() {
// @@protoc_insertion_point(one_of_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
  switch (situation_case()) {
    case kAdvisory: {
      delete situation_.advisory_;
      break;
    }
    case kTrafficCalmingMeasures: {
      delete situation_.traffic_calming_measures_;
      break;
    }
    case kLocationProximity: {
      delete situation_.location_proximity_;
      break;
    }
    case kEnvironmental: {
      delete situation_.environmental_;
      break;
    }
    case kTimeDependent: {
      delete situation_.time_dependent_;
      break;
    }
    case kLaneDependent: {
      delete situation_.lane_dependent_;
      break;
    }
    case SITUATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SITUATION_NOT_SET;
}


void ConditionalSpeedLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_situation();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalSpeedLimit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionalSpeedLimit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory advisory = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory::_InternalParse;
        object = msg->mutable_advisory();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures traffic_calming_measures = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures::_InternalParse;
        object = msg->mutable_traffic_calming_measures();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity location_proximity = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity::_InternalParse;
        object = msg->mutable_location_proximity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental environmental = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental::_InternalParse;
        object = msg->mutable_environmental();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent time_dependent = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent::_InternalParse;
        object = msg->mutable_time_dependent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent lane_dependent = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent::_InternalParse;
        object = msg->mutable_lane_dependent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalSpeedLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory advisory = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_advisory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures traffic_calming_measures = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_calming_measures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity location_proximity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location_proximity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental environmental = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_environmental()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent time_dependent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_dependent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent lane_dependent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_dependent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalSpeedLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory advisory = 1;
  if (has_advisory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::advisory(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures traffic_calming_measures = 2;
  if (has_traffic_calming_measures()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::traffic_calming_measures(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity location_proximity = 3;
  if (has_location_proximity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::location_proximity(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental environmental = 4;
  if (has_environmental()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::environmental(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent time_dependent = 5;
  if (has_time_dependent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::time_dependent(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent lane_dependent = 6;
  if (has_lane_dependent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::lane_dependent(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
}

::google::protobuf::uint8* ConditionalSpeedLimit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory advisory = 1;
  if (has_advisory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::advisory(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures traffic_calming_measures = 2;
  if (has_traffic_calming_measures()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::traffic_calming_measures(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity location_proximity = 3;
  if (has_location_proximity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::location_proximity(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental environmental = 4;
  if (has_environmental()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::environmental(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent time_dependent = 5;
  if (has_time_dependent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::time_dependent(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent lane_dependent = 6;
  if (has_lane_dependent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::lane_dependent(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
  return target;
}

size_t ConditionalSpeedLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (situation_case()) {
    // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Advisory advisory = 1;
    case kAdvisory: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *situation_.advisory_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TrafficCalmingMeasures traffic_calming_measures = 2;
    case kTrafficCalmingMeasures: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *situation_.traffic_calming_measures_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LocationProximity location_proximity = 3;
    case kLocationProximity: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *situation_.location_proximity_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.Environmental environmental = 4;
    case kEnvironmental: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *situation_.environmental_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.TimeDependent time_dependent = 5;
    case kTimeDependent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *situation_.time_dependent_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit.LaneDependent lane_dependent = 6;
    case kLaneDependent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *situation_.lane_dependent_);
      break;
    }
    case SITUATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalSpeedLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalSpeedLimit* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionalSpeedLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
    MergeFrom(*source);
  }
}

void ConditionalSpeedLimit::MergeFrom(const ConditionalSpeedLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.situation_case()) {
    case kAdvisory: {
      mutable_advisory()->::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory::MergeFrom(from.advisory());
      break;
    }
    case kTrafficCalmingMeasures: {
      mutable_traffic_calming_measures()->::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures::MergeFrom(from.traffic_calming_measures());
      break;
    }
    case kLocationProximity: {
      mutable_location_proximity()->::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity::MergeFrom(from.location_proximity());
      break;
    }
    case kEnvironmental: {
      mutable_environmental()->::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental::MergeFrom(from.environmental());
      break;
    }
    case kTimeDependent: {
      mutable_time_dependent()->::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent::MergeFrom(from.time_dependent());
      break;
    }
    case kLaneDependent: {
      mutable_lane_dependent()->::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent::MergeFrom(from.lane_dependent());
      break;
    }
    case SITUATION_NOT_SET: {
      break;
    }
  }
}

void ConditionalSpeedLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalSpeedLimit::CopyFrom(const ConditionalSpeedLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalSpeedLimit::IsInitialized() const {
  return true;
}

void ConditionalSpeedLimit::Swap(ConditionalSpeedLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalSpeedLimit::InternalSwap(ConditionalSpeedLimit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(situation_, other->situation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ConditionalSpeedLimit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConditionalTollStructure::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::shared::v1::core::_ConditionalTollStructure_default_instance_._instance.get_mutable()->applies_to_ = const_cast< ::com::here::pb::hdmap::shared::v1::core::RoadUsers*>(
      ::com::here::pb::hdmap::shared::v1::core::RoadUsers::internal_default_instance());
}
class ConditionalTollStructure::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::core::RoadUsers& applies_to(const ConditionalTollStructure* msg);
};

const ::com::here::pb::hdmap::shared::v1::core::RoadUsers&
ConditionalTollStructure::HasBitSetters::applies_to(const ConditionalTollStructure* msg) {
  return *msg->applies_to_;
}
void ConditionalTollStructure::clear_applies_to() {
  if (GetArenaNoVirtual() == nullptr && applies_to_ != nullptr) {
    delete applies_to_;
  }
  applies_to_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalTollStructure::kAppliesToFieldNumber;
const int ConditionalTollStructure::kTollStructureTypeFieldNumber;
const int ConditionalTollStructure::kTollPaymentMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalTollStructure::ConditionalTollStructure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
}
ConditionalTollStructure::ConditionalTollStructure(const ConditionalTollStructure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      toll_structure_type_(from.toll_structure_type_),
      toll_payment_method_(from.toll_payment_method_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_applies_to()) {
    applies_to_ = new ::com::here::pb::hdmap::shared::v1::core::RoadUsers(*from.applies_to_);
  } else {
    applies_to_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
}

void ConditionalTollStructure::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConditionalTollStructure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  applies_to_ = nullptr;
}

ConditionalTollStructure::~ConditionalTollStructure() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
  SharedDtor();
}

void ConditionalTollStructure::SharedDtor() {
  if (this != internal_default_instance()) delete applies_to_;
}

void ConditionalTollStructure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalTollStructure& ConditionalTollStructure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionalTollStructure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ConditionalTollStructure::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  toll_structure_type_.Clear();
  toll_payment_method_.Clear();
  if (GetArenaNoVirtual() == nullptr && applies_to_ != nullptr) {
    delete applies_to_;
  }
  applies_to_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalTollStructure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionalTollStructure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::core::RoadUsers::_InternalParse;
        object = msg->mutable_applies_to();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure.TollStructureType toll_structure_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_toll_structure_type();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_toll_structure_type(static_cast<::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure_TollStructureType>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      // repeated .com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure.TollPaymentMethod toll_payment_method = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_toll_payment_method();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_toll_payment_method(static_cast<::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure_TollPaymentMethod>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalTollStructure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_applies_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure.TollStructureType toll_structure_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_toll_structure_type(static_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure_TollStructureType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_toll_structure_type(static_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure_TollStructureType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure.TollPaymentMethod toll_payment_method = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_toll_payment_method(static_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure_TollPaymentMethod >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_toll_payment_method(static_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure_TollPaymentMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalTollStructure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::applies_to(this), output);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure.TollStructureType toll_structure_type = 2;
  if (this->toll_structure_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_toll_structure_type_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->toll_structure_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->toll_structure_type(i), output);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure.TollPaymentMethod toll_payment_method = 3;
  if (this->toll_payment_method_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_toll_payment_method_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->toll_payment_method_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->toll_payment_method(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
}

::google::protobuf::uint8* ConditionalTollStructure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::applies_to(this), target);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure.TollStructureType toll_structure_type = 2;
  if (this->toll_structure_type_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _toll_structure_type_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->toll_structure_type_, target);
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure.TollPaymentMethod toll_payment_method = 3;
  if (this->toll_payment_method_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _toll_payment_method_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->toll_payment_method_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
  return target;
}

size_t ConditionalTollStructure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure.TollStructureType toll_structure_type = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->toll_structure_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->toll_structure_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _toll_structure_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure.TollPaymentMethod toll_payment_method = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->toll_payment_method_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->toll_payment_method(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _toll_payment_method_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers applies_to = 1;
  if (this->has_applies_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *applies_to_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalTollStructure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalTollStructure* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionalTollStructure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
    MergeFrom(*source);
  }
}

void ConditionalTollStructure::MergeFrom(const ConditionalTollStructure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  toll_structure_type_.MergeFrom(from.toll_structure_type_);
  toll_payment_method_.MergeFrom(from.toll_payment_method_);
  if (from.has_applies_to()) {
    mutable_applies_to()->::com::here::pb::hdmap::shared::v1::core::RoadUsers::MergeFrom(from.applies_to());
  }
}

void ConditionalTollStructure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalTollStructure::CopyFrom(const ConditionalTollStructure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalTollStructure::IsInitialized() const {
  return true;
}

void ConditionalTollStructure::Swap(ConditionalTollStructure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalTollStructure::InternalSwap(ConditionalTollStructure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  toll_structure_type_.InternalSwap(&other->toll_structure_type_);
  toll_payment_method_.InternalSwap(&other->toll_payment_method_);
  swap(applies_to_, other->applies_to_);
}

::google::protobuf::Metadata ConditionalTollStructure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace v1
}  // namespace shared
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Advisory >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TrafficCalmingMeasures >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LocationProximity >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_Environmental >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_TimeDependent >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit_LaneDependent >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
