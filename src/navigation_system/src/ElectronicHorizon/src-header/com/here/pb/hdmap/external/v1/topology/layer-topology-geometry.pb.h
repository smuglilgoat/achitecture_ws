// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/external/v1/topology/layer-topology-geometry.proto

#ifndef PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto
#define PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "com/here/pb/hdmap/external/v1/geometry/geometry.pb.h"
#include "com/here/pb/hdmap/external/v1/common/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto();
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace topology {
class Link;
class LinkDefaultTypeInternal;
extern LinkDefaultTypeInternal _Link_default_instance_;
class Link_TileLinkSections;
class Link_TileLinkSectionsDefaultTypeInternal;
extern Link_TileLinkSectionsDefaultTypeInternal _Link_TileLinkSections_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class TopologyLayerTile;
class TopologyLayerTileDefaultTypeInternal;
extern TopologyLayerTileDefaultTypeInternal _TopologyLayerTile_default_instance_;
}  // namespace topology
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::here::pb::hdmap::external::v1::topology::Link* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::topology::Link>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::topology::Node* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::topology::Node>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::topology::TopologyLayerTile* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::topology::TopologyLayerTile>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace topology {

// ===================================================================

class TopologyLayerTile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile) */ {
 public:
  TopologyLayerTile();
  virtual ~TopologyLayerTile();

  TopologyLayerTile(const TopologyLayerTile& from);

  inline TopologyLayerTile& operator=(const TopologyLayerTile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopologyLayerTile(TopologyLayerTile&& from) noexcept
    : TopologyLayerTile() {
    *this = ::std::move(from);
  }

  inline TopologyLayerTile& operator=(TopologyLayerTile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TopologyLayerTile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopologyLayerTile* internal_default_instance() {
    return reinterpret_cast<const TopologyLayerTile*>(
               &_TopologyLayerTile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TopologyLayerTile* other);
  friend void swap(TopologyLayerTile& a, TopologyLayerTile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopologyLayerTile* New() const final {
    return CreateMaybeMessage<TopologyLayerTile>(nullptr);
  }

  TopologyLayerTile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopologyLayerTile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopologyLayerTile& from);
  void MergeFrom(const TopologyLayerTile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopologyLayerTile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.v1.topology.Node nodes_in_tile = 3;
  int nodes_in_tile_size() const;
  void clear_nodes_in_tile();
  static const int kNodesInTileFieldNumber = 3;
  ::com::here::pb::hdmap::external::v1::topology::Node* mutable_nodes_in_tile(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Node >*
      mutable_nodes_in_tile();
  const ::com::here::pb::hdmap::external::v1::topology::Node& nodes_in_tile(int index) const;
  ::com::here::pb::hdmap::external::v1::topology::Node* add_nodes_in_tile();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Node >&
      nodes_in_tile() const;

  // repeated .com.here.pb.hdmap.external.v1.topology.Link links_starting_in_tile = 4;
  int links_starting_in_tile_size() const;
  void clear_links_starting_in_tile();
  static const int kLinksStartingInTileFieldNumber = 4;
  ::com::here::pb::hdmap::external::v1::topology::Link* mutable_links_starting_in_tile(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Link >*
      mutable_links_starting_in_tile();
  const ::com::here::pb::hdmap::external::v1::topology::Link& links_starting_in_tile(int index) const;
  ::com::here::pb::hdmap::external::v1::topology::Link* add_links_starting_in_tile();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Link >&
      links_starting_in_tile() const;

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference intersecting_link_refs = 5;
  int intersecting_link_refs_size() const;
  void clear_intersecting_link_refs();
  static const int kIntersectingLinkRefsFieldNumber = 5;
  ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* mutable_intersecting_link_refs(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >*
      mutable_intersecting_link_refs();
  const ::com::here::pb::hdmap::external::v1::common::TiledLinkReference& intersecting_link_refs(int index) const;
  ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* add_intersecting_link_refs();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >&
      intersecting_link_refs() const;

  // sint64 tile_center_here_2d_coordinate = 2;
  void clear_tile_center_here_2d_coordinate();
  static const int kTileCenterHere2DCoordinateFieldNumber = 2;
  ::google::protobuf::int64 tile_center_here_2d_coordinate() const;
  void set_tile_center_here_2d_coordinate(::google::protobuf::int64 value);

  // uint32 here_tile_id = 1;
  void clear_here_tile_id();
  static const int kHereTileIdFieldNumber = 1;
  ::google::protobuf::uint32 here_tile_id() const;
  void set_here_tile_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Node > nodes_in_tile_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Link > links_starting_in_tile_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference > intersecting_link_refs_;
  ::google::protobuf::int64 tile_center_here_2d_coordinate_;
  ::google::protobuf::uint32 here_tile_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.topology.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference connected_link_refs = 2;
  int connected_link_refs_size() const;
  void clear_connected_link_refs();
  static const int kConnectedLinkRefsFieldNumber = 2;
  ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* mutable_connected_link_refs(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >*
      mutable_connected_link_refs();
  const ::com::here::pb::hdmap::external::v1::common::TiledLinkReference& connected_link_refs(int index) const;
  ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* add_connected_link_refs();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >&
      connected_link_refs() const;

  // .com.here.pb.hdmap.external.v1.geometry.Point2d geometry = 3;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 3;
  const ::com::here::pb::hdmap::external::v1::geometry::Point2d& geometry() const;
  ::com::here::pb::hdmap::external::v1::geometry::Point2d* release_geometry();
  ::com::here::pb::hdmap::external::v1::geometry::Point2d* mutable_geometry();
  void set_allocated_geometry(::com::here::pb::hdmap::external::v1::geometry::Point2d* geometry);

  // uint32 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::uint32 node_id() const;
  void set_node_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.topology.Node)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference > connected_link_refs_;
  ::com::here::pb::hdmap::external::v1::geometry::Point2d* geometry_;
  ::google::protobuf::uint32 node_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto;
};
// -------------------------------------------------------------------

class Link_TileLinkSections final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections) */ {
 public:
  Link_TileLinkSections();
  virtual ~Link_TileLinkSections();

  Link_TileLinkSections(const Link_TileLinkSections& from);

  inline Link_TileLinkSections& operator=(const Link_TileLinkSections& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Link_TileLinkSections(Link_TileLinkSections&& from) noexcept
    : Link_TileLinkSections() {
    *this = ::std::move(from);
  }

  inline Link_TileLinkSections& operator=(Link_TileLinkSections&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Link_TileLinkSections& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Link_TileLinkSections* internal_default_instance() {
    return reinterpret_cast<const Link_TileLinkSections*>(
               &_Link_TileLinkSections_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Link_TileLinkSections* other);
  friend void swap(Link_TileLinkSections& a, Link_TileLinkSections& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Link_TileLinkSections* New() const final {
    return CreateMaybeMessage<Link_TileLinkSections>(nullptr);
  }

  Link_TileLinkSections* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Link_TileLinkSections>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Link_TileLinkSections& from);
  void MergeFrom(const Link_TileLinkSections& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Link_TileLinkSections* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.v1.common.ParametricRange link_range_in_tile = 2;
  int link_range_in_tile_size() const;
  void clear_link_range_in_tile();
  static const int kLinkRangeInTileFieldNumber = 2;
  ::com::here::pb::hdmap::external::v1::common::ParametricRange* mutable_link_range_in_tile(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::ParametricRange >*
      mutable_link_range_in_tile();
  const ::com::here::pb::hdmap::external::v1::common::ParametricRange& link_range_in_tile(int index) const;
  ::com::here::pb::hdmap::external::v1::common::ParametricRange* add_link_range_in_tile();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::ParametricRange >&
      link_range_in_tile() const;

  // uint32 intersected_here_tile_id = 1;
  void clear_intersected_here_tile_id();
  static const int kIntersectedHereTileIdFieldNumber = 1;
  ::google::protobuf::uint32 intersected_here_tile_id() const;
  void set_intersected_here_tile_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::ParametricRange > link_range_in_tile_;
  ::google::protobuf::uint32 intersected_here_tile_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto;
};
// -------------------------------------------------------------------

class Link final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.topology.Link) */ {
 public:
  Link();
  virtual ~Link();

  Link(const Link& from);

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Link(Link&& from) noexcept
    : Link() {
    *this = ::std::move(from);
  }

  inline Link& operator=(Link&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Link& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Link* internal_default_instance() {
    return reinterpret_cast<const Link*>(
               &_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Link* other);
  friend void swap(Link& a, Link& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Link* New() const final {
    return CreateMaybeMessage<Link>(nullptr);
  }

  Link* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Link>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Link* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Link_TileLinkSections TileLinkSections;

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections intersects_tiles = 5;
  int intersects_tiles_size() const;
  void clear_intersects_tiles();
  static const int kIntersectsTilesFieldNumber = 5;
  ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections* mutable_intersects_tiles(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections >*
      mutable_intersects_tiles();
  const ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections& intersects_tiles(int index) const;
  ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections* add_intersects_tiles();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections >&
      intersects_tiles() const;

  // .com.here.pb.hdmap.external.v1.common.TiledNodeReference end_node_ref = 3;
  bool has_end_node_ref() const;
  void clear_end_node_ref();
  static const int kEndNodeRefFieldNumber = 3;
  const ::com::here::pb::hdmap::external::v1::common::TiledNodeReference& end_node_ref() const;
  ::com::here::pb::hdmap::external::v1::common::TiledNodeReference* release_end_node_ref();
  ::com::here::pb::hdmap::external::v1::common::TiledNodeReference* mutable_end_node_ref();
  void set_allocated_end_node_ref(::com::here::pb::hdmap::external::v1::common::TiledNodeReference* end_node_ref);

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset geometry = 4;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 4;
  const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset& geometry() const;
  ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* release_geometry();
  ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* mutable_geometry();
  void set_allocated_geometry(::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* geometry);

  // uint32 link_id = 1;
  void clear_link_id();
  static const int kLinkIdFieldNumber = 1;
  ::google::protobuf::uint32 link_id() const;
  void set_link_id(::google::protobuf::uint32 value);

  // uint32 start_node_id = 2;
  void clear_start_node_id();
  static const int kStartNodeIdFieldNumber = 2;
  ::google::protobuf::uint32 start_node_id() const;
  void set_start_node_id(::google::protobuf::uint32 value);

  // uint32 link_length_meters = 6;
  void clear_link_length_meters();
  static const int kLinkLengthMetersFieldNumber = 6;
  ::google::protobuf::uint32 link_length_meters() const;
  void set_link_length_meters(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.topology.Link)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections > intersects_tiles_;
  ::com::here::pb::hdmap::external::v1::common::TiledNodeReference* end_node_ref_;
  ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* geometry_;
  ::google::protobuf::uint32 link_id_;
  ::google::protobuf::uint32 start_node_id_;
  ::google::protobuf::uint32 link_length_meters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopologyLayerTile

// uint32 here_tile_id = 1;
inline void TopologyLayerTile::clear_here_tile_id() {
  here_tile_id_ = 0u;
}
inline ::google::protobuf::uint32 TopologyLayerTile::here_tile_id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.here_tile_id)
  return here_tile_id_;
}
inline void TopologyLayerTile::set_here_tile_id(::google::protobuf::uint32 value) {
  
  here_tile_id_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.here_tile_id)
}

// sint64 tile_center_here_2d_coordinate = 2;
inline void TopologyLayerTile::clear_tile_center_here_2d_coordinate() {
  tile_center_here_2d_coordinate_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TopologyLayerTile::tile_center_here_2d_coordinate() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.tile_center_here_2d_coordinate)
  return tile_center_here_2d_coordinate_;
}
inline void TopologyLayerTile::set_tile_center_here_2d_coordinate(::google::protobuf::int64 value) {
  
  tile_center_here_2d_coordinate_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.tile_center_here_2d_coordinate)
}

// repeated .com.here.pb.hdmap.external.v1.topology.Node nodes_in_tile = 3;
inline int TopologyLayerTile::nodes_in_tile_size() const {
  return nodes_in_tile_.size();
}
inline void TopologyLayerTile::clear_nodes_in_tile() {
  nodes_in_tile_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::topology::Node* TopologyLayerTile::mutable_nodes_in_tile(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.nodes_in_tile)
  return nodes_in_tile_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Node >*
TopologyLayerTile::mutable_nodes_in_tile() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.nodes_in_tile)
  return &nodes_in_tile_;
}
inline const ::com::here::pb::hdmap::external::v1::topology::Node& TopologyLayerTile::nodes_in_tile(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.nodes_in_tile)
  return nodes_in_tile_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::topology::Node* TopologyLayerTile::add_nodes_in_tile() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.nodes_in_tile)
  return nodes_in_tile_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Node >&
TopologyLayerTile::nodes_in_tile() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.nodes_in_tile)
  return nodes_in_tile_;
}

// repeated .com.here.pb.hdmap.external.v1.topology.Link links_starting_in_tile = 4;
inline int TopologyLayerTile::links_starting_in_tile_size() const {
  return links_starting_in_tile_.size();
}
inline void TopologyLayerTile::clear_links_starting_in_tile() {
  links_starting_in_tile_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::topology::Link* TopologyLayerTile::mutable_links_starting_in_tile(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.links_starting_in_tile)
  return links_starting_in_tile_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Link >*
TopologyLayerTile::mutable_links_starting_in_tile() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.links_starting_in_tile)
  return &links_starting_in_tile_;
}
inline const ::com::here::pb::hdmap::external::v1::topology::Link& TopologyLayerTile::links_starting_in_tile(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.links_starting_in_tile)
  return links_starting_in_tile_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::topology::Link* TopologyLayerTile::add_links_starting_in_tile() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.links_starting_in_tile)
  return links_starting_in_tile_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Link >&
TopologyLayerTile::links_starting_in_tile() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.links_starting_in_tile)
  return links_starting_in_tile_;
}

// repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference intersecting_link_refs = 5;
inline int TopologyLayerTile::intersecting_link_refs_size() const {
  return intersecting_link_refs_.size();
}
inline ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* TopologyLayerTile::mutable_intersecting_link_refs(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.intersecting_link_refs)
  return intersecting_link_refs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >*
TopologyLayerTile::mutable_intersecting_link_refs() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.intersecting_link_refs)
  return &intersecting_link_refs_;
}
inline const ::com::here::pb::hdmap::external::v1::common::TiledLinkReference& TopologyLayerTile::intersecting_link_refs(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.intersecting_link_refs)
  return intersecting_link_refs_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* TopologyLayerTile::add_intersecting_link_refs() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.intersecting_link_refs)
  return intersecting_link_refs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >&
TopologyLayerTile::intersecting_link_refs() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.topology.TopologyLayerTile.intersecting_link_refs)
  return intersecting_link_refs_;
}

// -------------------------------------------------------------------

// Node

// uint32 node_id = 1;
inline void Node::clear_node_id() {
  node_id_ = 0u;
}
inline ::google::protobuf::uint32 Node::node_id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.Node.node_id)
  return node_id_;
}
inline void Node::set_node_id(::google::protobuf::uint32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.topology.Node.node_id)
}

// repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference connected_link_refs = 2;
inline int Node::connected_link_refs_size() const {
  return connected_link_refs_.size();
}
inline ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* Node::mutable_connected_link_refs(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.topology.Node.connected_link_refs)
  return connected_link_refs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >*
Node::mutable_connected_link_refs() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.topology.Node.connected_link_refs)
  return &connected_link_refs_;
}
inline const ::com::here::pb::hdmap::external::v1::common::TiledLinkReference& Node::connected_link_refs(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.Node.connected_link_refs)
  return connected_link_refs_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* Node::add_connected_link_refs() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.topology.Node.connected_link_refs)
  return connected_link_refs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >&
Node::connected_link_refs() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.topology.Node.connected_link_refs)
  return connected_link_refs_;
}

// .com.here.pb.hdmap.external.v1.geometry.Point2d geometry = 3;
inline bool Node::has_geometry() const {
  return this != internal_default_instance() && geometry_ != nullptr;
}
inline const ::com::here::pb::hdmap::external::v1::geometry::Point2d& Node::geometry() const {
  const ::com::here::pb::hdmap::external::v1::geometry::Point2d* p = geometry_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.Node.geometry)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::geometry::Point2d*>(
      &::com::here::pb::hdmap::external::v1::geometry::_Point2d_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::geometry::Point2d* Node::release_geometry() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.topology.Node.geometry)
  
  ::com::here::pb::hdmap::external::v1::geometry::Point2d* temp = geometry_;
  geometry_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::external::v1::geometry::Point2d* Node::mutable_geometry() {
  
  if (geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::external::v1::geometry::Point2d>(GetArenaNoVirtual());
    geometry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.topology.Node.geometry)
  return geometry_;
}
inline void Node::set_allocated_geometry(::com::here::pb::hdmap::external::v1::geometry::Point2d* geometry) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geometry_);
  }
  if (geometry) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geometry = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    
  } else {
    
  }
  geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.topology.Node.geometry)
}

// -------------------------------------------------------------------

// Link_TileLinkSections

// uint32 intersected_here_tile_id = 1;
inline void Link_TileLinkSections::clear_intersected_here_tile_id() {
  intersected_here_tile_id_ = 0u;
}
inline ::google::protobuf::uint32 Link_TileLinkSections::intersected_here_tile_id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections.intersected_here_tile_id)
  return intersected_here_tile_id_;
}
inline void Link_TileLinkSections::set_intersected_here_tile_id(::google::protobuf::uint32 value) {
  
  intersected_here_tile_id_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections.intersected_here_tile_id)
}

// repeated .com.here.pb.hdmap.external.v1.common.ParametricRange link_range_in_tile = 2;
inline int Link_TileLinkSections::link_range_in_tile_size() const {
  return link_range_in_tile_.size();
}
inline ::com::here::pb::hdmap::external::v1::common::ParametricRange* Link_TileLinkSections::mutable_link_range_in_tile(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections.link_range_in_tile)
  return link_range_in_tile_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::ParametricRange >*
Link_TileLinkSections::mutable_link_range_in_tile() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections.link_range_in_tile)
  return &link_range_in_tile_;
}
inline const ::com::here::pb::hdmap::external::v1::common::ParametricRange& Link_TileLinkSections::link_range_in_tile(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections.link_range_in_tile)
  return link_range_in_tile_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::common::ParametricRange* Link_TileLinkSections::add_link_range_in_tile() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections.link_range_in_tile)
  return link_range_in_tile_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::ParametricRange >&
Link_TileLinkSections::link_range_in_tile() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections.link_range_in_tile)
  return link_range_in_tile_;
}

// -------------------------------------------------------------------

// Link

// uint32 link_id = 1;
inline void Link::clear_link_id() {
  link_id_ = 0u;
}
inline ::google::protobuf::uint32 Link::link_id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.Link.link_id)
  return link_id_;
}
inline void Link::set_link_id(::google::protobuf::uint32 value) {
  
  link_id_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.topology.Link.link_id)
}

// uint32 start_node_id = 2;
inline void Link::clear_start_node_id() {
  start_node_id_ = 0u;
}
inline ::google::protobuf::uint32 Link::start_node_id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.Link.start_node_id)
  return start_node_id_;
}
inline void Link::set_start_node_id(::google::protobuf::uint32 value) {
  
  start_node_id_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.topology.Link.start_node_id)
}

// .com.here.pb.hdmap.external.v1.common.TiledNodeReference end_node_ref = 3;
inline bool Link::has_end_node_ref() const {
  return this != internal_default_instance() && end_node_ref_ != nullptr;
}
inline const ::com::here::pb::hdmap::external::v1::common::TiledNodeReference& Link::end_node_ref() const {
  const ::com::here::pb::hdmap::external::v1::common::TiledNodeReference* p = end_node_ref_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.Link.end_node_ref)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::common::TiledNodeReference*>(
      &::com::here::pb::hdmap::external::v1::common::_TiledNodeReference_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::common::TiledNodeReference* Link::release_end_node_ref() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.topology.Link.end_node_ref)
  
  ::com::here::pb::hdmap::external::v1::common::TiledNodeReference* temp = end_node_ref_;
  end_node_ref_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::external::v1::common::TiledNodeReference* Link::mutable_end_node_ref() {
  
  if (end_node_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::external::v1::common::TiledNodeReference>(GetArenaNoVirtual());
    end_node_ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.topology.Link.end_node_ref)
  return end_node_ref_;
}
inline void Link::set_allocated_end_node_ref(::com::here::pb::hdmap::external::v1::common::TiledNodeReference* end_node_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_node_ref_);
  }
  if (end_node_ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end_node_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_node_ref, submessage_arena);
    }
    
  } else {
    
  }
  end_node_ref_ = end_node_ref;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.topology.Link.end_node_ref)
}

// .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset geometry = 4;
inline bool Link::has_geometry() const {
  return this != internal_default_instance() && geometry_ != nullptr;
}
inline const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset& Link::geometry() const {
  const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* p = geometry_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.Link.geometry)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset*>(
      &::com::here::pb::hdmap::external::v1::geometry::_LineString2dOffset_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* Link::release_geometry() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.topology.Link.geometry)
  
  ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* temp = geometry_;
  geometry_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* Link::mutable_geometry() {
  
  if (geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset>(GetArenaNoVirtual());
    geometry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.topology.Link.geometry)
  return geometry_;
}
inline void Link::set_allocated_geometry(::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* geometry) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geometry_);
  }
  if (geometry) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geometry = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    
  } else {
    
  }
  geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.topology.Link.geometry)
}

// repeated .com.here.pb.hdmap.external.v1.topology.Link.TileLinkSections intersects_tiles = 5;
inline int Link::intersects_tiles_size() const {
  return intersects_tiles_.size();
}
inline void Link::clear_intersects_tiles() {
  intersects_tiles_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections* Link::mutable_intersects_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.topology.Link.intersects_tiles)
  return intersects_tiles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections >*
Link::mutable_intersects_tiles() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.topology.Link.intersects_tiles)
  return &intersects_tiles_;
}
inline const ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections& Link::intersects_tiles(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.Link.intersects_tiles)
  return intersects_tiles_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections* Link::add_intersects_tiles() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.topology.Link.intersects_tiles)
  return intersects_tiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::topology::Link_TileLinkSections >&
Link::intersects_tiles() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.topology.Link.intersects_tiles)
  return intersects_tiles_;
}

// uint32 link_length_meters = 6;
inline void Link::clear_link_length_meters() {
  link_length_meters_ = 0u;
}
inline ::google::protobuf::uint32 Link::link_length_meters() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.topology.Link.link_length_meters)
  return link_length_meters_;
}
inline void Link::set_link_length_meters(::google::protobuf::uint32 value) {
  
  link_length_meters_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.topology.Link.link_length_meters)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace topology
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2ftopology_2flayer_2dtopology_2dgeometry_2eproto
