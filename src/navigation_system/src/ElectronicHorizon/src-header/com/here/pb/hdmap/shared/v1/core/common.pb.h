// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/shared/v1/core/common.proto

#ifndef PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto
#define PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto();
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace shared {
namespace v1 {
namespace core {
class RoadUsers;
class RoadUsersDefaultTypeInternal;
extern RoadUsersDefaultTypeInternal _RoadUsers_default_instance_;
class SpeedLimit;
class SpeedLimitDefaultTypeInternal;
extern SpeedLimitDefaultTypeInternal _SpeedLimit_default_instance_;
}  // namespace core
}  // namespace v1
}  // namespace shared
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::here::pb::hdmap::shared::v1::core::RoadUsers* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::RoadUsers>(Arena*);
template<> ::com::here::pb::hdmap::shared::v1::core::SpeedLimit* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::SpeedLimit>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace shared {
namespace v1 {
namespace core {

enum SpeedLimit_SpeedLimitUnit {
  SpeedLimit_SpeedLimitUnit_SpeedLimitUnit_UNKNOWN = 0,
  SpeedLimit_SpeedLimitUnit_KILOMETERS_PER_HOUR = 1,
  SpeedLimit_SpeedLimitUnit_MILES_PER_HOUR = 2,
  SpeedLimit_SpeedLimitUnit_SpeedLimit_SpeedLimitUnit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  SpeedLimit_SpeedLimitUnit_SpeedLimit_SpeedLimitUnit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool SpeedLimit_SpeedLimitUnit_IsValid(int value);
const SpeedLimit_SpeedLimitUnit SpeedLimit_SpeedLimitUnit_SpeedLimitUnit_MIN = SpeedLimit_SpeedLimitUnit_SpeedLimitUnit_UNKNOWN;
const SpeedLimit_SpeedLimitUnit SpeedLimit_SpeedLimitUnit_SpeedLimitUnit_MAX = SpeedLimit_SpeedLimitUnit_MILES_PER_HOUR;
const int SpeedLimit_SpeedLimitUnit_SpeedLimitUnit_ARRAYSIZE = SpeedLimit_SpeedLimitUnit_SpeedLimitUnit_MAX + 1;

const ::google::protobuf::EnumDescriptor* SpeedLimit_SpeedLimitUnit_descriptor();
inline const ::std::string& SpeedLimit_SpeedLimitUnit_Name(SpeedLimit_SpeedLimitUnit value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpeedLimit_SpeedLimitUnit_descriptor(), value);
}
inline bool SpeedLimit_SpeedLimitUnit_Parse(
    const ::std::string& name, SpeedLimit_SpeedLimitUnit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpeedLimit_SpeedLimitUnit>(
    SpeedLimit_SpeedLimitUnit_descriptor(), name, value);
}
enum SpeedLimit_SpeedLimitSource {
  SpeedLimit_SpeedLimitSource_SpeedLimitSource_UNKNOWN = 0,
  SpeedLimit_SpeedLimitSource_POSTED_SIGN = 1,
  SpeedLimit_SpeedLimitSource_BUILT_UP_AREA_SIGN = 2,
  SpeedLimit_SpeedLimitSource_MOTORWAY_SIGN = 3,
  SpeedLimit_SpeedLimitSource_UNPOSTED = 4,
  SpeedLimit_SpeedLimitSource_POSTED_LANE = 5,
  SpeedLimit_SpeedLimitSource_POSTED_DIR = 6,
  SpeedLimit_SpeedLimitSource_MOTORISED_VEHICLES_ONLY = 7,
  SpeedLimit_SpeedLimitSource_DERIVED_FROM_SPEED_CATEGORY = 8,
  SpeedLimit_SpeedLimitSource_RAMP_UNPOSTED = 9,
  SpeedLimit_SpeedLimitSource_TRAFFIC_CALMING = 10,
  SpeedLimit_SpeedLimitSource_SpeedLimit_SpeedLimitSource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  SpeedLimit_SpeedLimitSource_SpeedLimit_SpeedLimitSource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool SpeedLimit_SpeedLimitSource_IsValid(int value);
const SpeedLimit_SpeedLimitSource SpeedLimit_SpeedLimitSource_SpeedLimitSource_MIN = SpeedLimit_SpeedLimitSource_SpeedLimitSource_UNKNOWN;
const SpeedLimit_SpeedLimitSource SpeedLimit_SpeedLimitSource_SpeedLimitSource_MAX = SpeedLimit_SpeedLimitSource_TRAFFIC_CALMING;
const int SpeedLimit_SpeedLimitSource_SpeedLimitSource_ARRAYSIZE = SpeedLimit_SpeedLimitSource_SpeedLimitSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* SpeedLimit_SpeedLimitSource_descriptor();
inline const ::std::string& SpeedLimit_SpeedLimitSource_Name(SpeedLimit_SpeedLimitSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpeedLimit_SpeedLimitSource_descriptor(), value);
}
inline bool SpeedLimit_SpeedLimitSource_Parse(
    const ::std::string& name, SpeedLimit_SpeedLimitSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpeedLimit_SpeedLimitSource>(
    SpeedLimit_SpeedLimitSource_descriptor(), name, value);
}
// ===================================================================

class RoadUsers final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.RoadUsers) */ {
 public:
  RoadUsers();
  virtual ~RoadUsers();

  RoadUsers(const RoadUsers& from);

  inline RoadUsers& operator=(const RoadUsers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoadUsers(RoadUsers&& from) noexcept
    : RoadUsers() {
    *this = ::std::move(from);
  }

  inline RoadUsers& operator=(RoadUsers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RoadUsers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadUsers* internal_default_instance() {
    return reinterpret_cast<const RoadUsers*>(
               &_RoadUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RoadUsers* other);
  friend void swap(RoadUsers& a, RoadUsers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoadUsers* New() const final {
    return CreateMaybeMessage<RoadUsers>(nullptr);
  }

  RoadUsers* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoadUsers>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoadUsers& from);
  void MergeFrom(const RoadUsers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadUsers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool automobiles = 1;
  void clear_automobiles();
  static const int kAutomobilesFieldNumber = 1;
  bool automobiles() const;
  void set_automobiles(bool value);

  // bool buses = 2;
  void clear_buses();
  static const int kBusesFieldNumber = 2;
  bool buses() const;
  void set_buses(bool value);

  // bool taxis = 3;
  void clear_taxis();
  static const int kTaxisFieldNumber = 3;
  bool taxis() const;
  void set_taxis(bool value);

  // bool carpools = 4;
  void clear_carpools();
  static const int kCarpoolsFieldNumber = 4;
  bool carpools() const;
  void set_carpools(bool value);

  // bool pedestrians = 5;
  void clear_pedestrians();
  static const int kPedestriansFieldNumber = 5;
  bool pedestrians() const;
  void set_pedestrians(bool value);

  // bool trucks = 6;
  void clear_trucks();
  static const int kTrucksFieldNumber = 6;
  bool trucks() const;
  void set_trucks(bool value);

  // bool through_traffic = 7;
  void clear_through_traffic();
  static const int kThroughTrafficFieldNumber = 7;
  bool through_traffic() const;
  void set_through_traffic(bool value);

  // bool deliveries = 8;
  void clear_deliveries();
  static const int kDeliveriesFieldNumber = 8;
  bool deliveries() const;
  void set_deliveries(bool value);

  // bool emergency_vehicles = 9;
  void clear_emergency_vehicles();
  static const int kEmergencyVehiclesFieldNumber = 9;
  bool emergency_vehicles() const;
  void set_emergency_vehicles(bool value);

  // bool motorcycles = 10;
  void clear_motorcycles();
  static const int kMotorcyclesFieldNumber = 10;
  bool motorcycles() const;
  void set_motorcycles(bool value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.RoadUsers)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool automobiles_;
  bool buses_;
  bool taxis_;
  bool carpools_;
  bool pedestrians_;
  bool trucks_;
  bool through_traffic_;
  bool deliveries_;
  bool emergency_vehicles_;
  bool motorcycles_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class SpeedLimit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.SpeedLimit) */ {
 public:
  SpeedLimit();
  virtual ~SpeedLimit();

  SpeedLimit(const SpeedLimit& from);

  inline SpeedLimit& operator=(const SpeedLimit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedLimit(SpeedLimit&& from) noexcept
    : SpeedLimit() {
    *this = ::std::move(from);
  }

  inline SpeedLimit& operator=(SpeedLimit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SpeedLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedLimit* internal_default_instance() {
    return reinterpret_cast<const SpeedLimit*>(
               &_SpeedLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SpeedLimit* other);
  friend void swap(SpeedLimit& a, SpeedLimit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedLimit* New() const final {
    return CreateMaybeMessage<SpeedLimit>(nullptr);
  }

  SpeedLimit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeedLimit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeedLimit& from);
  void MergeFrom(const SpeedLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedLimit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SpeedLimit_SpeedLimitUnit SpeedLimitUnit;
  static const SpeedLimitUnit SpeedLimitUnit_UNKNOWN =
    SpeedLimit_SpeedLimitUnit_SpeedLimitUnit_UNKNOWN;
  static const SpeedLimitUnit KILOMETERS_PER_HOUR =
    SpeedLimit_SpeedLimitUnit_KILOMETERS_PER_HOUR;
  static const SpeedLimitUnit MILES_PER_HOUR =
    SpeedLimit_SpeedLimitUnit_MILES_PER_HOUR;
  static inline bool SpeedLimitUnit_IsValid(int value) {
    return SpeedLimit_SpeedLimitUnit_IsValid(value);
  }
  static const SpeedLimitUnit SpeedLimitUnit_MIN =
    SpeedLimit_SpeedLimitUnit_SpeedLimitUnit_MIN;
  static const SpeedLimitUnit SpeedLimitUnit_MAX =
    SpeedLimit_SpeedLimitUnit_SpeedLimitUnit_MAX;
  static const int SpeedLimitUnit_ARRAYSIZE =
    SpeedLimit_SpeedLimitUnit_SpeedLimitUnit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SpeedLimitUnit_descriptor() {
    return SpeedLimit_SpeedLimitUnit_descriptor();
  }
  static inline const ::std::string& SpeedLimitUnit_Name(SpeedLimitUnit value) {
    return SpeedLimit_SpeedLimitUnit_Name(value);
  }
  static inline bool SpeedLimitUnit_Parse(const ::std::string& name,
      SpeedLimitUnit* value) {
    return SpeedLimit_SpeedLimitUnit_Parse(name, value);
  }

  typedef SpeedLimit_SpeedLimitSource SpeedLimitSource;
  static const SpeedLimitSource SpeedLimitSource_UNKNOWN =
    SpeedLimit_SpeedLimitSource_SpeedLimitSource_UNKNOWN;
  static const SpeedLimitSource POSTED_SIGN =
    SpeedLimit_SpeedLimitSource_POSTED_SIGN;
  static const SpeedLimitSource BUILT_UP_AREA_SIGN =
    SpeedLimit_SpeedLimitSource_BUILT_UP_AREA_SIGN;
  static const SpeedLimitSource MOTORWAY_SIGN =
    SpeedLimit_SpeedLimitSource_MOTORWAY_SIGN;
  static const SpeedLimitSource UNPOSTED =
    SpeedLimit_SpeedLimitSource_UNPOSTED;
  static const SpeedLimitSource POSTED_LANE =
    SpeedLimit_SpeedLimitSource_POSTED_LANE;
  static const SpeedLimitSource POSTED_DIR =
    SpeedLimit_SpeedLimitSource_POSTED_DIR;
  static const SpeedLimitSource MOTORISED_VEHICLES_ONLY =
    SpeedLimit_SpeedLimitSource_MOTORISED_VEHICLES_ONLY;
  static const SpeedLimitSource DERIVED_FROM_SPEED_CATEGORY =
    SpeedLimit_SpeedLimitSource_DERIVED_FROM_SPEED_CATEGORY;
  static const SpeedLimitSource RAMP_UNPOSTED =
    SpeedLimit_SpeedLimitSource_RAMP_UNPOSTED;
  static const SpeedLimitSource TRAFFIC_CALMING =
    SpeedLimit_SpeedLimitSource_TRAFFIC_CALMING;
  static inline bool SpeedLimitSource_IsValid(int value) {
    return SpeedLimit_SpeedLimitSource_IsValid(value);
  }
  static const SpeedLimitSource SpeedLimitSource_MIN =
    SpeedLimit_SpeedLimitSource_SpeedLimitSource_MIN;
  static const SpeedLimitSource SpeedLimitSource_MAX =
    SpeedLimit_SpeedLimitSource_SpeedLimitSource_MAX;
  static const int SpeedLimitSource_ARRAYSIZE =
    SpeedLimit_SpeedLimitSource_SpeedLimitSource_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SpeedLimitSource_descriptor() {
    return SpeedLimit_SpeedLimitSource_descriptor();
  }
  static inline const ::std::string& SpeedLimitSource_Name(SpeedLimitSource value) {
    return SpeedLimit_SpeedLimitSource_Name(value);
  }
  static inline bool SpeedLimitSource_Parse(const ::std::string& name,
      SpeedLimitSource* value) {
    return SpeedLimit_SpeedLimitSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit.SpeedLimitUnit unit = 2;
  void clear_unit();
  static const int kUnitFieldNumber = 2;
  ::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitUnit unit() const;
  void set_unit(::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitUnit value);

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit.SpeedLimitSource source = 3;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  ::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitSource source() const;
  void set_source(::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitSource value);

  // bool is_unlimited = 4;
  void clear_is_unlimited();
  static const int kIsUnlimitedFieldNumber = 4;
  bool is_unlimited() const;
  void set_is_unlimited(bool value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.SpeedLimit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 value_;
  int unit_;
  int source_;
  bool is_unlimited_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoadUsers

// bool automobiles = 1;
inline void RoadUsers::clear_automobiles() {
  automobiles_ = false;
}
inline bool RoadUsers::automobiles() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.RoadUsers.automobiles)
  return automobiles_;
}
inline void RoadUsers::set_automobiles(bool value) {
  
  automobiles_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.RoadUsers.automobiles)
}

// bool buses = 2;
inline void RoadUsers::clear_buses() {
  buses_ = false;
}
inline bool RoadUsers::buses() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.RoadUsers.buses)
  return buses_;
}
inline void RoadUsers::set_buses(bool value) {
  
  buses_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.RoadUsers.buses)
}

// bool taxis = 3;
inline void RoadUsers::clear_taxis() {
  taxis_ = false;
}
inline bool RoadUsers::taxis() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.RoadUsers.taxis)
  return taxis_;
}
inline void RoadUsers::set_taxis(bool value) {
  
  taxis_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.RoadUsers.taxis)
}

// bool carpools = 4;
inline void RoadUsers::clear_carpools() {
  carpools_ = false;
}
inline bool RoadUsers::carpools() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.RoadUsers.carpools)
  return carpools_;
}
inline void RoadUsers::set_carpools(bool value) {
  
  carpools_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.RoadUsers.carpools)
}

// bool pedestrians = 5;
inline void RoadUsers::clear_pedestrians() {
  pedestrians_ = false;
}
inline bool RoadUsers::pedestrians() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.RoadUsers.pedestrians)
  return pedestrians_;
}
inline void RoadUsers::set_pedestrians(bool value) {
  
  pedestrians_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.RoadUsers.pedestrians)
}

// bool trucks = 6;
inline void RoadUsers::clear_trucks() {
  trucks_ = false;
}
inline bool RoadUsers::trucks() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.RoadUsers.trucks)
  return trucks_;
}
inline void RoadUsers::set_trucks(bool value) {
  
  trucks_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.RoadUsers.trucks)
}

// bool through_traffic = 7;
inline void RoadUsers::clear_through_traffic() {
  through_traffic_ = false;
}
inline bool RoadUsers::through_traffic() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.RoadUsers.through_traffic)
  return through_traffic_;
}
inline void RoadUsers::set_through_traffic(bool value) {
  
  through_traffic_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.RoadUsers.through_traffic)
}

// bool deliveries = 8;
inline void RoadUsers::clear_deliveries() {
  deliveries_ = false;
}
inline bool RoadUsers::deliveries() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.RoadUsers.deliveries)
  return deliveries_;
}
inline void RoadUsers::set_deliveries(bool value) {
  
  deliveries_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.RoadUsers.deliveries)
}

// bool emergency_vehicles = 9;
inline void RoadUsers::clear_emergency_vehicles() {
  emergency_vehicles_ = false;
}
inline bool RoadUsers::emergency_vehicles() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.RoadUsers.emergency_vehicles)
  return emergency_vehicles_;
}
inline void RoadUsers::set_emergency_vehicles(bool value) {
  
  emergency_vehicles_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.RoadUsers.emergency_vehicles)
}

// bool motorcycles = 10;
inline void RoadUsers::clear_motorcycles() {
  motorcycles_ = false;
}
inline bool RoadUsers::motorcycles() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.RoadUsers.motorcycles)
  return motorcycles_;
}
inline void RoadUsers::set_motorcycles(bool value) {
  
  motorcycles_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.RoadUsers.motorcycles)
}

// -------------------------------------------------------------------

// SpeedLimit

// uint32 value = 1;
inline void SpeedLimit::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 SpeedLimit::value() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.SpeedLimit.value)
  return value_;
}
inline void SpeedLimit::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.SpeedLimit.value)
}

// .com.here.pb.hdmap.shared.v1.core.SpeedLimit.SpeedLimitUnit unit = 2;
inline void SpeedLimit::clear_unit() {
  unit_ = 0;
}
inline ::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitUnit SpeedLimit::unit() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.SpeedLimit.unit)
  return static_cast< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitUnit >(unit_);
}
inline void SpeedLimit::set_unit(::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitUnit value) {
  
  unit_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.SpeedLimit.unit)
}

// .com.here.pb.hdmap.shared.v1.core.SpeedLimit.SpeedLimitSource source = 3;
inline void SpeedLimit::clear_source() {
  source_ = 0;
}
inline ::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitSource SpeedLimit::source() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.SpeedLimit.source)
  return static_cast< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitSource >(source_);
}
inline void SpeedLimit::set_source(::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitSource value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.SpeedLimit.source)
}

// bool is_unlimited = 4;
inline void SpeedLimit::clear_is_unlimited() {
  is_unlimited_ = false;
}
inline bool SpeedLimit::is_unlimited() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.SpeedLimit.is_unlimited)
  return is_unlimited_;
}
inline void SpeedLimit::set_is_unlimited(bool value) {
  
  is_unlimited_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.SpeedLimit.is_unlimited)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace v1
}  // namespace shared
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitUnit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitUnit>() {
  return ::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitUnit_descriptor();
}
template <> struct is_proto_enum< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitSource>() {
  return ::com::here::pb::hdmap::shared::v1::core::SpeedLimit_SpeedLimitSource_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto
