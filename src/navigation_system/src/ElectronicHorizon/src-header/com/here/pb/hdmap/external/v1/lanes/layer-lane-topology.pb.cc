// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/external/v1/lanes/layer-lane-topology.proto

#include "com/here/pb/hdmap/external/v1/lanes/layer-lane-topology.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TiledLaneGroupConnectorReference_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TiledLaneGroupReference_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LineString2dOffset_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Lane_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneGroup_LaneGroupReferenceGeometry_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LaneGroupConnector_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LaneGroup_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto;
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace lanes {
class LaneTopologyLayerTileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneTopologyLayerTile> _instance;
} _LaneTopologyLayerTile_default_instance_;
class LaneGroup_LaneGroupReferenceGeometryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneGroup_LaneGroupReferenceGeometry> _instance;
} _LaneGroup_LaneGroupReferenceGeometry_default_instance_;
class LaneGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneGroup> _instance;
} _LaneGroup_default_instance_;
class LaneGroupConnectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneGroupConnector> _instance;
} _LaneGroupConnector_default_instance_;
class LaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane> _instance;
} _Lane_default_instance_;
}  // namespace lanes
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
static void InitDefaultsLaneTopologyLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::lanes::_LaneTopologyLayerTile_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::lanes::LaneTopologyLayerTile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::lanes::LaneTopologyLayerTile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LaneTopologyLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLaneTopologyLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto}, {
      &scc_info_LaneGroup_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base,
      &scc_info_LaneGroupConnector_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base,
      &scc_info_TiledLaneGroupReference_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto.base,}};

static void InitDefaultsLaneGroup_LaneGroupReferenceGeometry_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::lanes::_LaneGroup_LaneGroupReferenceGeometry_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaneGroup_LaneGroupReferenceGeometry_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaneGroup_LaneGroupReferenceGeometry_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto}, {
      &scc_info_LineString2dOffset_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto.base,}};

static void InitDefaultsLaneGroup_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::lanes::_LaneGroup_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::lanes::LaneGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::lanes::LaneGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LaneGroup_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLaneGroup_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto}, {
      &scc_info_TiledLaneGroupConnectorReference_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto.base,
      &scc_info_Lane_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base,
      &scc_info_LaneGroup_LaneGroupReferenceGeometry_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base,}};

static void InitDefaultsLaneGroupConnector_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::lanes::_LaneGroupConnector_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::lanes::LaneGroupConnector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::lanes::LaneGroupConnector::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LaneGroupConnector_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLaneGroupConnector_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto}, {
      &scc_info_LineString2dOffset_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto.base,
      &scc_info_TiledLaneGroupReference_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto.base,}};

static void InitDefaultsLane_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::lanes::_Lane_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::lanes::Lane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::lanes::Lane::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Lane_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLane_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto}, {}};

void InitDefaults_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LaneTopologyLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneGroup_LaneGroupReferenceGeometry_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneGroup_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneGroupConnector_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Lane_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneTopologyLayerTile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneTopologyLayerTile, here_tile_id_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneTopologyLayerTile, tile_center_here_2d_coordinate_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneTopologyLayerTile, lane_groups_starting_in_tile_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneTopologyLayerTile, lane_group_connectors_in_tile_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneTopologyLayerTile, intersecting_lane_group_refs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry, left_boundary_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry, right_boundary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroup, lane_group_id_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroup, start_lane_group_connector_ref_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroup, end_lane_group_connector_ref_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroup, lanes_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroup, boundary_geometry_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroup, intersects_tiles_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroup, lane_group_length_meters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroupConnector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroupConnector, lane_group_connector_id_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroupConnector, boundary_geometry_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::LaneGroupConnector, connected_lane_group_refs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::Lane, start_lane_connector_number_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::Lane, end_lane_connector_number_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::lanes::Lane, is_transitioning_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::here::pb::hdmap::external::v1::lanes::LaneTopologyLayerTile)},
  { 10, -1, sizeof(::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry)},
  { 17, -1, sizeof(::com::here::pb::hdmap::external::v1::lanes::LaneGroup)},
  { 29, -1, sizeof(::com::here::pb::hdmap::external::v1::lanes::LaneGroupConnector)},
  { 37, -1, sizeof(::com::here::pb::hdmap::external::v1::lanes::Lane)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::lanes::_LaneTopologyLayerTile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::lanes::_LaneGroup_LaneGroupReferenceGeometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::lanes::_LaneGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::lanes::_LaneGroupConnector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::lanes::_Lane_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto = {
  {}, AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto, "com/here/pb/hdmap/external/v1/lanes/layer-lane-topology.proto", schemas,
  file_default_instances, TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto::offsets,
  file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto, 5, file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto, file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto,
};

const char descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto[] =
  "\n=com/here/pb/hdmap/external/v1/lanes/la"
  "yer-lane-topology.proto\022#com.here.pb.hdm"
  "ap.external.v1.lanes\0321com/here/pb/hdmap/"
  "external/v1/common/common.proto\0325com/her"
  "e/pb/hdmap/external/v1/geometry/geometry"
  ".proto\"\360\002\n\025LaneTopologyLayerTile\022\024\n\014here"
  "_tile_id\030\001 \001(\r\022&\n\036tile_center_here_2d_co"
  "ordinate\030\002 \001(\022\022T\n\034lane_groups_starting_i"
  "n_tile\030\003 \003(\0132..com.here.pb.hdmap.externa"
  "l.v1.lanes.LaneGroup\022^\n\035lane_group_conne"
  "ctors_in_tile\030\004 \003(\01327.com.here.pb.hdmap."
  "external.v1.lanes.LaneGroupConnector\022c\n\034"
  "intersecting_lane_group_refs\030\005 \003(\0132=.com"
  ".here.pb.hdmap.external.v1.common.TiledL"
  "aneGroupReference\"\332\004\n\tLaneGroup\022\025\n\rlane_"
  "group_id\030\001 \001(\004\022&\n\036start_lane_group_conne"
  "ctor_ref\030\002 \001(\004\022l\n\034end_lane_group_connect"
  "or_ref\030\003 \001(\0132F.com.here.pb.hdmap.externa"
  "l.v1.common.TiledLaneGroupConnectorRefer"
  "ence\0228\n\005lanes\030\004 \003(\0132).com.here.pb.hdmap."
  "external.v1.lanes.Lane\022d\n\021boundary_geome"
  "try\030\005 \001(\0132I.com.here.pb.hdmap.external.v"
  "1.lanes.LaneGroup.LaneGroupReferenceGeom"
  "etry\022\030\n\020intersects_tiles\030\006 \003(\r\022 \n\030lane_g"
  "roup_length_meters\030\007 \001(\r\032\303\001\n\032LaneGroupRe"
  "ferenceGeometry\022Q\n\rleft_boundary\030\001 \001(\0132:"
  ".com.here.pb.hdmap.external.v1.geometry."
  "LineString2dOffset\022R\n\016right_boundary\030\002 \001"
  "(\0132:.com.here.pb.hdmap.external.v1.geome"
  "try.LineString2dOffset\"\356\001\n\022LaneGroupConn"
  "ector\022\037\n\027lane_group_connector_id\030\001 \001(\004\022U"
  "\n\021boundary_geometry\030\002 \001(\0132:.com.here.pb."
  "hdmap.external.v1.geometry.LineString2dO"
  "ffset\022`\n\031connected_lane_group_refs\030\003 \003(\013"
  "2=.com.here.pb.hdmap.external.v1.common."
  "TiledLaneGroupReference\"h\n\004Lane\022#\n\033start"
  "_lane_connector_number\030\001 \001(\r\022!\n\031end_lane"
  "_connector_number\030\002 \001(\r\022\030\n\020is_transition"
  "ing\030\003 \001(\010b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto = {
  false, InitDefaults_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto, 
  descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto,
  "com/here/pb/hdmap/external/v1/lanes/layer-lane-topology.proto", &assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto, 1537,
};

void AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto,
    ::AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto = []() { AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto(); return true; }();
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace lanes {

// ===================================================================

void LaneTopologyLayerTile::InitAsDefaultInstance() {
}
class LaneTopologyLayerTile::HasBitSetters {
 public:
};

void LaneTopologyLayerTile::clear_intersecting_lane_group_refs() {
  intersecting_lane_group_refs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneTopologyLayerTile::kHereTileIdFieldNumber;
const int LaneTopologyLayerTile::kTileCenterHere2DCoordinateFieldNumber;
const int LaneTopologyLayerTile::kLaneGroupsStartingInTileFieldNumber;
const int LaneTopologyLayerTile::kLaneGroupConnectorsInTileFieldNumber;
const int LaneTopologyLayerTile::kIntersectingLaneGroupRefsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneTopologyLayerTile::LaneTopologyLayerTile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
}
LaneTopologyLayerTile::LaneTopologyLayerTile(const LaneTopologyLayerTile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      lane_groups_starting_in_tile_(from.lane_groups_starting_in_tile_),
      lane_group_connectors_in_tile_(from.lane_group_connectors_in_tile_),
      intersecting_lane_group_refs_(from.intersecting_lane_group_refs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tile_center_here_2d_coordinate_, &from.tile_center_here_2d_coordinate_,
    static_cast<size_t>(reinterpret_cast<char*>(&here_tile_id_) -
    reinterpret_cast<char*>(&tile_center_here_2d_coordinate_)) + sizeof(here_tile_id_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
}

void LaneTopologyLayerTile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaneTopologyLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base);
  ::memset(&tile_center_here_2d_coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&here_tile_id_) -
      reinterpret_cast<char*>(&tile_center_here_2d_coordinate_)) + sizeof(here_tile_id_));
}

LaneTopologyLayerTile::~LaneTopologyLayerTile() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
  SharedDtor();
}

void LaneTopologyLayerTile::SharedDtor() {
}

void LaneTopologyLayerTile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneTopologyLayerTile& LaneTopologyLayerTile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaneTopologyLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base);
  return *internal_default_instance();
}


void LaneTopologyLayerTile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_groups_starting_in_tile_.Clear();
  lane_group_connectors_in_tile_.Clear();
  intersecting_lane_group_refs_.Clear();
  ::memset(&tile_center_here_2d_coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&here_tile_id_) -
      reinterpret_cast<char*>(&tile_center_here_2d_coordinate_)) + sizeof(here_tile_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneTopologyLayerTile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaneTopologyLayerTile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 here_tile_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_here_tile_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // sint64 tile_center_here_2d_coordinate = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_tile_center_here_2d_coordinate(::google::protobuf::internal::ReadVarintZigZag64(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.lanes.LaneGroup lane_groups_starting_in_tile = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::lanes::LaneGroup::_InternalParse;
          object = msg->add_lane_groups_starting_in_tile();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector lane_group_connectors_in_tile = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::lanes::LaneGroupConnector::_InternalParse;
          object = msg->add_lane_group_connectors_in_tile();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.common.TiledLaneGroupReference intersecting_lane_group_refs = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::common::TiledLaneGroupReference::_InternalParse;
          object = msg->add_intersecting_lane_group_refs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneTopologyLayerTile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 here_tile_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &here_tile_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 tile_center_here_2d_coordinate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &tile_center_here_2d_coordinate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.lanes.LaneGroup lane_groups_starting_in_tile = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_groups_starting_in_tile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector lane_group_connectors_in_tile = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_group_connectors_in_tile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.common.TiledLaneGroupReference intersecting_lane_group_refs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_intersecting_lane_group_refs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneTopologyLayerTile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->here_tile_id(), output);
  }

  // sint64 tile_center_here_2d_coordinate = 2;
  if (this->tile_center_here_2d_coordinate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->tile_center_here_2d_coordinate(), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.lanes.LaneGroup lane_groups_starting_in_tile = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_groups_starting_in_tile_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->lane_groups_starting_in_tile(static_cast<int>(i)),
      output);
  }

  // repeated .com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector lane_group_connectors_in_tile = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_group_connectors_in_tile_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->lane_group_connectors_in_tile(static_cast<int>(i)),
      output);
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLaneGroupReference intersecting_lane_group_refs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intersecting_lane_group_refs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->intersecting_lane_group_refs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
}

::google::protobuf::uint8* LaneTopologyLayerTile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->here_tile_id(), target);
  }

  // sint64 tile_center_here_2d_coordinate = 2;
  if (this->tile_center_here_2d_coordinate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->tile_center_here_2d_coordinate(), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.lanes.LaneGroup lane_groups_starting_in_tile = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_groups_starting_in_tile_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->lane_groups_starting_in_tile(static_cast<int>(i)), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector lane_group_connectors_in_tile = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_group_connectors_in_tile_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->lane_group_connectors_in_tile(static_cast<int>(i)), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLaneGroupReference intersecting_lane_group_refs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intersecting_lane_group_refs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->intersecting_lane_group_refs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
  return target;
}

size_t LaneTopologyLayerTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.lanes.LaneGroup lane_groups_starting_in_tile = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_groups_starting_in_tile_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_groups_starting_in_tile(static_cast<int>(i)));
    }
  }

  // repeated .com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector lane_group_connectors_in_tile = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_group_connectors_in_tile_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_group_connectors_in_tile(static_cast<int>(i)));
    }
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLaneGroupReference intersecting_lane_group_refs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->intersecting_lane_group_refs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->intersecting_lane_group_refs(static_cast<int>(i)));
    }
  }

  // sint64 tile_center_here_2d_coordinate = 2;
  if (this->tile_center_here_2d_coordinate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->tile_center_here_2d_coordinate());
  }

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->here_tile_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneTopologyLayerTile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneTopologyLayerTile* source =
      ::google::protobuf::DynamicCastToGenerated<LaneTopologyLayerTile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
    MergeFrom(*source);
  }
}

void LaneTopologyLayerTile::MergeFrom(const LaneTopologyLayerTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_groups_starting_in_tile_.MergeFrom(from.lane_groups_starting_in_tile_);
  lane_group_connectors_in_tile_.MergeFrom(from.lane_group_connectors_in_tile_);
  intersecting_lane_group_refs_.MergeFrom(from.intersecting_lane_group_refs_);
  if (from.tile_center_here_2d_coordinate() != 0) {
    set_tile_center_here_2d_coordinate(from.tile_center_here_2d_coordinate());
  }
  if (from.here_tile_id() != 0) {
    set_here_tile_id(from.here_tile_id());
  }
}

void LaneTopologyLayerTile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneTopologyLayerTile::CopyFrom(const LaneTopologyLayerTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.lanes.LaneTopologyLayerTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneTopologyLayerTile::IsInitialized() const {
  return true;
}

void LaneTopologyLayerTile::Swap(LaneTopologyLayerTile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneTopologyLayerTile::InternalSwap(LaneTopologyLayerTile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&lane_groups_starting_in_tile_)->InternalSwap(CastToBase(&other->lane_groups_starting_in_tile_));
  CastToBase(&lane_group_connectors_in_tile_)->InternalSwap(CastToBase(&other->lane_group_connectors_in_tile_));
  CastToBase(&intersecting_lane_group_refs_)->InternalSwap(CastToBase(&other->intersecting_lane_group_refs_));
  swap(tile_center_here_2d_coordinate_, other->tile_center_here_2d_coordinate_);
  swap(here_tile_id_, other->here_tile_id_);
}

::google::protobuf::Metadata LaneTopologyLayerTile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaneGroup_LaneGroupReferenceGeometry::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::lanes::_LaneGroup_LaneGroupReferenceGeometry_default_instance_._instance.get_mutable()->left_boundary_ = const_cast< ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset*>(
      ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset::internal_default_instance());
  ::com::here::pb::hdmap::external::v1::lanes::_LaneGroup_LaneGroupReferenceGeometry_default_instance_._instance.get_mutable()->right_boundary_ = const_cast< ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset*>(
      ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset::internal_default_instance());
}
class LaneGroup_LaneGroupReferenceGeometry::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset& left_boundary(const LaneGroup_LaneGroupReferenceGeometry* msg);
  static const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset& right_boundary(const LaneGroup_LaneGroupReferenceGeometry* msg);
};

const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset&
LaneGroup_LaneGroupReferenceGeometry::HasBitSetters::left_boundary(const LaneGroup_LaneGroupReferenceGeometry* msg) {
  return *msg->left_boundary_;
}
const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset&
LaneGroup_LaneGroupReferenceGeometry::HasBitSetters::right_boundary(const LaneGroup_LaneGroupReferenceGeometry* msg) {
  return *msg->right_boundary_;
}
void LaneGroup_LaneGroupReferenceGeometry::clear_left_boundary() {
  if (GetArenaNoVirtual() == nullptr && left_boundary_ != nullptr) {
    delete left_boundary_;
  }
  left_boundary_ = nullptr;
}
void LaneGroup_LaneGroupReferenceGeometry::clear_right_boundary() {
  if (GetArenaNoVirtual() == nullptr && right_boundary_ != nullptr) {
    delete right_boundary_;
  }
  right_boundary_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneGroup_LaneGroupReferenceGeometry::kLeftBoundaryFieldNumber;
const int LaneGroup_LaneGroupReferenceGeometry::kRightBoundaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneGroup_LaneGroupReferenceGeometry::LaneGroup_LaneGroupReferenceGeometry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
}
LaneGroup_LaneGroupReferenceGeometry::LaneGroup_LaneGroupReferenceGeometry(const LaneGroup_LaneGroupReferenceGeometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_boundary()) {
    left_boundary_ = new ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset(*from.left_boundary_);
  } else {
    left_boundary_ = nullptr;
  }
  if (from.has_right_boundary()) {
    right_boundary_ = new ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset(*from.right_boundary_);
  } else {
    right_boundary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
}

void LaneGroup_LaneGroupReferenceGeometry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaneGroup_LaneGroupReferenceGeometry_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base);
  ::memset(&left_boundary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_boundary_) -
      reinterpret_cast<char*>(&left_boundary_)) + sizeof(right_boundary_));
}

LaneGroup_LaneGroupReferenceGeometry::~LaneGroup_LaneGroupReferenceGeometry() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
  SharedDtor();
}

void LaneGroup_LaneGroupReferenceGeometry::SharedDtor() {
  if (this != internal_default_instance()) delete left_boundary_;
  if (this != internal_default_instance()) delete right_boundary_;
}

void LaneGroup_LaneGroupReferenceGeometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneGroup_LaneGroupReferenceGeometry& LaneGroup_LaneGroupReferenceGeometry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaneGroup_LaneGroupReferenceGeometry_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base);
  return *internal_default_instance();
}


void LaneGroup_LaneGroupReferenceGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && left_boundary_ != nullptr) {
    delete left_boundary_;
  }
  left_boundary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && right_boundary_ != nullptr) {
    delete right_boundary_;
  }
  right_boundary_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneGroup_LaneGroupReferenceGeometry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaneGroup_LaneGroupReferenceGeometry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset left_boundary = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset::_InternalParse;
        object = msg->mutable_left_boundary();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset right_boundary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset::_InternalParse;
        object = msg->mutable_right_boundary();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneGroup_LaneGroupReferenceGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset left_boundary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset right_boundary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneGroup_LaneGroupReferenceGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset left_boundary = 1;
  if (this->has_left_boundary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::left_boundary(this), output);
  }

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset right_boundary = 2;
  if (this->has_right_boundary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::right_boundary(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
}

::google::protobuf::uint8* LaneGroup_LaneGroupReferenceGeometry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset left_boundary = 1;
  if (this->has_left_boundary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::left_boundary(this), target);
  }

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset right_boundary = 2;
  if (this->has_right_boundary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::right_boundary(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
  return target;
}

size_t LaneGroup_LaneGroupReferenceGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset left_boundary = 1;
  if (this->has_left_boundary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_boundary_);
  }

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset right_boundary = 2;
  if (this->has_right_boundary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_boundary_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneGroup_LaneGroupReferenceGeometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneGroup_LaneGroupReferenceGeometry* source =
      ::google::protobuf::DynamicCastToGenerated<LaneGroup_LaneGroupReferenceGeometry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
    MergeFrom(*source);
  }
}

void LaneGroup_LaneGroupReferenceGeometry::MergeFrom(const LaneGroup_LaneGroupReferenceGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left_boundary()) {
    mutable_left_boundary()->::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset::MergeFrom(from.left_boundary());
  }
  if (from.has_right_boundary()) {
    mutable_right_boundary()->::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset::MergeFrom(from.right_boundary());
  }
}

void LaneGroup_LaneGroupReferenceGeometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneGroup_LaneGroupReferenceGeometry::CopyFrom(const LaneGroup_LaneGroupReferenceGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneGroup_LaneGroupReferenceGeometry::IsInitialized() const {
  return true;
}

void LaneGroup_LaneGroupReferenceGeometry::Swap(LaneGroup_LaneGroupReferenceGeometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneGroup_LaneGroupReferenceGeometry::InternalSwap(LaneGroup_LaneGroupReferenceGeometry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(left_boundary_, other->left_boundary_);
  swap(right_boundary_, other->right_boundary_);
}

::google::protobuf::Metadata LaneGroup_LaneGroupReferenceGeometry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaneGroup::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::lanes::_LaneGroup_default_instance_._instance.get_mutable()->end_lane_group_connector_ref_ = const_cast< ::com::here::pb::hdmap::external::v1::common::TiledLaneGroupConnectorReference*>(
      ::com::here::pb::hdmap::external::v1::common::TiledLaneGroupConnectorReference::internal_default_instance());
  ::com::here::pb::hdmap::external::v1::lanes::_LaneGroup_default_instance_._instance.get_mutable()->boundary_geometry_ = const_cast< ::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry*>(
      ::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry::internal_default_instance());
}
class LaneGroup::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::external::v1::common::TiledLaneGroupConnectorReference& end_lane_group_connector_ref(const LaneGroup* msg);
  static const ::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry& boundary_geometry(const LaneGroup* msg);
};

const ::com::here::pb::hdmap::external::v1::common::TiledLaneGroupConnectorReference&
LaneGroup::HasBitSetters::end_lane_group_connector_ref(const LaneGroup* msg) {
  return *msg->end_lane_group_connector_ref_;
}
const ::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry&
LaneGroup::HasBitSetters::boundary_geometry(const LaneGroup* msg) {
  return *msg->boundary_geometry_;
}
void LaneGroup::clear_end_lane_group_connector_ref() {
  if (GetArenaNoVirtual() == nullptr && end_lane_group_connector_ref_ != nullptr) {
    delete end_lane_group_connector_ref_;
  }
  end_lane_group_connector_ref_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneGroup::kLaneGroupIdFieldNumber;
const int LaneGroup::kStartLaneGroupConnectorRefFieldNumber;
const int LaneGroup::kEndLaneGroupConnectorRefFieldNumber;
const int LaneGroup::kLanesFieldNumber;
const int LaneGroup::kBoundaryGeometryFieldNumber;
const int LaneGroup::kIntersectsTilesFieldNumber;
const int LaneGroup::kLaneGroupLengthMetersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneGroup::LaneGroup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
}
LaneGroup::LaneGroup(const LaneGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      lanes_(from.lanes_),
      intersects_tiles_(from.intersects_tiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_end_lane_group_connector_ref()) {
    end_lane_group_connector_ref_ = new ::com::here::pb::hdmap::external::v1::common::TiledLaneGroupConnectorReference(*from.end_lane_group_connector_ref_);
  } else {
    end_lane_group_connector_ref_ = nullptr;
  }
  if (from.has_boundary_geometry()) {
    boundary_geometry_ = new ::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry(*from.boundary_geometry_);
  } else {
    boundary_geometry_ = nullptr;
  }
  ::memcpy(&lane_group_id_, &from.lane_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_group_length_meters_) -
    reinterpret_cast<char*>(&lane_group_id_)) + sizeof(lane_group_length_meters_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
}

void LaneGroup::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaneGroup_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base);
  ::memset(&end_lane_group_connector_ref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_group_length_meters_) -
      reinterpret_cast<char*>(&end_lane_group_connector_ref_)) + sizeof(lane_group_length_meters_));
}

LaneGroup::~LaneGroup() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
  SharedDtor();
}

void LaneGroup::SharedDtor() {
  if (this != internal_default_instance()) delete end_lane_group_connector_ref_;
  if (this != internal_default_instance()) delete boundary_geometry_;
}

void LaneGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneGroup& LaneGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaneGroup_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base);
  return *internal_default_instance();
}


void LaneGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lanes_.Clear();
  intersects_tiles_.Clear();
  if (GetArenaNoVirtual() == nullptr && end_lane_group_connector_ref_ != nullptr) {
    delete end_lane_group_connector_ref_;
  }
  end_lane_group_connector_ref_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && boundary_geometry_ != nullptr) {
    delete boundary_geometry_;
  }
  boundary_geometry_ = nullptr;
  ::memset(&lane_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_group_length_meters_) -
      reinterpret_cast<char*>(&lane_group_id_)) + sizeof(lane_group_length_meters_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneGroup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaneGroup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 lane_group_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_lane_group_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 start_lane_group_connector_ref = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_start_lane_group_connector_ref(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .com.here.pb.hdmap.external.v1.common.TiledLaneGroupConnectorReference end_lane_group_connector_ref = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::common::TiledLaneGroupConnectorReference::_InternalParse;
        object = msg->mutable_end_lane_group_connector_ref();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.lanes.Lane lanes = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::lanes::Lane::_InternalParse;
          object = msg->add_lanes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // .com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry boundary_geometry = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry::_InternalParse;
        object = msg->mutable_boundary_geometry();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated uint32 intersects_tiles = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 50) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_intersects_tiles();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        do {
          msg->add_intersects_tiles(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
        break;
      }
      // uint32 lane_group_length_meters = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_lane_group_length_meters(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 lane_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lane_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 start_lane_group_connector_ref = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_lane_group_connector_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.common.TiledLaneGroupConnectorReference end_lane_group_connector_ref = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_lane_group_connector_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.lanes.Lane lanes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lanes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry boundary_geometry = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_boundary_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 intersects_tiles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_intersects_tiles())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_intersects_tiles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lane_group_length_meters = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_group_length_meters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lane_group_id = 1;
  if (this->lane_group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lane_group_id(), output);
  }

  // uint64 start_lane_group_connector_ref = 2;
  if (this->start_lane_group_connector_ref() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_lane_group_connector_ref(), output);
  }

  // .com.here.pb.hdmap.external.v1.common.TiledLaneGroupConnectorReference end_lane_group_connector_ref = 3;
  if (this->has_end_lane_group_connector_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::end_lane_group_connector_ref(this), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.lanes.Lane lanes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lanes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->lanes(static_cast<int>(i)),
      output);
  }

  // .com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry boundary_geometry = 5;
  if (this->has_boundary_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::boundary_geometry(this), output);
  }

  // repeated uint32 intersects_tiles = 6;
  if (this->intersects_tiles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_intersects_tiles_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->intersects_tiles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->intersects_tiles(i), output);
  }

  // uint32 lane_group_length_meters = 7;
  if (this->lane_group_length_meters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lane_group_length_meters(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
}

::google::protobuf::uint8* LaneGroup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lane_group_id = 1;
  if (this->lane_group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lane_group_id(), target);
  }

  // uint64 start_lane_group_connector_ref = 2;
  if (this->start_lane_group_connector_ref() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_lane_group_connector_ref(), target);
  }

  // .com.here.pb.hdmap.external.v1.common.TiledLaneGroupConnectorReference end_lane_group_connector_ref = 3;
  if (this->has_end_lane_group_connector_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::end_lane_group_connector_ref(this), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.lanes.Lane lanes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lanes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->lanes(static_cast<int>(i)), target);
  }

  // .com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry boundary_geometry = 5;
  if (this->has_boundary_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::boundary_geometry(this), target);
  }

  // repeated uint32 intersects_tiles = 6;
  if (this->intersects_tiles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _intersects_tiles_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->intersects_tiles_, target);
  }

  // uint32 lane_group_length_meters = 7;
  if (this->lane_group_length_meters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lane_group_length_meters(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
  return target;
}

size_t LaneGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.lanes.Lane lanes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->lanes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lanes(static_cast<int>(i)));
    }
  }

  // repeated uint32 intersects_tiles = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->intersects_tiles_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _intersects_tiles_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .com.here.pb.hdmap.external.v1.common.TiledLaneGroupConnectorReference end_lane_group_connector_ref = 3;
  if (this->has_end_lane_group_connector_ref()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_lane_group_connector_ref_);
  }

  // .com.here.pb.hdmap.external.v1.lanes.LaneGroup.LaneGroupReferenceGeometry boundary_geometry = 5;
  if (this->has_boundary_geometry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *boundary_geometry_);
  }

  // uint64 lane_group_id = 1;
  if (this->lane_group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lane_group_id());
  }

  // uint64 start_lane_group_connector_ref = 2;
  if (this->start_lane_group_connector_ref() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_lane_group_connector_ref());
  }

  // uint32 lane_group_length_meters = 7;
  if (this->lane_group_length_meters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lane_group_length_meters());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneGroup* source =
      ::google::protobuf::DynamicCastToGenerated<LaneGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
    MergeFrom(*source);
  }
}

void LaneGroup::MergeFrom(const LaneGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lanes_.MergeFrom(from.lanes_);
  intersects_tiles_.MergeFrom(from.intersects_tiles_);
  if (from.has_end_lane_group_connector_ref()) {
    mutable_end_lane_group_connector_ref()->::com::here::pb::hdmap::external::v1::common::TiledLaneGroupConnectorReference::MergeFrom(from.end_lane_group_connector_ref());
  }
  if (from.has_boundary_geometry()) {
    mutable_boundary_geometry()->::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry::MergeFrom(from.boundary_geometry());
  }
  if (from.lane_group_id() != 0) {
    set_lane_group_id(from.lane_group_id());
  }
  if (from.start_lane_group_connector_ref() != 0) {
    set_start_lane_group_connector_ref(from.start_lane_group_connector_ref());
  }
  if (from.lane_group_length_meters() != 0) {
    set_lane_group_length_meters(from.lane_group_length_meters());
  }
}

void LaneGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneGroup::CopyFrom(const LaneGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.lanes.LaneGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneGroup::IsInitialized() const {
  return true;
}

void LaneGroup::Swap(LaneGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneGroup::InternalSwap(LaneGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&lanes_)->InternalSwap(CastToBase(&other->lanes_));
  intersects_tiles_.InternalSwap(&other->intersects_tiles_);
  swap(end_lane_group_connector_ref_, other->end_lane_group_connector_ref_);
  swap(boundary_geometry_, other->boundary_geometry_);
  swap(lane_group_id_, other->lane_group_id_);
  swap(start_lane_group_connector_ref_, other->start_lane_group_connector_ref_);
  swap(lane_group_length_meters_, other->lane_group_length_meters_);
}

::google::protobuf::Metadata LaneGroup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaneGroupConnector::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::lanes::_LaneGroupConnector_default_instance_._instance.get_mutable()->boundary_geometry_ = const_cast< ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset*>(
      ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset::internal_default_instance());
}
class LaneGroupConnector::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset& boundary_geometry(const LaneGroupConnector* msg);
};

const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset&
LaneGroupConnector::HasBitSetters::boundary_geometry(const LaneGroupConnector* msg) {
  return *msg->boundary_geometry_;
}
void LaneGroupConnector::clear_boundary_geometry() {
  if (GetArenaNoVirtual() == nullptr && boundary_geometry_ != nullptr) {
    delete boundary_geometry_;
  }
  boundary_geometry_ = nullptr;
}
void LaneGroupConnector::clear_connected_lane_group_refs() {
  connected_lane_group_refs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneGroupConnector::kLaneGroupConnectorIdFieldNumber;
const int LaneGroupConnector::kBoundaryGeometryFieldNumber;
const int LaneGroupConnector::kConnectedLaneGroupRefsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneGroupConnector::LaneGroupConnector()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
}
LaneGroupConnector::LaneGroupConnector(const LaneGroupConnector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      connected_lane_group_refs_(from.connected_lane_group_refs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_boundary_geometry()) {
    boundary_geometry_ = new ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset(*from.boundary_geometry_);
  } else {
    boundary_geometry_ = nullptr;
  }
  lane_group_connector_id_ = from.lane_group_connector_id_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
}

void LaneGroupConnector::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaneGroupConnector_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base);
  ::memset(&boundary_geometry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_group_connector_id_) -
      reinterpret_cast<char*>(&boundary_geometry_)) + sizeof(lane_group_connector_id_));
}

LaneGroupConnector::~LaneGroupConnector() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
  SharedDtor();
}

void LaneGroupConnector::SharedDtor() {
  if (this != internal_default_instance()) delete boundary_geometry_;
}

void LaneGroupConnector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneGroupConnector& LaneGroupConnector::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaneGroupConnector_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base);
  return *internal_default_instance();
}


void LaneGroupConnector::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connected_lane_group_refs_.Clear();
  if (GetArenaNoVirtual() == nullptr && boundary_geometry_ != nullptr) {
    delete boundary_geometry_;
  }
  boundary_geometry_ = nullptr;
  lane_group_connector_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneGroupConnector::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaneGroupConnector*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 lane_group_connector_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_lane_group_connector_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset boundary_geometry = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset::_InternalParse;
        object = msg->mutable_boundary_geometry();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.common.TiledLaneGroupReference connected_lane_group_refs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::common::TiledLaneGroupReference::_InternalParse;
          object = msg->add_connected_lane_group_refs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneGroupConnector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 lane_group_connector_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lane_group_connector_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset boundary_geometry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_boundary_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.common.TiledLaneGroupReference connected_lane_group_refs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_connected_lane_group_refs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneGroupConnector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lane_group_connector_id = 1;
  if (this->lane_group_connector_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lane_group_connector_id(), output);
  }

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset boundary_geometry = 2;
  if (this->has_boundary_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::boundary_geometry(this), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLaneGroupReference connected_lane_group_refs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connected_lane_group_refs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->connected_lane_group_refs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
}

::google::protobuf::uint8* LaneGroupConnector::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lane_group_connector_id = 1;
  if (this->lane_group_connector_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lane_group_connector_id(), target);
  }

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset boundary_geometry = 2;
  if (this->has_boundary_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::boundary_geometry(this), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLaneGroupReference connected_lane_group_refs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connected_lane_group_refs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->connected_lane_group_refs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
  return target;
}

size_t LaneGroupConnector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLaneGroupReference connected_lane_group_refs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->connected_lane_group_refs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connected_lane_group_refs(static_cast<int>(i)));
    }
  }

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset boundary_geometry = 2;
  if (this->has_boundary_geometry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *boundary_geometry_);
  }

  // uint64 lane_group_connector_id = 1;
  if (this->lane_group_connector_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lane_group_connector_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneGroupConnector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneGroupConnector* source =
      ::google::protobuf::DynamicCastToGenerated<LaneGroupConnector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
    MergeFrom(*source);
  }
}

void LaneGroupConnector::MergeFrom(const LaneGroupConnector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connected_lane_group_refs_.MergeFrom(from.connected_lane_group_refs_);
  if (from.has_boundary_geometry()) {
    mutable_boundary_geometry()->::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset::MergeFrom(from.boundary_geometry());
  }
  if (from.lane_group_connector_id() != 0) {
    set_lane_group_connector_id(from.lane_group_connector_id());
  }
}

void LaneGroupConnector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneGroupConnector::CopyFrom(const LaneGroupConnector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.lanes.LaneGroupConnector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneGroupConnector::IsInitialized() const {
  return true;
}

void LaneGroupConnector::Swap(LaneGroupConnector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneGroupConnector::InternalSwap(LaneGroupConnector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&connected_lane_group_refs_)->InternalSwap(CastToBase(&other->connected_lane_group_refs_));
  swap(boundary_geometry_, other->boundary_geometry_);
  swap(lane_group_connector_id_, other->lane_group_connector_id_);
}

::google::protobuf::Metadata LaneGroupConnector::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Lane::InitAsDefaultInstance() {
}
class Lane::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kStartLaneConnectorNumberFieldNumber;
const int Lane::kEndLaneConnectorNumberFieldNumber;
const int Lane::kIsTransitioningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.lanes.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_lane_connector_number_, &from.start_lane_connector_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_transitioning_) -
    reinterpret_cast<char*>(&start_lane_connector_number_)) + sizeof(is_transitioning_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.lanes.Lane)
}

void Lane::SharedCtor() {
  ::memset(&start_lane_connector_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_transitioning_) -
      reinterpret_cast<char*>(&start_lane_connector_number_)) + sizeof(is_transitioning_));
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.lanes.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
}

void Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lane& Lane::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Lane_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto.base);
  return *internal_default_instance();
}


void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.lanes.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_lane_connector_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_transitioning_) -
      reinterpret_cast<char*>(&start_lane_connector_number_)) + sizeof(is_transitioning_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Lane::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Lane*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 start_lane_connector_number = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_start_lane_connector_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 end_lane_connector_number = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_end_lane_connector_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_transitioning = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_transitioning(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.lanes.Lane)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 start_lane_connector_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_lane_connector_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_lane_connector_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_lane_connector_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_transitioning = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_transitioning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.lanes.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.lanes.Lane)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.lanes.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_lane_connector_number = 1;
  if (this->start_lane_connector_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_lane_connector_number(), output);
  }

  // uint32 end_lane_connector_number = 2;
  if (this->end_lane_connector_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end_lane_connector_number(), output);
  }

  // bool is_transitioning = 3;
  if (this->is_transitioning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_transitioning(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.lanes.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.lanes.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_lane_connector_number = 1;
  if (this->start_lane_connector_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_lane_connector_number(), target);
  }

  // uint32 end_lane_connector_number = 2;
  if (this->end_lane_connector_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end_lane_connector_number(), target);
  }

  // bool is_transitioning = 3;
  if (this->is_transitioning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_transitioning(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.lanes.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.lanes.Lane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 start_lane_connector_number = 1;
  if (this->start_lane_connector_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_lane_connector_number());
  }

  // uint32 end_lane_connector_number = 2;
  if (this->end_lane_connector_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_lane_connector_number());
  }

  // bool is_transitioning = 3;
  if (this->is_transitioning() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.lanes.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::DynamicCastToGenerated<Lane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.lanes.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.lanes.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.lanes.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_lane_connector_number() != 0) {
    set_start_lane_connector_number(from.start_lane_connector_number());
  }
  if (from.end_lane_connector_number() != 0) {
    set_end_lane_connector_number(from.end_lane_connector_number());
  }
  if (from.is_transitioning() != 0) {
    set_is_transitioning(from.is_transitioning());
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.lanes.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.lanes.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_lane_connector_number_, other->start_lane_connector_number_);
  swap(end_lane_connector_number_, other->end_lane_connector_number_);
  swap(is_transitioning_, other->is_transitioning_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dtopology_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lanes
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::lanes::LaneTopologyLayerTile* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::lanes::LaneTopologyLayerTile >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::lanes::LaneTopologyLayerTile >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::lanes::LaneGroup_LaneGroupReferenceGeometry >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::lanes::LaneGroup* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::lanes::LaneGroup >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::lanes::LaneGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::lanes::LaneGroupConnector* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::lanes::LaneGroupConnector >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::lanes::LaneGroupConnector >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::lanes::Lane* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::lanes::Lane >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::lanes::Lane >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
