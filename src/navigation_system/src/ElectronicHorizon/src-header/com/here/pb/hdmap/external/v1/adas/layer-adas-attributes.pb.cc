// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/external/v1/adas/layer-adas-attributes.proto

#include "com/here/pb/hdmap/external/v1/adas/layer-adas-attributes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AdasLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AdasElevationSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AdasSlopeSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NodeAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AdasIntersectionTraversalValues_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_NodeAttribution_IntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_AdasIntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_AdasLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ParametricRange_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TiledLinkReference_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CurvatureMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ElevationMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HeadingMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SlopeMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto;
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace adas {
class AdasAttributesLayerTileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdasAttributesLayerTile> _instance;
} _AdasAttributesLayerTile_default_instance_;
class LinkAttribution_ParametricAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinkAttribution_ParametricAttribution> _instance;
} _LinkAttribution_ParametricAttribution_default_instance_;
class LinkAttribution_PointAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinkAttribution_PointAttribution> _instance;
} _LinkAttribution_PointAttribution_default_instance_;
class LinkAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinkAttribution> _instance;
} _LinkAttribution_default_instance_;
class NodeAttribution_IntersectionTraversalAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeAttribution_IntersectionTraversalAttribution> _instance;
} _NodeAttribution_IntersectionTraversalAttribution_default_instance_;
class NodeAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeAttribution> _instance;
} _NodeAttribution_default_instance_;
class AdasLinkParametricAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdasLinkParametricAttribution> _instance;
  int link_geometry_accuracy_;
} _AdasLinkParametricAttribution_default_instance_;
class AdasLinkPointAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdasLinkPointAttribution> _instance;
  const ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure* link_point_curvature_;
  const ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure* link_point_heading_;
  const ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample* link_point_slope_;
  const ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample* link_point_elevation_;
} _AdasLinkPointAttribution_default_instance_;
class AdasIntersectionTraversalAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdasIntersectionTraversalAttribution> _instance;
  const ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues* intersection_traversal_values_;
  const ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample* intersection_exit_slope_;
  const ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample* intersection_elevation_;
} _AdasIntersectionTraversalAttribution_default_instance_;
class AdasIntersectionTraversalValuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdasIntersectionTraversalValues> _instance;
} _AdasIntersectionTraversalValues_default_instance_;
class AdasSlopeSampleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdasSlopeSample> _instance;
} _AdasSlopeSample_default_instance_;
class AdasElevationSampleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdasElevationSample> _instance;
} _AdasElevationSample_default_instance_;
}  // namespace adas
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
static void InitDefaultsAdasAttributesLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::adas::_AdasAttributesLayerTile_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::adas::AdasAttributesLayerTile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::adas::AdasAttributesLayerTile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AdasAttributesLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAdasAttributesLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto}, {
      &scc_info_LinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base,
      &scc_info_NodeAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base,}};

static void InitDefaultsLinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::adas::_LinkAttribution_ParametricAttribution_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::adas::LinkAttribution_ParametricAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::adas::LinkAttribution_ParametricAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto}, {
      &scc_info_ParametricRange_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto.base,
      &scc_info_AdasLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base,}};

static void InitDefaultsLinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::adas::_LinkAttribution_PointAttribution_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::adas::LinkAttribution_PointAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::adas::LinkAttribution_PointAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto}, {
      &scc_info_AdasLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base,}};

static void InitDefaultsLinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::adas::_LinkAttribution_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::adas::LinkAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::adas::LinkAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto}, {
      &scc_info_LinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base,
      &scc_info_LinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base,}};

static void InitDefaultsNodeAttribution_IntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::adas::_NodeAttribution_IntersectionTraversalAttribution_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::adas::NodeAttribution_IntersectionTraversalAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::adas::NodeAttribution_IntersectionTraversalAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NodeAttribution_IntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNodeAttribution_IntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto}, {
      &scc_info_TiledLinkReference_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto.base,
      &scc_info_AdasIntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base,}};

static void InitDefaultsNodeAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::adas::_NodeAttribution_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::adas::NodeAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::adas::NodeAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NodeAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNodeAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto}, {
      &scc_info_NodeAttribution_IntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base,}};

static void InitDefaultsAdasLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::adas::_AdasLinkParametricAttribution_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::adas::AdasLinkParametricAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::adas::AdasLinkParametricAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AdasLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAdasLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto}, {}};

static void InitDefaultsAdasLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::adas::_AdasLinkPointAttribution_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::adas::AdasLinkPointAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::adas::AdasLinkPointAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_AdasLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsAdasLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto}, {
      &scc_info_CurvatureMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto.base,
      &scc_info_HeadingMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto.base,
      &scc_info_AdasSlopeSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base,
      &scc_info_AdasElevationSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base,}};

static void InitDefaultsAdasIntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::adas::_AdasIntersectionTraversalAttribution_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_AdasIntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsAdasIntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto}, {
      &scc_info_AdasIntersectionTraversalValues_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base,
      &scc_info_AdasSlopeSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base,
      &scc_info_AdasElevationSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base,}};

static void InitDefaultsAdasIntersectionTraversalValues_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::adas::_AdasIntersectionTraversalValues_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AdasIntersectionTraversalValues_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAdasIntersectionTraversalValues_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto}, {
      &scc_info_CurvatureMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto.base,
      &scc_info_HeadingMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto.base,}};

static void InitDefaultsAdasSlopeSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::adas::_AdasSlopeSample_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AdasSlopeSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAdasSlopeSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto}, {
      &scc_info_SlopeMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto.base,}};

static void InitDefaultsAdasElevationSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::external::v1::adas::_AdasElevationSample_default_instance_;
    new (ptr) ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AdasElevationSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAdasElevationSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto}, {
      &scc_info_ElevationMeasure_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto.base,}};

void InitDefaults_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_AdasAttributesLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeAttribution_IntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdasLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdasLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdasIntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdasIntersectionTraversalValues_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdasSlopeSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdasElevationSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasAttributesLayerTile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasAttributesLayerTile, here_tile_id_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasAttributesLayerTile, link_attribution_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasAttributesLayerTile, node_attribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::LinkAttribution_ParametricAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::LinkAttribution_ParametricAttribution, applies_to_range_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::LinkAttribution_ParametricAttribution, applies_to_direction_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::LinkAttribution_ParametricAttribution, link_parametric_attribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::LinkAttribution_PointAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::LinkAttribution_PointAttribution, applies_to_location_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::LinkAttribution_PointAttribution, applies_to_direction_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::LinkAttribution_PointAttribution, link_point_attribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::LinkAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::LinkAttribution, link_id_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::LinkAttribution, parametric_attribution_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::LinkAttribution, point_attribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::NodeAttribution_IntersectionTraversalAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::NodeAttribution_IntersectionTraversalAttribution, from_link_refs_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::NodeAttribution_IntersectionTraversalAttribution, to_link_refs_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::NodeAttribution_IntersectionTraversalAttribution, node_attribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::NodeAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::NodeAttribution, node_id_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::NodeAttribution, intersection_traversal_attribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasLinkParametricAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasLinkParametricAttribution, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::here::pb::hdmap::external::v1::adas::AdasLinkParametricAttributionDefaultTypeInternal, link_geometry_accuracy_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasLinkParametricAttribution, attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasLinkPointAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasLinkPointAttribution, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::here::pb::hdmap::external::v1::adas::AdasLinkPointAttributionDefaultTypeInternal, link_point_curvature_),
  offsetof(::com::here::pb::hdmap::external::v1::adas::AdasLinkPointAttributionDefaultTypeInternal, link_point_heading_),
  offsetof(::com::here::pb::hdmap::external::v1::adas::AdasLinkPointAttributionDefaultTypeInternal, link_point_slope_),
  offsetof(::com::here::pb::hdmap::external::v1::adas::AdasLinkPointAttributionDefaultTypeInternal, link_point_elevation_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasLinkPointAttribution, attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalAttribution, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalAttributionDefaultTypeInternal, intersection_traversal_values_),
  offsetof(::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalAttributionDefaultTypeInternal, intersection_exit_slope_),
  offsetof(::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalAttributionDefaultTypeInternal, intersection_elevation_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalAttribution, attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues, curvature_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues, heading_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample, slope_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample, accuracy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasElevationSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasElevationSample, elevation_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::external::v1::adas::AdasElevationSample, accuracy_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::here::pb::hdmap::external::v1::adas::AdasAttributesLayerTile)},
  { 8, -1, sizeof(::com::here::pb::hdmap::external::v1::adas::LinkAttribution_ParametricAttribution)},
  { 16, -1, sizeof(::com::here::pb::hdmap::external::v1::adas::LinkAttribution_PointAttribution)},
  { 24, -1, sizeof(::com::here::pb::hdmap::external::v1::adas::LinkAttribution)},
  { 32, -1, sizeof(::com::here::pb::hdmap::external::v1::adas::NodeAttribution_IntersectionTraversalAttribution)},
  { 40, -1, sizeof(::com::here::pb::hdmap::external::v1::adas::NodeAttribution)},
  { 47, -1, sizeof(::com::here::pb::hdmap::external::v1::adas::AdasLinkParametricAttribution)},
  { 54, -1, sizeof(::com::here::pb::hdmap::external::v1::adas::AdasLinkPointAttribution)},
  { 64, -1, sizeof(::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalAttribution)},
  { 73, -1, sizeof(::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues)},
  { 80, -1, sizeof(::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample)},
  { 87, -1, sizeof(::com::here::pb::hdmap::external::v1::adas::AdasElevationSample)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::adas::_AdasAttributesLayerTile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::adas::_LinkAttribution_ParametricAttribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::adas::_LinkAttribution_PointAttribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::adas::_LinkAttribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::adas::_NodeAttribution_IntersectionTraversalAttribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::adas::_NodeAttribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::adas::_AdasLinkParametricAttribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::adas::_AdasLinkPointAttribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::adas::_AdasIntersectionTraversalAttribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::adas::_AdasIntersectionTraversalValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::adas::_AdasSlopeSample_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::external::v1::adas::_AdasElevationSample_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto = {
  {}, AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto, "com/here/pb/hdmap/external/v1/adas/layer-adas-attributes.proto", schemas,
  file_default_instances, TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto::offsets,
  file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto, 12, file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto, file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto,
};

const char descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[] =
  "\n>com/here/pb/hdmap/external/v1/adas/lay"
  "er-adas-attributes.proto\022\"com.here.pb.hd"
  "map.external.v1.adas\0321com/here/pb/hdmap/"
  "external/v1/common/common.proto\032-com/her"
  "e/pb/hdmap/shared/v1/adas/common.proto\"\315"
  "\001\n\027AdasAttributesLayerTile\022\024\n\014here_tile_"
  "id\030\001 \001(\r\022M\n\020link_attribution\030\002 \003(\01323.com"
  ".here.pb.hdmap.external.v1.adas.LinkAttr"
  "ibution\022M\n\020node_attribution\030\003 \003(\01323.com."
  "here.pb.hdmap.external.v1.adas.NodeAttri"
  "bution\"\377\005\n\017LinkAttribution\022\017\n\007link_id\030\001 "
  "\001(\r\022i\n\026parametric_attribution\030\002 \003(\0132I.co"
  "m.here.pb.hdmap.external.v1.adas.LinkAtt"
  "ribution.ParametricAttribution\022_\n\021point_"
  "attribution\030\003 \003(\0132D.com.here.pb.hdmap.ex"
  "ternal.v1.adas.LinkAttribution.PointAttr"
  "ibution\032\247\002\n\025ParametricAttribution\022O\n\020app"
  "lies_to_range\030\001 \001(\01325.com.here.pb.hdmap."
  "external.v1.common.ParametricRange\022U\n\024ap"
  "plies_to_direction\030\002 \001(\01627.com.here.pb.h"
  "dmap.external.v1.common.RelativeDirectio"
  "n\022f\n\033link_parametric_attribution\030\003 \003(\0132A"
  ".com.here.pb.hdmap.external.v1.adas.Adas"
  "LinkParametricAttribution\032\344\001\n\020PointAttri"
  "bution\022\033\n\023applies_to_location\030\001 \001(\001\022U\n\024a"
  "pplies_to_direction\030\002 \001(\01627.com.here.pb."
  "hdmap.external.v1.common.RelativeDirecti"
  "on\022\\\n\026link_point_attribution\030\003 \003(\0132<.com"
  ".here.pb.hdmap.external.v1.adas.AdasLink"
  "PointAttribution\"\320\003\n\017NodeAttribution\022\017\n\007"
  "node_id\030\001 \001(\r\022\200\001\n\"intersection_traversal"
  "_attribution\030\002 \003(\0132T.com.here.pb.hdmap.e"
  "xternal.v1.adas.NodeAttribution.Intersec"
  "tionTraversalAttribution\032\250\002\n Intersectio"
  "nTraversalAttribution\022P\n\016from_link_refs\030"
  "\001 \003(\01328.com.here.pb.hdmap.external.v1.co"
  "mmon.TiledLinkReference\022N\n\014to_link_refs\030"
  "\002 \003(\01328.com.here.pb.hdmap.external.v1.co"
  "mmon.TiledLinkReference\022b\n\020node_attribut"
  "ion\030\003 \003(\0132H.com.here.pb.hdmap.external.v"
  "1.adas.AdasIntersectionTraversalAttribut"
  "ion\"\210\001\n\035AdasLinkParametricAttribution\022Z\n"
  "\026link_geometry_accuracy\030\001 \001(\01628.com.here"
  ".pb.hdmap.external.v1.adas.LinkGeometryA"
  "ccuracyH\000B\013\n\tattribute\"\365\002\n\030AdasLinkPoint"
  "Attribution\022R\n\024link_point_curvature\030\001 \001("
  "\01322.com.here.pb.hdmap.shared.v1.adas.Cur"
  "vatureMeasureH\000\022N\n\022link_point_heading\030\002 "
  "\001(\01320.com.here.pb.hdmap.shared.v1.adas.H"
  "eadingMeasureH\000\022O\n\020link_point_slope\030\003 \001("
  "\01323.com.here.pb.hdmap.external.v1.adas.A"
  "dasSlopeSampleH\000\022W\n\024link_point_elevation"
  "\030\004 \001(\01327.com.here.pb.hdmap.external.v1.a"
  "das.AdasElevationSampleH\000B\013\n\tattribute\"\324"
  "\002\n$AdasIntersectionTraversalAttribution\022"
  "l\n\035intersection_traversal_values\030\001 \001(\0132C"
  ".com.here.pb.hdmap.external.v1.adas.Adas"
  "IntersectionTraversalValuesH\000\022V\n\027interse"
  "ction_exit_slope\030\002 \001(\01323.com.here.pb.hdm"
  "ap.external.v1.adas.AdasSlopeSampleH\000\022Y\n"
  "\026intersection_elevation\030\003 \001(\01327.com.here"
  ".pb.hdmap.external.v1.adas.AdasElevation"
  "SampleH\000B\013\n\tattribute\"\253\001\n\037AdasIntersecti"
  "onTraversalValues\022E\n\tcurvature\030\001 \001(\01322.c"
  "om.here.pb.hdmap.shared.v1.adas.Curvatur"
  "eMeasure\022A\n\007heading\030\002 \001(\01320.com.here.pb."
  "hdmap.shared.v1.adas.HeadingMeasure\"\236\001\n\017"
  "AdasSlopeSample\022=\n\005slope\030\001 \001(\0132..com.her"
  "e.pb.hdmap.shared.v1.adas.SlopeMeasure\022L"
  "\n\010accuracy\030\002 \001(\0162:.com.here.pb.hdmap.ext"
  "ernal.v1.adas.SlopeElevationAccuracy\"\252\001\n"
  "\023AdasElevationSample\022E\n\televation\030\001 \001(\0132"
  "2.com.here.pb.hdmap.shared.v1.adas.Eleva"
  "tionMeasure\022L\n\010accuracy\030\002 \001(\0162:.com.here"
  ".pb.hdmap.external.v1.adas.SlopeElevatio"
  "nAccuracy*Q\n\026SlopeElevationAccuracy\022\"\n\036S"
  "lopeElevationAccuracy_UNKNOWN\020\000\022\t\n\005BASIC"
  "\020\001\022\010\n\004HIGH\020\002*h\n\024LinkGeometryAccuracy\022 \n\034"
  "LinkGeometryAccuracy_UNKNOWN\020\000\022\022\n\016BASIC_"
  "GEOMETRY\020\001\022\032\n\026HIGH_ACCURACY_GEOMETRY\020\002b\006"
  "proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto = {
  false, InitDefaults_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto, 
  descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto,
  "com/here/pb/hdmap/external/v1/adas/layer-adas-attributes.proto", &assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto, 3206,
};

void AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto,
    ::AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fadas_2fcommon_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto = []() { AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto(); return true; }();
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace adas {
const ::google::protobuf::EnumDescriptor* SlopeElevationAccuracy_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[0];
}
bool SlopeElevationAccuracy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LinkGeometryAccuracy_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[1];
}
bool LinkGeometryAccuracy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AdasAttributesLayerTile::InitAsDefaultInstance() {
}
class AdasAttributesLayerTile::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdasAttributesLayerTile::kHereTileIdFieldNumber;
const int AdasAttributesLayerTile::kLinkAttributionFieldNumber;
const int AdasAttributesLayerTile::kNodeAttributionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdasAttributesLayerTile::AdasAttributesLayerTile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
}
AdasAttributesLayerTile::AdasAttributesLayerTile(const AdasAttributesLayerTile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      link_attribution_(from.link_attribution_),
      node_attribution_(from.node_attribution_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  here_tile_id_ = from.here_tile_id_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
}

void AdasAttributesLayerTile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AdasAttributesLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  here_tile_id_ = 0u;
}

AdasAttributesLayerTile::~AdasAttributesLayerTile() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
  SharedDtor();
}

void AdasAttributesLayerTile::SharedDtor() {
}

void AdasAttributesLayerTile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdasAttributesLayerTile& AdasAttributesLayerTile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AdasAttributesLayerTile_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void AdasAttributesLayerTile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_attribution_.Clear();
  node_attribution_.Clear();
  here_tile_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdasAttributesLayerTile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AdasAttributesLayerTile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 here_tile_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_here_tile_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution link_attribution = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::adas::LinkAttribution::_InternalParse;
          object = msg->add_link_attribution();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.adas.NodeAttribution node_attribution = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::adas::NodeAttribution::_InternalParse;
          object = msg->add_node_attribution();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdasAttributesLayerTile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 here_tile_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &here_tile_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution link_attribution = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_link_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.adas.NodeAttribution node_attribution = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdasAttributesLayerTile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->here_tile_id(), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution link_attribution = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->link_attribution(static_cast<int>(i)),
      output);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.NodeAttribution node_attribution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->node_attribution(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
}

::google::protobuf::uint8* AdasAttributesLayerTile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->here_tile_id(), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution link_attribution = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->link_attribution(static_cast<int>(i)), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.NodeAttribution node_attribution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->node_attribution(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
  return target;
}

size_t AdasAttributesLayerTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution link_attribution = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->link_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->link_attribution(static_cast<int>(i)));
    }
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.NodeAttribution node_attribution = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->node_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node_attribution(static_cast<int>(i)));
    }
  }

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->here_tile_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdasAttributesLayerTile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
  GOOGLE_DCHECK_NE(&from, this);
  const AdasAttributesLayerTile* source =
      ::google::protobuf::DynamicCastToGenerated<AdasAttributesLayerTile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
    MergeFrom(*source);
  }
}

void AdasAttributesLayerTile::MergeFrom(const AdasAttributesLayerTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  link_attribution_.MergeFrom(from.link_attribution_);
  node_attribution_.MergeFrom(from.node_attribution_);
  if (from.here_tile_id() != 0) {
    set_here_tile_id(from.here_tile_id());
  }
}

void AdasAttributesLayerTile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdasAttributesLayerTile::CopyFrom(const AdasAttributesLayerTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.adas.AdasAttributesLayerTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdasAttributesLayerTile::IsInitialized() const {
  return true;
}

void AdasAttributesLayerTile::Swap(AdasAttributesLayerTile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdasAttributesLayerTile::InternalSwap(AdasAttributesLayerTile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&link_attribution_)->InternalSwap(CastToBase(&other->link_attribution_));
  CastToBase(&node_attribution_)->InternalSwap(CastToBase(&other->node_attribution_));
  swap(here_tile_id_, other->here_tile_id_);
}

::google::protobuf::Metadata AdasAttributesLayerTile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LinkAttribution_ParametricAttribution::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::adas::_LinkAttribution_ParametricAttribution_default_instance_._instance.get_mutable()->applies_to_range_ = const_cast< ::com::here::pb::hdmap::external::v1::common::ParametricRange*>(
      ::com::here::pb::hdmap::external::v1::common::ParametricRange::internal_default_instance());
}
class LinkAttribution_ParametricAttribution::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::external::v1::common::ParametricRange& applies_to_range(const LinkAttribution_ParametricAttribution* msg);
};

const ::com::here::pb::hdmap::external::v1::common::ParametricRange&
LinkAttribution_ParametricAttribution::HasBitSetters::applies_to_range(const LinkAttribution_ParametricAttribution* msg) {
  return *msg->applies_to_range_;
}
void LinkAttribution_ParametricAttribution::clear_applies_to_range() {
  if (GetArenaNoVirtual() == nullptr && applies_to_range_ != nullptr) {
    delete applies_to_range_;
  }
  applies_to_range_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkAttribution_ParametricAttribution::kAppliesToRangeFieldNumber;
const int LinkAttribution_ParametricAttribution::kAppliesToDirectionFieldNumber;
const int LinkAttribution_ParametricAttribution::kLinkParametricAttributionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkAttribution_ParametricAttribution::LinkAttribution_ParametricAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
}
LinkAttribution_ParametricAttribution::LinkAttribution_ParametricAttribution(const LinkAttribution_ParametricAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      link_parametric_attribution_(from.link_parametric_attribution_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_applies_to_range()) {
    applies_to_range_ = new ::com::here::pb::hdmap::external::v1::common::ParametricRange(*from.applies_to_range_);
  } else {
    applies_to_range_ = nullptr;
  }
  applies_to_direction_ = from.applies_to_direction_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
}

void LinkAttribution_ParametricAttribution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::memset(&applies_to_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applies_to_direction_) -
      reinterpret_cast<char*>(&applies_to_range_)) + sizeof(applies_to_direction_));
}

LinkAttribution_ParametricAttribution::~LinkAttribution_ParametricAttribution() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
  SharedDtor();
}

void LinkAttribution_ParametricAttribution::SharedDtor() {
  if (this != internal_default_instance()) delete applies_to_range_;
}

void LinkAttribution_ParametricAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkAttribution_ParametricAttribution& LinkAttribution_ParametricAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LinkAttribution_ParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void LinkAttribution_ParametricAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_parametric_attribution_.Clear();
  if (GetArenaNoVirtual() == nullptr && applies_to_range_ != nullptr) {
    delete applies_to_range_;
  }
  applies_to_range_ = nullptr;
  applies_to_direction_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LinkAttribution_ParametricAttribution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LinkAttribution_ParametricAttribution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.external.v1.common.ParametricRange applies_to_range = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::common::ParametricRange::_InternalParse;
        object = msg->mutable_applies_to_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_applies_to_direction(static_cast<::com::here::pb::hdmap::external::v1::common::RelativeDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution link_parametric_attribution = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::adas::AdasLinkParametricAttribution::_InternalParse;
          object = msg->add_link_parametric_attribution();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LinkAttribution_ParametricAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.external.v1.common.ParametricRange applies_to_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_applies_to_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_applies_to_direction(static_cast< ::com::here::pb::hdmap::external::v1::common::RelativeDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution link_parametric_attribution = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_link_parametric_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LinkAttribution_ParametricAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.external.v1.common.ParametricRange applies_to_range = 1;
  if (this->has_applies_to_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::applies_to_range(this), output);
  }

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  if (this->applies_to_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->applies_to_direction(), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution link_parametric_attribution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_parametric_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->link_parametric_attribution(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
}

::google::protobuf::uint8* LinkAttribution_ParametricAttribution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.external.v1.common.ParametricRange applies_to_range = 1;
  if (this->has_applies_to_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::applies_to_range(this), target);
  }

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  if (this->applies_to_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->applies_to_direction(), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution link_parametric_attribution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_parametric_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->link_parametric_attribution(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
  return target;
}

size_t LinkAttribution_ParametricAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution link_parametric_attribution = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->link_parametric_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->link_parametric_attribution(static_cast<int>(i)));
    }
  }

  // .com.here.pb.hdmap.external.v1.common.ParametricRange applies_to_range = 1;
  if (this->has_applies_to_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *applies_to_range_);
  }

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  if (this->applies_to_direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->applies_to_direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkAttribution_ParametricAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkAttribution_ParametricAttribution* source =
      ::google::protobuf::DynamicCastToGenerated<LinkAttribution_ParametricAttribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
    MergeFrom(*source);
  }
}

void LinkAttribution_ParametricAttribution::MergeFrom(const LinkAttribution_ParametricAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  link_parametric_attribution_.MergeFrom(from.link_parametric_attribution_);
  if (from.has_applies_to_range()) {
    mutable_applies_to_range()->::com::here::pb::hdmap::external::v1::common::ParametricRange::MergeFrom(from.applies_to_range());
  }
  if (from.applies_to_direction() != 0) {
    set_applies_to_direction(from.applies_to_direction());
  }
}

void LinkAttribution_ParametricAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkAttribution_ParametricAttribution::CopyFrom(const LinkAttribution_ParametricAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkAttribution_ParametricAttribution::IsInitialized() const {
  return true;
}

void LinkAttribution_ParametricAttribution::Swap(LinkAttribution_ParametricAttribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkAttribution_ParametricAttribution::InternalSwap(LinkAttribution_ParametricAttribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&link_parametric_attribution_)->InternalSwap(CastToBase(&other->link_parametric_attribution_));
  swap(applies_to_range_, other->applies_to_range_);
  swap(applies_to_direction_, other->applies_to_direction_);
}

::google::protobuf::Metadata LinkAttribution_ParametricAttribution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LinkAttribution_PointAttribution::InitAsDefaultInstance() {
}
class LinkAttribution_PointAttribution::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkAttribution_PointAttribution::kAppliesToLocationFieldNumber;
const int LinkAttribution_PointAttribution::kAppliesToDirectionFieldNumber;
const int LinkAttribution_PointAttribution::kLinkPointAttributionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkAttribution_PointAttribution::LinkAttribution_PointAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
}
LinkAttribution_PointAttribution::LinkAttribution_PointAttribution(const LinkAttribution_PointAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      link_point_attribution_(from.link_point_attribution_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&applies_to_location_, &from.applies_to_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&applies_to_direction_) -
    reinterpret_cast<char*>(&applies_to_location_)) + sizeof(applies_to_direction_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
}

void LinkAttribution_PointAttribution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::memset(&applies_to_location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applies_to_direction_) -
      reinterpret_cast<char*>(&applies_to_location_)) + sizeof(applies_to_direction_));
}

LinkAttribution_PointAttribution::~LinkAttribution_PointAttribution() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
  SharedDtor();
}

void LinkAttribution_PointAttribution::SharedDtor() {
}

void LinkAttribution_PointAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkAttribution_PointAttribution& LinkAttribution_PointAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LinkAttribution_PointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void LinkAttribution_PointAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_point_attribution_.Clear();
  ::memset(&applies_to_location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applies_to_direction_) -
      reinterpret_cast<char*>(&applies_to_location_)) + sizeof(applies_to_direction_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LinkAttribution_PointAttribution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LinkAttribution_PointAttribution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double applies_to_location = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_applies_to_location(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_applies_to_direction(static_cast<::com::here::pb::hdmap::external::v1::common::RelativeDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution link_point_attribution = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::adas::AdasLinkPointAttribution::_InternalParse;
          object = msg->add_link_point_attribution();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LinkAttribution_PointAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double applies_to_location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &applies_to_location_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_applies_to_direction(static_cast< ::com::here::pb::hdmap::external::v1::common::RelativeDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution link_point_attribution = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_link_point_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LinkAttribution_PointAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double applies_to_location = 1;
  if (this->applies_to_location() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->applies_to_location(), output);
  }

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  if (this->applies_to_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->applies_to_direction(), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution link_point_attribution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_point_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->link_point_attribution(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
}

::google::protobuf::uint8* LinkAttribution_PointAttribution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double applies_to_location = 1;
  if (this->applies_to_location() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->applies_to_location(), target);
  }

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  if (this->applies_to_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->applies_to_direction(), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution link_point_attribution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_point_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->link_point_attribution(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
  return target;
}

size_t LinkAttribution_PointAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution link_point_attribution = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->link_point_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->link_point_attribution(static_cast<int>(i)));
    }
  }

  // double applies_to_location = 1;
  if (this->applies_to_location() != 0) {
    total_size += 1 + 8;
  }

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  if (this->applies_to_direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->applies_to_direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkAttribution_PointAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkAttribution_PointAttribution* source =
      ::google::protobuf::DynamicCastToGenerated<LinkAttribution_PointAttribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
    MergeFrom(*source);
  }
}

void LinkAttribution_PointAttribution::MergeFrom(const LinkAttribution_PointAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  link_point_attribution_.MergeFrom(from.link_point_attribution_);
  if (from.applies_to_location() != 0) {
    set_applies_to_location(from.applies_to_location());
  }
  if (from.applies_to_direction() != 0) {
    set_applies_to_direction(from.applies_to_direction());
  }
}

void LinkAttribution_PointAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkAttribution_PointAttribution::CopyFrom(const LinkAttribution_PointAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkAttribution_PointAttribution::IsInitialized() const {
  return true;
}

void LinkAttribution_PointAttribution::Swap(LinkAttribution_PointAttribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkAttribution_PointAttribution::InternalSwap(LinkAttribution_PointAttribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&link_point_attribution_)->InternalSwap(CastToBase(&other->link_point_attribution_));
  swap(applies_to_location_, other->applies_to_location_);
  swap(applies_to_direction_, other->applies_to_direction_);
}

::google::protobuf::Metadata LinkAttribution_PointAttribution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LinkAttribution::InitAsDefaultInstance() {
}
class LinkAttribution::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkAttribution::kLinkIdFieldNumber;
const int LinkAttribution::kParametricAttributionFieldNumber;
const int LinkAttribution::kPointAttributionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkAttribution::LinkAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
}
LinkAttribution::LinkAttribution(const LinkAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      parametric_attribution_(from.parametric_attribution_),
      point_attribution_(from.point_attribution_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  link_id_ = from.link_id_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
}

void LinkAttribution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  link_id_ = 0u;
}

LinkAttribution::~LinkAttribution() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
  SharedDtor();
}

void LinkAttribution::SharedDtor() {
}

void LinkAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkAttribution& LinkAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LinkAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void LinkAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parametric_attribution_.Clear();
  point_attribution_.Clear();
  link_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LinkAttribution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LinkAttribution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 link_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_link_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution parametric_attribution = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::adas::LinkAttribution_ParametricAttribution::_InternalParse;
          object = msg->add_parametric_attribution();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution point_attribution = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::adas::LinkAttribution_PointAttribution::_InternalParse;
          object = msg->add_point_attribution();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LinkAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 link_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution parametric_attribution = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_parametric_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution point_attribution = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LinkAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 link_id = 1;
  if (this->link_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->link_id(), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution parametric_attribution = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parametric_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->parametric_attribution(static_cast<int>(i)),
      output);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution point_attribution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->point_attribution(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
}

::google::protobuf::uint8* LinkAttribution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 link_id = 1;
  if (this->link_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->link_id(), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution parametric_attribution = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parametric_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->parametric_attribution(static_cast<int>(i)), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution point_attribution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->point_attribution(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
  return target;
}

size_t LinkAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution.ParametricAttribution parametric_attribution = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->parametric_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->parametric_attribution(static_cast<int>(i)));
    }
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.LinkAttribution.PointAttribution point_attribution = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->point_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point_attribution(static_cast<int>(i)));
    }
  }

  // uint32 link_id = 1;
  if (this->link_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->link_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkAttribution* source =
      ::google::protobuf::DynamicCastToGenerated<LinkAttribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
    MergeFrom(*source);
  }
}

void LinkAttribution::MergeFrom(const LinkAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parametric_attribution_.MergeFrom(from.parametric_attribution_);
  point_attribution_.MergeFrom(from.point_attribution_);
  if (from.link_id() != 0) {
    set_link_id(from.link_id());
  }
}

void LinkAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkAttribution::CopyFrom(const LinkAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.adas.LinkAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkAttribution::IsInitialized() const {
  return true;
}

void LinkAttribution::Swap(LinkAttribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkAttribution::InternalSwap(LinkAttribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&parametric_attribution_)->InternalSwap(CastToBase(&other->parametric_attribution_));
  CastToBase(&point_attribution_)->InternalSwap(CastToBase(&other->point_attribution_));
  swap(link_id_, other->link_id_);
}

::google::protobuf::Metadata LinkAttribution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeAttribution_IntersectionTraversalAttribution::InitAsDefaultInstance() {
}
class NodeAttribution_IntersectionTraversalAttribution::HasBitSetters {
 public:
};

void NodeAttribution_IntersectionTraversalAttribution::clear_from_link_refs() {
  from_link_refs_.Clear();
}
void NodeAttribution_IntersectionTraversalAttribution::clear_to_link_refs() {
  to_link_refs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeAttribution_IntersectionTraversalAttribution::kFromLinkRefsFieldNumber;
const int NodeAttribution_IntersectionTraversalAttribution::kToLinkRefsFieldNumber;
const int NodeAttribution_IntersectionTraversalAttribution::kNodeAttributionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeAttribution_IntersectionTraversalAttribution::NodeAttribution_IntersectionTraversalAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
}
NodeAttribution_IntersectionTraversalAttribution::NodeAttribution_IntersectionTraversalAttribution(const NodeAttribution_IntersectionTraversalAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      from_link_refs_(from.from_link_refs_),
      to_link_refs_(from.to_link_refs_),
      node_attribution_(from.node_attribution_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
}

void NodeAttribution_IntersectionTraversalAttribution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeAttribution_IntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
}

NodeAttribution_IntersectionTraversalAttribution::~NodeAttribution_IntersectionTraversalAttribution() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
  SharedDtor();
}

void NodeAttribution_IntersectionTraversalAttribution::SharedDtor() {
}

void NodeAttribution_IntersectionTraversalAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeAttribution_IntersectionTraversalAttribution& NodeAttribution_IntersectionTraversalAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeAttribution_IntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void NodeAttribution_IntersectionTraversalAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_link_refs_.Clear();
  to_link_refs_.Clear();
  node_attribution_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeAttribution_IntersectionTraversalAttribution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeAttribution_IntersectionTraversalAttribution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference from_link_refs = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::common::TiledLinkReference::_InternalParse;
          object = msg->add_from_link_refs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference to_link_refs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::common::TiledLinkReference::_InternalParse;
          object = msg->add_to_link_refs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution node_attribution = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalAttribution::_InternalParse;
          object = msg->add_node_attribution();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeAttribution_IntersectionTraversalAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference from_link_refs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_from_link_refs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference to_link_refs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_to_link_refs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution node_attribution = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeAttribution_IntersectionTraversalAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference from_link_refs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->from_link_refs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->from_link_refs(static_cast<int>(i)),
      output);
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference to_link_refs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->to_link_refs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->to_link_refs(static_cast<int>(i)),
      output);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution node_attribution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->node_attribution(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
}

::google::protobuf::uint8* NodeAttribution_IntersectionTraversalAttribution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference from_link_refs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->from_link_refs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->from_link_refs(static_cast<int>(i)), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference to_link_refs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->to_link_refs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->to_link_refs(static_cast<int>(i)), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution node_attribution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->node_attribution(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
  return target;
}

size_t NodeAttribution_IntersectionTraversalAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference from_link_refs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->from_link_refs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->from_link_refs(static_cast<int>(i)));
    }
  }

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference to_link_refs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->to_link_refs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->to_link_refs(static_cast<int>(i)));
    }
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution node_attribution = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->node_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node_attribution(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeAttribution_IntersectionTraversalAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeAttribution_IntersectionTraversalAttribution* source =
      ::google::protobuf::DynamicCastToGenerated<NodeAttribution_IntersectionTraversalAttribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
    MergeFrom(*source);
  }
}

void NodeAttribution_IntersectionTraversalAttribution::MergeFrom(const NodeAttribution_IntersectionTraversalAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  from_link_refs_.MergeFrom(from.from_link_refs_);
  to_link_refs_.MergeFrom(from.to_link_refs_);
  node_attribution_.MergeFrom(from.node_attribution_);
}

void NodeAttribution_IntersectionTraversalAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeAttribution_IntersectionTraversalAttribution::CopyFrom(const NodeAttribution_IntersectionTraversalAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeAttribution_IntersectionTraversalAttribution::IsInitialized() const {
  return true;
}

void NodeAttribution_IntersectionTraversalAttribution::Swap(NodeAttribution_IntersectionTraversalAttribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeAttribution_IntersectionTraversalAttribution::InternalSwap(NodeAttribution_IntersectionTraversalAttribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&from_link_refs_)->InternalSwap(CastToBase(&other->from_link_refs_));
  CastToBase(&to_link_refs_)->InternalSwap(CastToBase(&other->to_link_refs_));
  CastToBase(&node_attribution_)->InternalSwap(CastToBase(&other->node_attribution_));
}

::google::protobuf::Metadata NodeAttribution_IntersectionTraversalAttribution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeAttribution::InitAsDefaultInstance() {
}
class NodeAttribution::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeAttribution::kNodeIdFieldNumber;
const int NodeAttribution::kIntersectionTraversalAttributionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeAttribution::NodeAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
}
NodeAttribution::NodeAttribution(const NodeAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      intersection_traversal_attribution_(from.intersection_traversal_attribution_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
}

void NodeAttribution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  node_id_ = 0u;
}

NodeAttribution::~NodeAttribution() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
  SharedDtor();
}

void NodeAttribution::SharedDtor() {
}

void NodeAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeAttribution& NodeAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void NodeAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intersection_traversal_attribution_.Clear();
  node_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeAttribution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeAttribution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 node_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution intersection_traversal_attribution = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::here::pb::hdmap::external::v1::adas::NodeAttribution_IntersectionTraversalAttribution::_InternalParse;
          object = msg->add_intersection_traversal_attribution();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution intersection_traversal_attribution = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_intersection_traversal_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_id(), output);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution intersection_traversal_attribution = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intersection_traversal_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->intersection_traversal_attribution(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
}

::google::protobuf::uint8* NodeAttribution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_id(), target);
  }

  // repeated .com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution intersection_traversal_attribution = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intersection_traversal_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->intersection_traversal_attribution(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
  return target;
}

size_t NodeAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.here.pb.hdmap.external.v1.adas.NodeAttribution.IntersectionTraversalAttribution intersection_traversal_attribution = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->intersection_traversal_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->intersection_traversal_attribution(static_cast<int>(i)));
    }
  }

  // uint32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeAttribution* source =
      ::google::protobuf::DynamicCastToGenerated<NodeAttribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
    MergeFrom(*source);
  }
}

void NodeAttribution::MergeFrom(const NodeAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intersection_traversal_attribution_.MergeFrom(from.intersection_traversal_attribution_);
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void NodeAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeAttribution::CopyFrom(const NodeAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.adas.NodeAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeAttribution::IsInitialized() const {
  return true;
}

void NodeAttribution::Swap(NodeAttribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeAttribution::InternalSwap(NodeAttribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&intersection_traversal_attribution_)->InternalSwap(CastToBase(&other->intersection_traversal_attribution_));
  swap(node_id_, other->node_id_);
}

::google::protobuf::Metadata NodeAttribution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AdasLinkParametricAttribution::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::adas::_AdasLinkParametricAttribution_default_instance_.link_geometry_accuracy_ = 0;
}
class AdasLinkParametricAttribution::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdasLinkParametricAttribution::kLinkGeometryAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdasLinkParametricAttribution::AdasLinkParametricAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
}
AdasLinkParametricAttribution::AdasLinkParametricAttribution(const AdasLinkParametricAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_attribute();
  switch (from.attribute_case()) {
    case kLinkGeometryAccuracy: {
      set_link_geometry_accuracy(from.link_geometry_accuracy());
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
}

void AdasLinkParametricAttribution::SharedCtor() {
  clear_has_attribute();
}

AdasLinkParametricAttribution::~AdasLinkParametricAttribution() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
  SharedDtor();
}

void AdasLinkParametricAttribution::SharedDtor() {
  if (has_attribute()) {
    clear_attribute();
  }
}

void AdasLinkParametricAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdasLinkParametricAttribution& AdasLinkParametricAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AdasLinkParametricAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void AdasLinkParametricAttribution::clear_attribute() {
// @@protoc_insertion_point(one_of_clear_start:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
  switch (attribute_case()) {
    case kLinkGeometryAccuracy: {
      // No need to clear
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATTRIBUTE_NOT_SET;
}


void AdasLinkParametricAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_attribute();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdasLinkParametricAttribution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AdasLinkParametricAttribution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.external.v1.adas.LinkGeometryAccuracy link_geometry_accuracy = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_link_geometry_accuracy(static_cast<::com::here::pb::hdmap::external::v1::adas::LinkGeometryAccuracy>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdasLinkParametricAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.external.v1.adas.LinkGeometryAccuracy link_geometry_accuracy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_link_geometry_accuracy(static_cast< ::com::here::pb::hdmap::external::v1::adas::LinkGeometryAccuracy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdasLinkParametricAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.external.v1.adas.LinkGeometryAccuracy link_geometry_accuracy = 1;
  if (has_link_geometry_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->link_geometry_accuracy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
}

::google::protobuf::uint8* AdasLinkParametricAttribution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.external.v1.adas.LinkGeometryAccuracy link_geometry_accuracy = 1;
  if (has_link_geometry_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->link_geometry_accuracy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
  return target;
}

size_t AdasLinkParametricAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (attribute_case()) {
    // .com.here.pb.hdmap.external.v1.adas.LinkGeometryAccuracy link_geometry_accuracy = 1;
    case kLinkGeometryAccuracy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->link_geometry_accuracy());
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdasLinkParametricAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const AdasLinkParametricAttribution* source =
      ::google::protobuf::DynamicCastToGenerated<AdasLinkParametricAttribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
    MergeFrom(*source);
  }
}

void AdasLinkParametricAttribution::MergeFrom(const AdasLinkParametricAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.attribute_case()) {
    case kLinkGeometryAccuracy: {
      set_link_geometry_accuracy(from.link_geometry_accuracy());
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
}

void AdasLinkParametricAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdasLinkParametricAttribution::CopyFrom(const AdasLinkParametricAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.adas.AdasLinkParametricAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdasLinkParametricAttribution::IsInitialized() const {
  return true;
}

void AdasLinkParametricAttribution::Swap(AdasLinkParametricAttribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdasLinkParametricAttribution::InternalSwap(AdasLinkParametricAttribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attribute_, other->attribute_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata AdasLinkParametricAttribution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AdasLinkPointAttribution::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::adas::_AdasLinkPointAttribution_default_instance_.link_point_curvature_ = const_cast< ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure*>(
      ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure::internal_default_instance());
  ::com::here::pb::hdmap::external::v1::adas::_AdasLinkPointAttribution_default_instance_.link_point_heading_ = const_cast< ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure*>(
      ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure::internal_default_instance());
  ::com::here::pb::hdmap::external::v1::adas::_AdasLinkPointAttribution_default_instance_.link_point_slope_ = const_cast< ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample*>(
      ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample::internal_default_instance());
  ::com::here::pb::hdmap::external::v1::adas::_AdasLinkPointAttribution_default_instance_.link_point_elevation_ = const_cast< ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample*>(
      ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample::internal_default_instance());
}
class AdasLinkPointAttribution::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure& link_point_curvature(const AdasLinkPointAttribution* msg);
  static const ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure& link_point_heading(const AdasLinkPointAttribution* msg);
  static const ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample& link_point_slope(const AdasLinkPointAttribution* msg);
  static const ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample& link_point_elevation(const AdasLinkPointAttribution* msg);
};

const ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure&
AdasLinkPointAttribution::HasBitSetters::link_point_curvature(const AdasLinkPointAttribution* msg) {
  return *msg->attribute_.link_point_curvature_;
}
const ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure&
AdasLinkPointAttribution::HasBitSetters::link_point_heading(const AdasLinkPointAttribution* msg) {
  return *msg->attribute_.link_point_heading_;
}
const ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample&
AdasLinkPointAttribution::HasBitSetters::link_point_slope(const AdasLinkPointAttribution* msg) {
  return *msg->attribute_.link_point_slope_;
}
const ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample&
AdasLinkPointAttribution::HasBitSetters::link_point_elevation(const AdasLinkPointAttribution* msg) {
  return *msg->attribute_.link_point_elevation_;
}
void AdasLinkPointAttribution::set_allocated_link_point_curvature(::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure* link_point_curvature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (link_point_curvature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link_point_curvature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, link_point_curvature, submessage_arena);
    }
    set_has_link_point_curvature();
    attribute_.link_point_curvature_ = link_point_curvature;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution.link_point_curvature)
}
void AdasLinkPointAttribution::clear_link_point_curvature() {
  if (has_link_point_curvature()) {
    delete attribute_.link_point_curvature_;
    clear_has_attribute();
  }
}
void AdasLinkPointAttribution::set_allocated_link_point_heading(::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure* link_point_heading) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (link_point_heading) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link_point_heading = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, link_point_heading, submessage_arena);
    }
    set_has_link_point_heading();
    attribute_.link_point_heading_ = link_point_heading;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution.link_point_heading)
}
void AdasLinkPointAttribution::clear_link_point_heading() {
  if (has_link_point_heading()) {
    delete attribute_.link_point_heading_;
    clear_has_attribute();
  }
}
void AdasLinkPointAttribution::set_allocated_link_point_slope(::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample* link_point_slope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (link_point_slope) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link_point_slope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, link_point_slope, submessage_arena);
    }
    set_has_link_point_slope();
    attribute_.link_point_slope_ = link_point_slope;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution.link_point_slope)
}
void AdasLinkPointAttribution::set_allocated_link_point_elevation(::com::here::pb::hdmap::external::v1::adas::AdasElevationSample* link_point_elevation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (link_point_elevation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link_point_elevation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, link_point_elevation, submessage_arena);
    }
    set_has_link_point_elevation();
    attribute_.link_point_elevation_ = link_point_elevation;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution.link_point_elevation)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdasLinkPointAttribution::kLinkPointCurvatureFieldNumber;
const int AdasLinkPointAttribution::kLinkPointHeadingFieldNumber;
const int AdasLinkPointAttribution::kLinkPointSlopeFieldNumber;
const int AdasLinkPointAttribution::kLinkPointElevationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdasLinkPointAttribution::AdasLinkPointAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
}
AdasLinkPointAttribution::AdasLinkPointAttribution(const AdasLinkPointAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_attribute();
  switch (from.attribute_case()) {
    case kLinkPointCurvature: {
      mutable_link_point_curvature()->::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure::MergeFrom(from.link_point_curvature());
      break;
    }
    case kLinkPointHeading: {
      mutable_link_point_heading()->::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure::MergeFrom(from.link_point_heading());
      break;
    }
    case kLinkPointSlope: {
      mutable_link_point_slope()->::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample::MergeFrom(from.link_point_slope());
      break;
    }
    case kLinkPointElevation: {
      mutable_link_point_elevation()->::com::here::pb::hdmap::external::v1::adas::AdasElevationSample::MergeFrom(from.link_point_elevation());
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
}

void AdasLinkPointAttribution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AdasLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  clear_has_attribute();
}

AdasLinkPointAttribution::~AdasLinkPointAttribution() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
  SharedDtor();
}

void AdasLinkPointAttribution::SharedDtor() {
  if (has_attribute()) {
    clear_attribute();
  }
}

void AdasLinkPointAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdasLinkPointAttribution& AdasLinkPointAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AdasLinkPointAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void AdasLinkPointAttribution::clear_attribute() {
// @@protoc_insertion_point(one_of_clear_start:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
  switch (attribute_case()) {
    case kLinkPointCurvature: {
      delete attribute_.link_point_curvature_;
      break;
    }
    case kLinkPointHeading: {
      delete attribute_.link_point_heading_;
      break;
    }
    case kLinkPointSlope: {
      delete attribute_.link_point_slope_;
      break;
    }
    case kLinkPointElevation: {
      delete attribute_.link_point_elevation_;
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATTRIBUTE_NOT_SET;
}


void AdasLinkPointAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_attribute();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdasLinkPointAttribution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AdasLinkPointAttribution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure link_point_curvature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure::_InternalParse;
        object = msg->mutable_link_point_curvature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.adas.HeadingMeasure link_point_heading = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure::_InternalParse;
        object = msg->mutable_link_point_heading();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.external.v1.adas.AdasSlopeSample link_point_slope = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample::_InternalParse;
        object = msg->mutable_link_point_slope();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.external.v1.adas.AdasElevationSample link_point_elevation = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample::_InternalParse;
        object = msg->mutable_link_point_elevation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdasLinkPointAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure link_point_curvature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_link_point_curvature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.adas.HeadingMeasure link_point_heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_link_point_heading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.adas.AdasSlopeSample link_point_slope = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_link_point_slope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.adas.AdasElevationSample link_point_elevation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_link_point_elevation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdasLinkPointAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure link_point_curvature = 1;
  if (has_link_point_curvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::link_point_curvature(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.adas.HeadingMeasure link_point_heading = 2;
  if (has_link_point_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::link_point_heading(this), output);
  }

  // .com.here.pb.hdmap.external.v1.adas.AdasSlopeSample link_point_slope = 3;
  if (has_link_point_slope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::link_point_slope(this), output);
  }

  // .com.here.pb.hdmap.external.v1.adas.AdasElevationSample link_point_elevation = 4;
  if (has_link_point_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::link_point_elevation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
}

::google::protobuf::uint8* AdasLinkPointAttribution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure link_point_curvature = 1;
  if (has_link_point_curvature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::link_point_curvature(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.adas.HeadingMeasure link_point_heading = 2;
  if (has_link_point_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::link_point_heading(this), target);
  }

  // .com.here.pb.hdmap.external.v1.adas.AdasSlopeSample link_point_slope = 3;
  if (has_link_point_slope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::link_point_slope(this), target);
  }

  // .com.here.pb.hdmap.external.v1.adas.AdasElevationSample link_point_elevation = 4;
  if (has_link_point_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::link_point_elevation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
  return target;
}

size_t AdasLinkPointAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (attribute_case()) {
    // .com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure link_point_curvature = 1;
    case kLinkPointCurvature: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.link_point_curvature_);
      break;
    }
    // .com.here.pb.hdmap.shared.v1.adas.HeadingMeasure link_point_heading = 2;
    case kLinkPointHeading: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.link_point_heading_);
      break;
    }
    // .com.here.pb.hdmap.external.v1.adas.AdasSlopeSample link_point_slope = 3;
    case kLinkPointSlope: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.link_point_slope_);
      break;
    }
    // .com.here.pb.hdmap.external.v1.adas.AdasElevationSample link_point_elevation = 4;
    case kLinkPointElevation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.link_point_elevation_);
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdasLinkPointAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const AdasLinkPointAttribution* source =
      ::google::protobuf::DynamicCastToGenerated<AdasLinkPointAttribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
    MergeFrom(*source);
  }
}

void AdasLinkPointAttribution::MergeFrom(const AdasLinkPointAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.attribute_case()) {
    case kLinkPointCurvature: {
      mutable_link_point_curvature()->::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure::MergeFrom(from.link_point_curvature());
      break;
    }
    case kLinkPointHeading: {
      mutable_link_point_heading()->::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure::MergeFrom(from.link_point_heading());
      break;
    }
    case kLinkPointSlope: {
      mutable_link_point_slope()->::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample::MergeFrom(from.link_point_slope());
      break;
    }
    case kLinkPointElevation: {
      mutable_link_point_elevation()->::com::here::pb::hdmap::external::v1::adas::AdasElevationSample::MergeFrom(from.link_point_elevation());
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
}

void AdasLinkPointAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdasLinkPointAttribution::CopyFrom(const AdasLinkPointAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.adas.AdasLinkPointAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdasLinkPointAttribution::IsInitialized() const {
  return true;
}

void AdasLinkPointAttribution::Swap(AdasLinkPointAttribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdasLinkPointAttribution::InternalSwap(AdasLinkPointAttribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attribute_, other->attribute_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata AdasLinkPointAttribution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AdasIntersectionTraversalAttribution::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::adas::_AdasIntersectionTraversalAttribution_default_instance_.intersection_traversal_values_ = const_cast< ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues*>(
      ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues::internal_default_instance());
  ::com::here::pb::hdmap::external::v1::adas::_AdasIntersectionTraversalAttribution_default_instance_.intersection_exit_slope_ = const_cast< ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample*>(
      ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample::internal_default_instance());
  ::com::here::pb::hdmap::external::v1::adas::_AdasIntersectionTraversalAttribution_default_instance_.intersection_elevation_ = const_cast< ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample*>(
      ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample::internal_default_instance());
}
class AdasIntersectionTraversalAttribution::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues& intersection_traversal_values(const AdasIntersectionTraversalAttribution* msg);
  static const ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample& intersection_exit_slope(const AdasIntersectionTraversalAttribution* msg);
  static const ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample& intersection_elevation(const AdasIntersectionTraversalAttribution* msg);
};

const ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues&
AdasIntersectionTraversalAttribution::HasBitSetters::intersection_traversal_values(const AdasIntersectionTraversalAttribution* msg) {
  return *msg->attribute_.intersection_traversal_values_;
}
const ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample&
AdasIntersectionTraversalAttribution::HasBitSetters::intersection_exit_slope(const AdasIntersectionTraversalAttribution* msg) {
  return *msg->attribute_.intersection_exit_slope_;
}
const ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample&
AdasIntersectionTraversalAttribution::HasBitSetters::intersection_elevation(const AdasIntersectionTraversalAttribution* msg) {
  return *msg->attribute_.intersection_elevation_;
}
void AdasIntersectionTraversalAttribution::set_allocated_intersection_traversal_values(::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues* intersection_traversal_values) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (intersection_traversal_values) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intersection_traversal_values = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intersection_traversal_values, submessage_arena);
    }
    set_has_intersection_traversal_values();
    attribute_.intersection_traversal_values_ = intersection_traversal_values;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution.intersection_traversal_values)
}
void AdasIntersectionTraversalAttribution::set_allocated_intersection_exit_slope(::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample* intersection_exit_slope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (intersection_exit_slope) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intersection_exit_slope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intersection_exit_slope, submessage_arena);
    }
    set_has_intersection_exit_slope();
    attribute_.intersection_exit_slope_ = intersection_exit_slope;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution.intersection_exit_slope)
}
void AdasIntersectionTraversalAttribution::set_allocated_intersection_elevation(::com::here::pb::hdmap::external::v1::adas::AdasElevationSample* intersection_elevation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (intersection_elevation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intersection_elevation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intersection_elevation, submessage_arena);
    }
    set_has_intersection_elevation();
    attribute_.intersection_elevation_ = intersection_elevation;
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution.intersection_elevation)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdasIntersectionTraversalAttribution::kIntersectionTraversalValuesFieldNumber;
const int AdasIntersectionTraversalAttribution::kIntersectionExitSlopeFieldNumber;
const int AdasIntersectionTraversalAttribution::kIntersectionElevationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdasIntersectionTraversalAttribution::AdasIntersectionTraversalAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
}
AdasIntersectionTraversalAttribution::AdasIntersectionTraversalAttribution(const AdasIntersectionTraversalAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_attribute();
  switch (from.attribute_case()) {
    case kIntersectionTraversalValues: {
      mutable_intersection_traversal_values()->::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues::MergeFrom(from.intersection_traversal_values());
      break;
    }
    case kIntersectionExitSlope: {
      mutable_intersection_exit_slope()->::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample::MergeFrom(from.intersection_exit_slope());
      break;
    }
    case kIntersectionElevation: {
      mutable_intersection_elevation()->::com::here::pb::hdmap::external::v1::adas::AdasElevationSample::MergeFrom(from.intersection_elevation());
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
}

void AdasIntersectionTraversalAttribution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AdasIntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  clear_has_attribute();
}

AdasIntersectionTraversalAttribution::~AdasIntersectionTraversalAttribution() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
  SharedDtor();
}

void AdasIntersectionTraversalAttribution::SharedDtor() {
  if (has_attribute()) {
    clear_attribute();
  }
}

void AdasIntersectionTraversalAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdasIntersectionTraversalAttribution& AdasIntersectionTraversalAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AdasIntersectionTraversalAttribution_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void AdasIntersectionTraversalAttribution::clear_attribute() {
// @@protoc_insertion_point(one_of_clear_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
  switch (attribute_case()) {
    case kIntersectionTraversalValues: {
      delete attribute_.intersection_traversal_values_;
      break;
    }
    case kIntersectionExitSlope: {
      delete attribute_.intersection_exit_slope_;
      break;
    }
    case kIntersectionElevation: {
      delete attribute_.intersection_elevation_;
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATTRIBUTE_NOT_SET;
}


void AdasIntersectionTraversalAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_attribute();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdasIntersectionTraversalAttribution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AdasIntersectionTraversalAttribution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues intersection_traversal_values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues::_InternalParse;
        object = msg->mutable_intersection_traversal_values();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.external.v1.adas.AdasSlopeSample intersection_exit_slope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample::_InternalParse;
        object = msg->mutable_intersection_exit_slope();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.external.v1.adas.AdasElevationSample intersection_elevation = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample::_InternalParse;
        object = msg->mutable_intersection_elevation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdasIntersectionTraversalAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues intersection_traversal_values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intersection_traversal_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.adas.AdasSlopeSample intersection_exit_slope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intersection_exit_slope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.adas.AdasElevationSample intersection_elevation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intersection_elevation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdasIntersectionTraversalAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues intersection_traversal_values = 1;
  if (has_intersection_traversal_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::intersection_traversal_values(this), output);
  }

  // .com.here.pb.hdmap.external.v1.adas.AdasSlopeSample intersection_exit_slope = 2;
  if (has_intersection_exit_slope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::intersection_exit_slope(this), output);
  }

  // .com.here.pb.hdmap.external.v1.adas.AdasElevationSample intersection_elevation = 3;
  if (has_intersection_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::intersection_elevation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
}

::google::protobuf::uint8* AdasIntersectionTraversalAttribution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues intersection_traversal_values = 1;
  if (has_intersection_traversal_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::intersection_traversal_values(this), target);
  }

  // .com.here.pb.hdmap.external.v1.adas.AdasSlopeSample intersection_exit_slope = 2;
  if (has_intersection_exit_slope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::intersection_exit_slope(this), target);
  }

  // .com.here.pb.hdmap.external.v1.adas.AdasElevationSample intersection_elevation = 3;
  if (has_intersection_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::intersection_elevation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
  return target;
}

size_t AdasIntersectionTraversalAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (attribute_case()) {
    // .com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues intersection_traversal_values = 1;
    case kIntersectionTraversalValues: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.intersection_traversal_values_);
      break;
    }
    // .com.here.pb.hdmap.external.v1.adas.AdasSlopeSample intersection_exit_slope = 2;
    case kIntersectionExitSlope: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.intersection_exit_slope_);
      break;
    }
    // .com.here.pb.hdmap.external.v1.adas.AdasElevationSample intersection_elevation = 3;
    case kIntersectionElevation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.intersection_elevation_);
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdasIntersectionTraversalAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const AdasIntersectionTraversalAttribution* source =
      ::google::protobuf::DynamicCastToGenerated<AdasIntersectionTraversalAttribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
    MergeFrom(*source);
  }
}

void AdasIntersectionTraversalAttribution::MergeFrom(const AdasIntersectionTraversalAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.attribute_case()) {
    case kIntersectionTraversalValues: {
      mutable_intersection_traversal_values()->::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues::MergeFrom(from.intersection_traversal_values());
      break;
    }
    case kIntersectionExitSlope: {
      mutable_intersection_exit_slope()->::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample::MergeFrom(from.intersection_exit_slope());
      break;
    }
    case kIntersectionElevation: {
      mutable_intersection_elevation()->::com::here::pb::hdmap::external::v1::adas::AdasElevationSample::MergeFrom(from.intersection_elevation());
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
}

void AdasIntersectionTraversalAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdasIntersectionTraversalAttribution::CopyFrom(const AdasIntersectionTraversalAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdasIntersectionTraversalAttribution::IsInitialized() const {
  return true;
}

void AdasIntersectionTraversalAttribution::Swap(AdasIntersectionTraversalAttribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdasIntersectionTraversalAttribution::InternalSwap(AdasIntersectionTraversalAttribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attribute_, other->attribute_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata AdasIntersectionTraversalAttribution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AdasIntersectionTraversalValues::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::adas::_AdasIntersectionTraversalValues_default_instance_._instance.get_mutable()->curvature_ = const_cast< ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure*>(
      ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure::internal_default_instance());
  ::com::here::pb::hdmap::external::v1::adas::_AdasIntersectionTraversalValues_default_instance_._instance.get_mutable()->heading_ = const_cast< ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure*>(
      ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure::internal_default_instance());
}
class AdasIntersectionTraversalValues::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure& curvature(const AdasIntersectionTraversalValues* msg);
  static const ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure& heading(const AdasIntersectionTraversalValues* msg);
};

const ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure&
AdasIntersectionTraversalValues::HasBitSetters::curvature(const AdasIntersectionTraversalValues* msg) {
  return *msg->curvature_;
}
const ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure&
AdasIntersectionTraversalValues::HasBitSetters::heading(const AdasIntersectionTraversalValues* msg) {
  return *msg->heading_;
}
void AdasIntersectionTraversalValues::clear_curvature() {
  if (GetArenaNoVirtual() == nullptr && curvature_ != nullptr) {
    delete curvature_;
  }
  curvature_ = nullptr;
}
void AdasIntersectionTraversalValues::clear_heading() {
  if (GetArenaNoVirtual() == nullptr && heading_ != nullptr) {
    delete heading_;
  }
  heading_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdasIntersectionTraversalValues::kCurvatureFieldNumber;
const int AdasIntersectionTraversalValues::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdasIntersectionTraversalValues::AdasIntersectionTraversalValues()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
}
AdasIntersectionTraversalValues::AdasIntersectionTraversalValues(const AdasIntersectionTraversalValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_curvature()) {
    curvature_ = new ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure(*from.curvature_);
  } else {
    curvature_ = nullptr;
  }
  if (from.has_heading()) {
    heading_ = new ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure(*from.heading_);
  } else {
    heading_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
}

void AdasIntersectionTraversalValues::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AdasIntersectionTraversalValues_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::memset(&curvature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&curvature_)) + sizeof(heading_));
}

AdasIntersectionTraversalValues::~AdasIntersectionTraversalValues() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
  SharedDtor();
}

void AdasIntersectionTraversalValues::SharedDtor() {
  if (this != internal_default_instance()) delete curvature_;
  if (this != internal_default_instance()) delete heading_;
}

void AdasIntersectionTraversalValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdasIntersectionTraversalValues& AdasIntersectionTraversalValues::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AdasIntersectionTraversalValues_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void AdasIntersectionTraversalValues::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && curvature_ != nullptr) {
    delete curvature_;
  }
  curvature_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && heading_ != nullptr) {
    delete heading_;
  }
  heading_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdasIntersectionTraversalValues::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AdasIntersectionTraversalValues*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure curvature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure::_InternalParse;
        object = msg->mutable_curvature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.shared.v1.adas.HeadingMeasure heading = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure::_InternalParse;
        object = msg->mutable_heading();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdasIntersectionTraversalValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure curvature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_curvature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.adas.HeadingMeasure heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdasIntersectionTraversalValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure curvature = 1;
  if (this->has_curvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::curvature(this), output);
  }

  // .com.here.pb.hdmap.shared.v1.adas.HeadingMeasure heading = 2;
  if (this->has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::heading(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
}

::google::protobuf::uint8* AdasIntersectionTraversalValues::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure curvature = 1;
  if (this->has_curvature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::curvature(this), target);
  }

  // .com.here.pb.hdmap.shared.v1.adas.HeadingMeasure heading = 2;
  if (this->has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::heading(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
  return target;
}

size_t AdasIntersectionTraversalValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.adas.CurvatureMeasure curvature = 1;
  if (this->has_curvature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *curvature_);
  }

  // .com.here.pb.hdmap.shared.v1.adas.HeadingMeasure heading = 2;
  if (this->has_heading()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heading_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdasIntersectionTraversalValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
  GOOGLE_DCHECK_NE(&from, this);
  const AdasIntersectionTraversalValues* source =
      ::google::protobuf::DynamicCastToGenerated<AdasIntersectionTraversalValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
    MergeFrom(*source);
  }
}

void AdasIntersectionTraversalValues::MergeFrom(const AdasIntersectionTraversalValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_curvature()) {
    mutable_curvature()->::com::here::pb::hdmap::shared::v1::adas::CurvatureMeasure::MergeFrom(from.curvature());
  }
  if (from.has_heading()) {
    mutable_heading()->::com::here::pb::hdmap::shared::v1::adas::HeadingMeasure::MergeFrom(from.heading());
  }
}

void AdasIntersectionTraversalValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdasIntersectionTraversalValues::CopyFrom(const AdasIntersectionTraversalValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.adas.AdasIntersectionTraversalValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdasIntersectionTraversalValues::IsInitialized() const {
  return true;
}

void AdasIntersectionTraversalValues::Swap(AdasIntersectionTraversalValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdasIntersectionTraversalValues::InternalSwap(AdasIntersectionTraversalValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(curvature_, other->curvature_);
  swap(heading_, other->heading_);
}

::google::protobuf::Metadata AdasIntersectionTraversalValues::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AdasSlopeSample::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::adas::_AdasSlopeSample_default_instance_._instance.get_mutable()->slope_ = const_cast< ::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure*>(
      ::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure::internal_default_instance());
}
class AdasSlopeSample::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure& slope(const AdasSlopeSample* msg);
};

const ::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure&
AdasSlopeSample::HasBitSetters::slope(const AdasSlopeSample* msg) {
  return *msg->slope_;
}
void AdasSlopeSample::clear_slope() {
  if (GetArenaNoVirtual() == nullptr && slope_ != nullptr) {
    delete slope_;
  }
  slope_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdasSlopeSample::kSlopeFieldNumber;
const int AdasSlopeSample::kAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdasSlopeSample::AdasSlopeSample()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
}
AdasSlopeSample::AdasSlopeSample(const AdasSlopeSample& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_slope()) {
    slope_ = new ::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure(*from.slope_);
  } else {
    slope_ = nullptr;
  }
  accuracy_ = from.accuracy_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
}

void AdasSlopeSample::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AdasSlopeSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::memset(&slope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accuracy_) -
      reinterpret_cast<char*>(&slope_)) + sizeof(accuracy_));
}

AdasSlopeSample::~AdasSlopeSample() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
  SharedDtor();
}

void AdasSlopeSample::SharedDtor() {
  if (this != internal_default_instance()) delete slope_;
}

void AdasSlopeSample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdasSlopeSample& AdasSlopeSample::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AdasSlopeSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void AdasSlopeSample::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && slope_ != nullptr) {
    delete slope_;
  }
  slope_ = nullptr;
  accuracy_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdasSlopeSample::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AdasSlopeSample*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.adas.SlopeMeasure slope = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure::_InternalParse;
        object = msg->mutable_slope();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.external.v1.adas.SlopeElevationAccuracy accuracy = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_accuracy(static_cast<::com::here::pb::hdmap::external::v1::adas::SlopeElevationAccuracy>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdasSlopeSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.adas.SlopeMeasure slope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_slope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.adas.SlopeElevationAccuracy accuracy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_accuracy(static_cast< ::com::here::pb::hdmap::external::v1::adas::SlopeElevationAccuracy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdasSlopeSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.adas.SlopeMeasure slope = 1;
  if (this->has_slope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::slope(this), output);
  }

  // .com.here.pb.hdmap.external.v1.adas.SlopeElevationAccuracy accuracy = 2;
  if (this->accuracy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->accuracy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
}

::google::protobuf::uint8* AdasSlopeSample::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.adas.SlopeMeasure slope = 1;
  if (this->has_slope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::slope(this), target);
  }

  // .com.here.pb.hdmap.external.v1.adas.SlopeElevationAccuracy accuracy = 2;
  if (this->accuracy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->accuracy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
  return target;
}

size_t AdasSlopeSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.adas.SlopeMeasure slope = 1;
  if (this->has_slope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *slope_);
  }

  // .com.here.pb.hdmap.external.v1.adas.SlopeElevationAccuracy accuracy = 2;
  if (this->accuracy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->accuracy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdasSlopeSample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
  GOOGLE_DCHECK_NE(&from, this);
  const AdasSlopeSample* source =
      ::google::protobuf::DynamicCastToGenerated<AdasSlopeSample>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
    MergeFrom(*source);
  }
}

void AdasSlopeSample::MergeFrom(const AdasSlopeSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_slope()) {
    mutable_slope()->::com::here::pb::hdmap::shared::v1::adas::SlopeMeasure::MergeFrom(from.slope());
  }
  if (from.accuracy() != 0) {
    set_accuracy(from.accuracy());
  }
}

void AdasSlopeSample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdasSlopeSample::CopyFrom(const AdasSlopeSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.adas.AdasSlopeSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdasSlopeSample::IsInitialized() const {
  return true;
}

void AdasSlopeSample::Swap(AdasSlopeSample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdasSlopeSample::InternalSwap(AdasSlopeSample* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(slope_, other->slope_);
  swap(accuracy_, other->accuracy_);
}

::google::protobuf::Metadata AdasSlopeSample::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AdasElevationSample::InitAsDefaultInstance() {
  ::com::here::pb::hdmap::external::v1::adas::_AdasElevationSample_default_instance_._instance.get_mutable()->elevation_ = const_cast< ::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure*>(
      ::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure::internal_default_instance());
}
class AdasElevationSample::HasBitSetters {
 public:
  static const ::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure& elevation(const AdasElevationSample* msg);
};

const ::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure&
AdasElevationSample::HasBitSetters::elevation(const AdasElevationSample* msg) {
  return *msg->elevation_;
}
void AdasElevationSample::clear_elevation() {
  if (GetArenaNoVirtual() == nullptr && elevation_ != nullptr) {
    delete elevation_;
  }
  elevation_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdasElevationSample::kElevationFieldNumber;
const int AdasElevationSample::kAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdasElevationSample::AdasElevationSample()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
}
AdasElevationSample::AdasElevationSample(const AdasElevationSample& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_elevation()) {
    elevation_ = new ::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure(*from.elevation_);
  } else {
    elevation_ = nullptr;
  }
  accuracy_ = from.accuracy_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
}

void AdasElevationSample::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AdasElevationSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  ::memset(&elevation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accuracy_) -
      reinterpret_cast<char*>(&elevation_)) + sizeof(accuracy_));
}

AdasElevationSample::~AdasElevationSample() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
  SharedDtor();
}

void AdasElevationSample::SharedDtor() {
  if (this != internal_default_instance()) delete elevation_;
}

void AdasElevationSample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdasElevationSample& AdasElevationSample::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AdasElevationSample_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void AdasElevationSample::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && elevation_ != nullptr) {
    delete elevation_;
  }
  elevation_ = nullptr;
  accuracy_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdasElevationSample::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AdasElevationSample*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.adas.ElevationMeasure elevation = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure::_InternalParse;
        object = msg->mutable_elevation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.here.pb.hdmap.external.v1.adas.SlopeElevationAccuracy accuracy = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_accuracy(static_cast<::com::here::pb::hdmap::external::v1::adas::SlopeElevationAccuracy>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdasElevationSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.adas.ElevationMeasure elevation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_elevation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.adas.SlopeElevationAccuracy accuracy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_accuracy(static_cast< ::com::here::pb::hdmap::external::v1::adas::SlopeElevationAccuracy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdasElevationSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.adas.ElevationMeasure elevation = 1;
  if (this->has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::elevation(this), output);
  }

  // .com.here.pb.hdmap.external.v1.adas.SlopeElevationAccuracy accuracy = 2;
  if (this->accuracy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->accuracy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
}

::google::protobuf::uint8* AdasElevationSample::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.adas.ElevationMeasure elevation = 1;
  if (this->has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::elevation(this), target);
  }

  // .com.here.pb.hdmap.external.v1.adas.SlopeElevationAccuracy accuracy = 2;
  if (this->accuracy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->accuracy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
  return target;
}

size_t AdasElevationSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.adas.ElevationMeasure elevation = 1;
  if (this->has_elevation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *elevation_);
  }

  // .com.here.pb.hdmap.external.v1.adas.SlopeElevationAccuracy accuracy = 2;
  if (this->accuracy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->accuracy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdasElevationSample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
  GOOGLE_DCHECK_NE(&from, this);
  const AdasElevationSample* source =
      ::google::protobuf::DynamicCastToGenerated<AdasElevationSample>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
    MergeFrom(*source);
  }
}

void AdasElevationSample::MergeFrom(const AdasElevationSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_elevation()) {
    mutable_elevation()->::com::here::pb::hdmap::shared::v1::adas::ElevationMeasure::MergeFrom(from.elevation());
  }
  if (from.accuracy() != 0) {
    set_accuracy(from.accuracy());
  }
}

void AdasElevationSample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdasElevationSample::CopyFrom(const AdasElevationSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.v1.adas.AdasElevationSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdasElevationSample::IsInitialized() const {
  return true;
}

void AdasElevationSample::Swap(AdasElevationSample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdasElevationSample::InternalSwap(AdasElevationSample* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(elevation_, other->elevation_);
  swap(accuracy_, other->accuracy_);
}

::google::protobuf::Metadata AdasElevationSample::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fadas_2flayer_2dadas_2dattributes_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace adas
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::adas::AdasAttributesLayerTile* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::adas::AdasAttributesLayerTile >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::adas::AdasAttributesLayerTile >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::adas::LinkAttribution_ParametricAttribution* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::adas::LinkAttribution_ParametricAttribution >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::adas::LinkAttribution_ParametricAttribution >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::adas::LinkAttribution_PointAttribution* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::adas::LinkAttribution_PointAttribution >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::adas::LinkAttribution_PointAttribution >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::adas::LinkAttribution* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::adas::LinkAttribution >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::adas::LinkAttribution >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::adas::NodeAttribution_IntersectionTraversalAttribution* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::adas::NodeAttribution_IntersectionTraversalAttribution >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::adas::NodeAttribution_IntersectionTraversalAttribution >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::adas::NodeAttribution* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::adas::NodeAttribution >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::adas::NodeAttribution >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::adas::AdasLinkParametricAttribution* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::adas::AdasLinkParametricAttribution >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::adas::AdasLinkParametricAttribution >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::adas::AdasLinkPointAttribution* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::adas::AdasLinkPointAttribution >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::adas::AdasLinkPointAttribution >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalAttribution* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalAttribution >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalAttribution >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::adas::AdasIntersectionTraversalValues >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::adas::AdasSlopeSample >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::external::v1::adas::AdasElevationSample >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
