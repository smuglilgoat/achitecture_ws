// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/external/v1/speed/layer-speed-attributes.proto

#ifndef PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto
#define PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "com/here/pb/hdmap/external/v1/common/common.pb.h"
#include "com/here/pb/hdmap/shared/v1/core/common.pb.h"
#include "com/here/pb/hdmap/shared/v1/core/conditional-attributes.pb.h"
#include "com/here/pb/hdmap/shared/v1/core/unconditional-attributes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto();
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace speed {
class LinkAttribution;
class LinkAttributionDefaultTypeInternal;
extern LinkAttributionDefaultTypeInternal _LinkAttribution_default_instance_;
class LinkAttribution_ParametricAttribution;
class LinkAttribution_ParametricAttributionDefaultTypeInternal;
extern LinkAttribution_ParametricAttributionDefaultTypeInternal _LinkAttribution_ParametricAttribution_default_instance_;
class LinkAttribution_PointAttribution;
class LinkAttribution_PointAttributionDefaultTypeInternal;
extern LinkAttribution_PointAttributionDefaultTypeInternal _LinkAttribution_PointAttribution_default_instance_;
class SpeedAttributesLayerTile;
class SpeedAttributesLayerTileDefaultTypeInternal;
extern SpeedAttributesLayerTileDefaultTypeInternal _SpeedAttributesLayerTile_default_instance_;
class SpeedLinkParametricAttribution;
class SpeedLinkParametricAttributionDefaultTypeInternal;
extern SpeedLinkParametricAttributionDefaultTypeInternal _SpeedLinkParametricAttribution_default_instance_;
class SpeedLinkPointAttribution;
class SpeedLinkPointAttributionDefaultTypeInternal;
extern SpeedLinkPointAttributionDefaultTypeInternal _SpeedLinkPointAttribution_default_instance_;
}  // namespace speed
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::here::pb::hdmap::external::v1::speed::LinkAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::speed::LinkAttribution>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::speed::SpeedAttributesLayerTile* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::speed::SpeedAttributesLayerTile>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace speed {

// ===================================================================

class SpeedAttributesLayerTile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile) */ {
 public:
  SpeedAttributesLayerTile();
  virtual ~SpeedAttributesLayerTile();

  SpeedAttributesLayerTile(const SpeedAttributesLayerTile& from);

  inline SpeedAttributesLayerTile& operator=(const SpeedAttributesLayerTile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedAttributesLayerTile(SpeedAttributesLayerTile&& from) noexcept
    : SpeedAttributesLayerTile() {
    *this = ::std::move(from);
  }

  inline SpeedAttributesLayerTile& operator=(SpeedAttributesLayerTile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SpeedAttributesLayerTile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedAttributesLayerTile* internal_default_instance() {
    return reinterpret_cast<const SpeedAttributesLayerTile*>(
               &_SpeedAttributesLayerTile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SpeedAttributesLayerTile* other);
  friend void swap(SpeedAttributesLayerTile& a, SpeedAttributesLayerTile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedAttributesLayerTile* New() const final {
    return CreateMaybeMessage<SpeedAttributesLayerTile>(nullptr);
  }

  SpeedAttributesLayerTile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeedAttributesLayerTile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeedAttributesLayerTile& from);
  void MergeFrom(const SpeedAttributesLayerTile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedAttributesLayerTile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution link_attribution = 2;
  int link_attribution_size() const;
  void clear_link_attribution();
  static const int kLinkAttributionFieldNumber = 2;
  ::com::here::pb::hdmap::external::v1::speed::LinkAttribution* mutable_link_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution >*
      mutable_link_attribution();
  const ::com::here::pb::hdmap::external::v1::speed::LinkAttribution& link_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::speed::LinkAttribution* add_link_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution >&
      link_attribution() const;

  // uint32 here_tile_id = 1;
  void clear_here_tile_id();
  static const int kHereTileIdFieldNumber = 1;
  ::google::protobuf::uint32 here_tile_id() const;
  void set_here_tile_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution > link_attribution_;
  ::google::protobuf::uint32 here_tile_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class LinkAttribution_ParametricAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution) */ {
 public:
  LinkAttribution_ParametricAttribution();
  virtual ~LinkAttribution_ParametricAttribution();

  LinkAttribution_ParametricAttribution(const LinkAttribution_ParametricAttribution& from);

  inline LinkAttribution_ParametricAttribution& operator=(const LinkAttribution_ParametricAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinkAttribution_ParametricAttribution(LinkAttribution_ParametricAttribution&& from) noexcept
    : LinkAttribution_ParametricAttribution() {
    *this = ::std::move(from);
  }

  inline LinkAttribution_ParametricAttribution& operator=(LinkAttribution_ParametricAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LinkAttribution_ParametricAttribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkAttribution_ParametricAttribution* internal_default_instance() {
    return reinterpret_cast<const LinkAttribution_ParametricAttribution*>(
               &_LinkAttribution_ParametricAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LinkAttribution_ParametricAttribution* other);
  friend void swap(LinkAttribution_ParametricAttribution& a, LinkAttribution_ParametricAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinkAttribution_ParametricAttribution* New() const final {
    return CreateMaybeMessage<LinkAttribution_ParametricAttribution>(nullptr);
  }

  LinkAttribution_ParametricAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinkAttribution_ParametricAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinkAttribution_ParametricAttribution& from);
  void MergeFrom(const LinkAttribution_ParametricAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkAttribution_ParametricAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 attribution_group_indexes = 3 [packed = true];
  int attribution_group_indexes_size() const;
  void clear_attribution_group_indexes();
  static const int kAttributionGroupIndexesFieldNumber = 3;
  ::google::protobuf::uint32 attribution_group_indexes(int index) const;
  void set_attribution_group_indexes(int index, ::google::protobuf::uint32 value);
  void add_attribution_group_indexes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attribution_group_indexes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attribution_group_indexes();

  // repeated .com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution link_parametric_attribution = 4;
  int link_parametric_attribution_size() const;
  void clear_link_parametric_attribution();
  static const int kLinkParametricAttributionFieldNumber = 4;
  ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution* mutable_link_parametric_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution >*
      mutable_link_parametric_attribution();
  const ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution& link_parametric_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution* add_link_parametric_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution >&
      link_parametric_attribution() const;

  // .com.here.pb.hdmap.external.v1.common.ParametricRange applies_to_range = 1;
  bool has_applies_to_range() const;
  void clear_applies_to_range();
  static const int kAppliesToRangeFieldNumber = 1;
  const ::com::here::pb::hdmap::external::v1::common::ParametricRange& applies_to_range() const;
  ::com::here::pb::hdmap::external::v1::common::ParametricRange* release_applies_to_range();
  ::com::here::pb::hdmap::external::v1::common::ParametricRange* mutable_applies_to_range();
  void set_allocated_applies_to_range(::com::here::pb::hdmap::external::v1::common::ParametricRange* applies_to_range);

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  void clear_applies_to_direction();
  static const int kAppliesToDirectionFieldNumber = 2;
  ::com::here::pb::hdmap::external::v1::common::RelativeDirection applies_to_direction() const;
  void set_applies_to_direction(::com::here::pb::hdmap::external::v1::common::RelativeDirection value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attribution_group_indexes_;
  mutable std::atomic<int> _attribution_group_indexes_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution > link_parametric_attribution_;
  ::com::here::pb::hdmap::external::v1::common::ParametricRange* applies_to_range_;
  int applies_to_direction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class LinkAttribution_PointAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution) */ {
 public:
  LinkAttribution_PointAttribution();
  virtual ~LinkAttribution_PointAttribution();

  LinkAttribution_PointAttribution(const LinkAttribution_PointAttribution& from);

  inline LinkAttribution_PointAttribution& operator=(const LinkAttribution_PointAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinkAttribution_PointAttribution(LinkAttribution_PointAttribution&& from) noexcept
    : LinkAttribution_PointAttribution() {
    *this = ::std::move(from);
  }

  inline LinkAttribution_PointAttribution& operator=(LinkAttribution_PointAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LinkAttribution_PointAttribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkAttribution_PointAttribution* internal_default_instance() {
    return reinterpret_cast<const LinkAttribution_PointAttribution*>(
               &_LinkAttribution_PointAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LinkAttribution_PointAttribution* other);
  friend void swap(LinkAttribution_PointAttribution& a, LinkAttribution_PointAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinkAttribution_PointAttribution* New() const final {
    return CreateMaybeMessage<LinkAttribution_PointAttribution>(nullptr);
  }

  LinkAttribution_PointAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinkAttribution_PointAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinkAttribution_PointAttribution& from);
  void MergeFrom(const LinkAttribution_PointAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkAttribution_PointAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 attribution_group_indexes = 3 [packed = true];
  int attribution_group_indexes_size() const;
  void clear_attribution_group_indexes();
  static const int kAttributionGroupIndexesFieldNumber = 3;
  ::google::protobuf::uint32 attribution_group_indexes(int index) const;
  void set_attribution_group_indexes(int index, ::google::protobuf::uint32 value);
  void add_attribution_group_indexes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attribution_group_indexes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attribution_group_indexes();

  // repeated .com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution link_point_attribution = 4;
  int link_point_attribution_size() const;
  void clear_link_point_attribution();
  static const int kLinkPointAttributionFieldNumber = 4;
  ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution* mutable_link_point_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution >*
      mutable_link_point_attribution();
  const ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution& link_point_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution* add_link_point_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution >&
      link_point_attribution() const;

  // double applies_to_location = 1;
  void clear_applies_to_location();
  static const int kAppliesToLocationFieldNumber = 1;
  double applies_to_location() const;
  void set_applies_to_location(double value);

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  void clear_applies_to_direction();
  static const int kAppliesToDirectionFieldNumber = 2;
  ::com::here::pb::hdmap::external::v1::common::RelativeDirection applies_to_direction() const;
  void set_applies_to_direction(::com::here::pb::hdmap::external::v1::common::RelativeDirection value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attribution_group_indexes_;
  mutable std::atomic<int> _attribution_group_indexes_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution > link_point_attribution_;
  double applies_to_location_;
  int applies_to_direction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class LinkAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.speed.LinkAttribution) */ {
 public:
  LinkAttribution();
  virtual ~LinkAttribution();

  LinkAttribution(const LinkAttribution& from);

  inline LinkAttribution& operator=(const LinkAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinkAttribution(LinkAttribution&& from) noexcept
    : LinkAttribution() {
    *this = ::std::move(from);
  }

  inline LinkAttribution& operator=(LinkAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LinkAttribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkAttribution* internal_default_instance() {
    return reinterpret_cast<const LinkAttribution*>(
               &_LinkAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LinkAttribution* other);
  friend void swap(LinkAttribution& a, LinkAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinkAttribution* New() const final {
    return CreateMaybeMessage<LinkAttribution>(nullptr);
  }

  LinkAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinkAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinkAttribution& from);
  void MergeFrom(const LinkAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinkAttribution_ParametricAttribution ParametricAttribution;
  typedef LinkAttribution_PointAttribution PointAttribution;

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution parametric_attribution = 2;
  int parametric_attribution_size() const;
  void clear_parametric_attribution();
  static const int kParametricAttributionFieldNumber = 2;
  ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution* mutable_parametric_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution >*
      mutable_parametric_attribution();
  const ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution& parametric_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution* add_parametric_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution >&
      parametric_attribution() const;

  // repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution point_attribution = 3;
  int point_attribution_size() const;
  void clear_point_attribution();
  static const int kPointAttributionFieldNumber = 3;
  ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution* mutable_point_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution >*
      mutable_point_attribution();
  const ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution& point_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution* add_point_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution >&
      point_attribution() const;

  // repeated .com.here.pb.hdmap.external.v1.common.TiledStrandAttributionReference strand_attribution_refs = 4;
  int strand_attribution_refs_size() const;
  void clear_strand_attribution_refs();
  static const int kStrandAttributionRefsFieldNumber = 4;
  ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference* mutable_strand_attribution_refs(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference >*
      mutable_strand_attribution_refs();
  const ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference& strand_attribution_refs(int index) const;
  ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference* add_strand_attribution_refs();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference >&
      strand_attribution_refs() const;

  // uint32 link_local_ref = 1;
  void clear_link_local_ref();
  static const int kLinkLocalRefFieldNumber = 1;
  ::google::protobuf::uint32 link_local_ref() const;
  void set_link_local_ref(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.speed.LinkAttribution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution > parametric_attribution_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution > point_attribution_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference > strand_attribution_refs_;
  ::google::protobuf::uint32 link_local_ref_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class SpeedLinkParametricAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution) */ {
 public:
  SpeedLinkParametricAttribution();
  virtual ~SpeedLinkParametricAttribution();

  SpeedLinkParametricAttribution(const SpeedLinkParametricAttribution& from);

  inline SpeedLinkParametricAttribution& operator=(const SpeedLinkParametricAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedLinkParametricAttribution(SpeedLinkParametricAttribution&& from) noexcept
    : SpeedLinkParametricAttribution() {
    *this = ::std::move(from);
  }

  inline SpeedLinkParametricAttribution& operator=(SpeedLinkParametricAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SpeedLinkParametricAttribution& default_instance();

  enum AttributeCase {
    kSpeedLimit = 1,
    kSpeedCategory = 2,
    kVariableSpeedLimit = 3,
    kConditionalSpeedLimit = 4,
    ATTRIBUTE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedLinkParametricAttribution* internal_default_instance() {
    return reinterpret_cast<const SpeedLinkParametricAttribution*>(
               &_SpeedLinkParametricAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SpeedLinkParametricAttribution* other);
  friend void swap(SpeedLinkParametricAttribution& a, SpeedLinkParametricAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedLinkParametricAttribution* New() const final {
    return CreateMaybeMessage<SpeedLinkParametricAttribution>(nullptr);
  }

  SpeedLinkParametricAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeedLinkParametricAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeedLinkParametricAttribution& from);
  void MergeFrom(const SpeedLinkParametricAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedLinkParametricAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.shared.v1.core.SpeedLimit speed_limit = 1;
  bool has_speed_limit() const;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 1;
  const ::com::here::pb::hdmap::shared::v1::core::SpeedLimit& speed_limit() const;
  ::com::here::pb::hdmap::shared::v1::core::SpeedLimit* release_speed_limit();
  ::com::here::pb::hdmap::shared::v1::core::SpeedLimit* mutable_speed_limit();
  void set_allocated_speed_limit(::com::here::pb::hdmap::shared::v1::core::SpeedLimit* speed_limit);

  // .com.here.pb.hdmap.shared.v1.core.SpeedCategory speed_category = 2;
  private:
  bool has_speed_category() const;
  public:
  void clear_speed_category();
  static const int kSpeedCategoryFieldNumber = 2;
  ::com::here::pb::hdmap::shared::v1::core::SpeedCategory speed_category() const;
  void set_speed_category(::com::here::pb::hdmap::shared::v1::core::SpeedCategory value);

  // .com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit variable_speed_limit = 3;
  bool has_variable_speed_limit() const;
  void clear_variable_speed_limit();
  static const int kVariableSpeedLimitFieldNumber = 3;
  const ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit& variable_speed_limit() const;
  ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit* release_variable_speed_limit();
  ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit* mutable_variable_speed_limit();
  void set_allocated_variable_speed_limit(::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit* variable_speed_limit);

  // .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit conditional_speed_limit = 4;
  bool has_conditional_speed_limit() const;
  void clear_conditional_speed_limit();
  static const int kConditionalSpeedLimitFieldNumber = 4;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit& conditional_speed_limit() const;
  ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit* release_conditional_speed_limit();
  ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit* mutable_conditional_speed_limit();
  void set_allocated_conditional_speed_limit(::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit* conditional_speed_limit);

  void clear_attribute();
  AttributeCase attribute_case() const;
  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution)
 private:
  class HasBitSetters;
  void set_has_speed_limit();
  void set_has_speed_category();
  void set_has_variable_speed_limit();
  void set_has_conditional_speed_limit();

  inline bool has_attribute() const;
  inline void clear_has_attribute();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union AttributeUnion {
    AttributeUnion() {}
    ::com::here::pb::hdmap::shared::v1::core::SpeedLimit* speed_limit_;
    int speed_category_;
    ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit* variable_speed_limit_;
    ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit* conditional_speed_limit_;
  } attribute_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class SpeedLinkPointAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution) */ {
 public:
  SpeedLinkPointAttribution();
  virtual ~SpeedLinkPointAttribution();

  SpeedLinkPointAttribution(const SpeedLinkPointAttribution& from);

  inline SpeedLinkPointAttribution& operator=(const SpeedLinkPointAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedLinkPointAttribution(SpeedLinkPointAttribution&& from) noexcept
    : SpeedLinkPointAttribution() {
    *this = ::std::move(from);
  }

  inline SpeedLinkPointAttribution& operator=(SpeedLinkPointAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SpeedLinkPointAttribution& default_instance();

  enum AttributeCase {
    kVariableSpeedSign = 1,
    ATTRIBUTE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedLinkPointAttribution* internal_default_instance() {
    return reinterpret_cast<const SpeedLinkPointAttribution*>(
               &_SpeedLinkPointAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SpeedLinkPointAttribution* other);
  friend void swap(SpeedLinkPointAttribution& a, SpeedLinkPointAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedLinkPointAttribution* New() const final {
    return CreateMaybeMessage<SpeedLinkPointAttribution>(nullptr);
  }

  SpeedLinkPointAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeedLinkPointAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeedLinkPointAttribution& from);
  void MergeFrom(const SpeedLinkPointAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedLinkPointAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.shared.v1.core.VariableSpeedSign variable_speed_sign = 1;
  bool has_variable_speed_sign() const;
  void clear_variable_speed_sign();
  static const int kVariableSpeedSignFieldNumber = 1;
  const ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign& variable_speed_sign() const;
  ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign* release_variable_speed_sign();
  ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign* mutable_variable_speed_sign();
  void set_allocated_variable_speed_sign(::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign* variable_speed_sign);

  void clear_attribute();
  AttributeCase attribute_case() const;
  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution)
 private:
  class HasBitSetters;
  void set_has_variable_speed_sign();

  inline bool has_attribute() const;
  inline void clear_has_attribute();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union AttributeUnion {
    AttributeUnion() {}
    ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign* variable_speed_sign_;
  } attribute_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpeedAttributesLayerTile

// uint32 here_tile_id = 1;
inline void SpeedAttributesLayerTile::clear_here_tile_id() {
  here_tile_id_ = 0u;
}
inline ::google::protobuf::uint32 SpeedAttributesLayerTile::here_tile_id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile.here_tile_id)
  return here_tile_id_;
}
inline void SpeedAttributesLayerTile::set_here_tile_id(::google::protobuf::uint32 value) {
  
  here_tile_id_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile.here_tile_id)
}

// repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution link_attribution = 2;
inline int SpeedAttributesLayerTile::link_attribution_size() const {
  return link_attribution_.size();
}
inline void SpeedAttributesLayerTile::clear_link_attribution() {
  link_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::speed::LinkAttribution* SpeedAttributesLayerTile::mutable_link_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile.link_attribution)
  return link_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution >*
SpeedAttributesLayerTile::mutable_link_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile.link_attribution)
  return &link_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::speed::LinkAttribution& SpeedAttributesLayerTile::link_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile.link_attribution)
  return link_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::speed::LinkAttribution* SpeedAttributesLayerTile::add_link_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile.link_attribution)
  return link_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution >&
SpeedAttributesLayerTile::link_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.speed.SpeedAttributesLayerTile.link_attribution)
  return link_attribution_;
}

// -------------------------------------------------------------------

// LinkAttribution_ParametricAttribution

// .com.here.pb.hdmap.external.v1.common.ParametricRange applies_to_range = 1;
inline bool LinkAttribution_ParametricAttribution::has_applies_to_range() const {
  return this != internal_default_instance() && applies_to_range_ != nullptr;
}
inline const ::com::here::pb::hdmap::external::v1::common::ParametricRange& LinkAttribution_ParametricAttribution::applies_to_range() const {
  const ::com::here::pb::hdmap::external::v1::common::ParametricRange* p = applies_to_range_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.applies_to_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::common::ParametricRange*>(
      &::com::here::pb::hdmap::external::v1::common::_ParametricRange_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::common::ParametricRange* LinkAttribution_ParametricAttribution::release_applies_to_range() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.applies_to_range)
  
  ::com::here::pb::hdmap::external::v1::common::ParametricRange* temp = applies_to_range_;
  applies_to_range_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::external::v1::common::ParametricRange* LinkAttribution_ParametricAttribution::mutable_applies_to_range() {
  
  if (applies_to_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::external::v1::common::ParametricRange>(GetArenaNoVirtual());
    applies_to_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.applies_to_range)
  return applies_to_range_;
}
inline void LinkAttribution_ParametricAttribution::set_allocated_applies_to_range(::com::here::pb::hdmap::external::v1::common::ParametricRange* applies_to_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(applies_to_range_);
  }
  if (applies_to_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      applies_to_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, applies_to_range, submessage_arena);
    }
    
  } else {
    
  }
  applies_to_range_ = applies_to_range;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.applies_to_range)
}

// .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
inline void LinkAttribution_ParametricAttribution::clear_applies_to_direction() {
  applies_to_direction_ = 0;
}
inline ::com::here::pb::hdmap::external::v1::common::RelativeDirection LinkAttribution_ParametricAttribution::applies_to_direction() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.applies_to_direction)
  return static_cast< ::com::here::pb::hdmap::external::v1::common::RelativeDirection >(applies_to_direction_);
}
inline void LinkAttribution_ParametricAttribution::set_applies_to_direction(::com::here::pb::hdmap::external::v1::common::RelativeDirection value) {
  
  applies_to_direction_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.applies_to_direction)
}

// repeated uint32 attribution_group_indexes = 3 [packed = true];
inline int LinkAttribution_ParametricAttribution::attribution_group_indexes_size() const {
  return attribution_group_indexes_.size();
}
inline void LinkAttribution_ParametricAttribution::clear_attribution_group_indexes() {
  attribution_group_indexes_.Clear();
}
inline ::google::protobuf::uint32 LinkAttribution_ParametricAttribution::attribution_group_indexes(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.attribution_group_indexes)
  return attribution_group_indexes_.Get(index);
}
inline void LinkAttribution_ParametricAttribution::set_attribution_group_indexes(int index, ::google::protobuf::uint32 value) {
  attribution_group_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.attribution_group_indexes)
}
inline void LinkAttribution_ParametricAttribution::add_attribution_group_indexes(::google::protobuf::uint32 value) {
  attribution_group_indexes_.Add(value);
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.attribution_group_indexes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LinkAttribution_ParametricAttribution::attribution_group_indexes() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.attribution_group_indexes)
  return attribution_group_indexes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LinkAttribution_ParametricAttribution::mutable_attribution_group_indexes() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.attribution_group_indexes)
  return &attribution_group_indexes_;
}

// repeated .com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution link_parametric_attribution = 4;
inline int LinkAttribution_ParametricAttribution::link_parametric_attribution_size() const {
  return link_parametric_attribution_.size();
}
inline void LinkAttribution_ParametricAttribution::clear_link_parametric_attribution() {
  link_parametric_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution* LinkAttribution_ParametricAttribution::mutable_link_parametric_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.link_parametric_attribution)
  return link_parametric_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution >*
LinkAttribution_ParametricAttribution::mutable_link_parametric_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.link_parametric_attribution)
  return &link_parametric_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution& LinkAttribution_ParametricAttribution::link_parametric_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.link_parametric_attribution)
  return link_parametric_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution* LinkAttribution_ParametricAttribution::add_link_parametric_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.link_parametric_attribution)
  return link_parametric_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::SpeedLinkParametricAttribution >&
LinkAttribution_ParametricAttribution::link_parametric_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution.link_parametric_attribution)
  return link_parametric_attribution_;
}

// -------------------------------------------------------------------

// LinkAttribution_PointAttribution

// double applies_to_location = 1;
inline void LinkAttribution_PointAttribution::clear_applies_to_location() {
  applies_to_location_ = 0;
}
inline double LinkAttribution_PointAttribution::applies_to_location() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution.applies_to_location)
  return applies_to_location_;
}
inline void LinkAttribution_PointAttribution::set_applies_to_location(double value) {
  
  applies_to_location_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution.applies_to_location)
}

// .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
inline void LinkAttribution_PointAttribution::clear_applies_to_direction() {
  applies_to_direction_ = 0;
}
inline ::com::here::pb::hdmap::external::v1::common::RelativeDirection LinkAttribution_PointAttribution::applies_to_direction() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution.applies_to_direction)
  return static_cast< ::com::here::pb::hdmap::external::v1::common::RelativeDirection >(applies_to_direction_);
}
inline void LinkAttribution_PointAttribution::set_applies_to_direction(::com::here::pb::hdmap::external::v1::common::RelativeDirection value) {
  
  applies_to_direction_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution.applies_to_direction)
}

// repeated uint32 attribution_group_indexes = 3 [packed = true];
inline int LinkAttribution_PointAttribution::attribution_group_indexes_size() const {
  return attribution_group_indexes_.size();
}
inline void LinkAttribution_PointAttribution::clear_attribution_group_indexes() {
  attribution_group_indexes_.Clear();
}
inline ::google::protobuf::uint32 LinkAttribution_PointAttribution::attribution_group_indexes(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution.attribution_group_indexes)
  return attribution_group_indexes_.Get(index);
}
inline void LinkAttribution_PointAttribution::set_attribution_group_indexes(int index, ::google::protobuf::uint32 value) {
  attribution_group_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution.attribution_group_indexes)
}
inline void LinkAttribution_PointAttribution::add_attribution_group_indexes(::google::protobuf::uint32 value) {
  attribution_group_indexes_.Add(value);
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution.attribution_group_indexes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LinkAttribution_PointAttribution::attribution_group_indexes() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution.attribution_group_indexes)
  return attribution_group_indexes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LinkAttribution_PointAttribution::mutable_attribution_group_indexes() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution.attribution_group_indexes)
  return &attribution_group_indexes_;
}

// repeated .com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution link_point_attribution = 4;
inline int LinkAttribution_PointAttribution::link_point_attribution_size() const {
  return link_point_attribution_.size();
}
inline void LinkAttribution_PointAttribution::clear_link_point_attribution() {
  link_point_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution* LinkAttribution_PointAttribution::mutable_link_point_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution.link_point_attribution)
  return link_point_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution >*
LinkAttribution_PointAttribution::mutable_link_point_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution.link_point_attribution)
  return &link_point_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution& LinkAttribution_PointAttribution::link_point_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution.link_point_attribution)
  return link_point_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution* LinkAttribution_PointAttribution::add_link_point_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution.link_point_attribution)
  return link_point_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::SpeedLinkPointAttribution >&
LinkAttribution_PointAttribution::link_point_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution.link_point_attribution)
  return link_point_attribution_;
}

// -------------------------------------------------------------------

// LinkAttribution

// uint32 link_local_ref = 1;
inline void LinkAttribution::clear_link_local_ref() {
  link_local_ref_ = 0u;
}
inline ::google::protobuf::uint32 LinkAttribution::link_local_ref() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.LinkAttribution.link_local_ref)
  return link_local_ref_;
}
inline void LinkAttribution::set_link_local_ref(::google::protobuf::uint32 value) {
  
  link_local_ref_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.speed.LinkAttribution.link_local_ref)
}

// repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution.ParametricAttribution parametric_attribution = 2;
inline int LinkAttribution::parametric_attribution_size() const {
  return parametric_attribution_.size();
}
inline void LinkAttribution::clear_parametric_attribution() {
  parametric_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution* LinkAttribution::mutable_parametric_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.speed.LinkAttribution.parametric_attribution)
  return parametric_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution >*
LinkAttribution::mutable_parametric_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.speed.LinkAttribution.parametric_attribution)
  return &parametric_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution& LinkAttribution::parametric_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.LinkAttribution.parametric_attribution)
  return parametric_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution* LinkAttribution::add_parametric_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.speed.LinkAttribution.parametric_attribution)
  return parametric_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_ParametricAttribution >&
LinkAttribution::parametric_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.speed.LinkAttribution.parametric_attribution)
  return parametric_attribution_;
}

// repeated .com.here.pb.hdmap.external.v1.speed.LinkAttribution.PointAttribution point_attribution = 3;
inline int LinkAttribution::point_attribution_size() const {
  return point_attribution_.size();
}
inline void LinkAttribution::clear_point_attribution() {
  point_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution* LinkAttribution::mutable_point_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.speed.LinkAttribution.point_attribution)
  return point_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution >*
LinkAttribution::mutable_point_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.speed.LinkAttribution.point_attribution)
  return &point_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution& LinkAttribution::point_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.LinkAttribution.point_attribution)
  return point_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution* LinkAttribution::add_point_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.speed.LinkAttribution.point_attribution)
  return point_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::speed::LinkAttribution_PointAttribution >&
LinkAttribution::point_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.speed.LinkAttribution.point_attribution)
  return point_attribution_;
}

// repeated .com.here.pb.hdmap.external.v1.common.TiledStrandAttributionReference strand_attribution_refs = 4;
inline int LinkAttribution::strand_attribution_refs_size() const {
  return strand_attribution_refs_.size();
}
inline ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference* LinkAttribution::mutable_strand_attribution_refs(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.speed.LinkAttribution.strand_attribution_refs)
  return strand_attribution_refs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference >*
LinkAttribution::mutable_strand_attribution_refs() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.speed.LinkAttribution.strand_attribution_refs)
  return &strand_attribution_refs_;
}
inline const ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference& LinkAttribution::strand_attribution_refs(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.LinkAttribution.strand_attribution_refs)
  return strand_attribution_refs_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference* LinkAttribution::add_strand_attribution_refs() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.speed.LinkAttribution.strand_attribution_refs)
  return strand_attribution_refs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference >&
LinkAttribution::strand_attribution_refs() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.speed.LinkAttribution.strand_attribution_refs)
  return strand_attribution_refs_;
}

// -------------------------------------------------------------------

// SpeedLinkParametricAttribution

// .com.here.pb.hdmap.shared.v1.core.SpeedLimit speed_limit = 1;
inline bool SpeedLinkParametricAttribution::has_speed_limit() const {
  return attribute_case() == kSpeedLimit;
}
inline void SpeedLinkParametricAttribution::set_has_speed_limit() {
  _oneof_case_[0] = kSpeedLimit;
}
inline ::com::here::pb::hdmap::shared::v1::core::SpeedLimit* SpeedLinkParametricAttribution::release_speed_limit() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution.speed_limit)
  if (has_speed_limit()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::SpeedLimit* temp = attribute_.speed_limit_;
    attribute_.speed_limit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::SpeedLimit& SpeedLinkParametricAttribution::speed_limit() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution.speed_limit)
  return has_speed_limit()
      ? *attribute_.speed_limit_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit*>(&::com::here::pb::hdmap::shared::v1::core::_SpeedLimit_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::SpeedLimit* SpeedLinkParametricAttribution::mutable_speed_limit() {
  if (!has_speed_limit()) {
    clear_attribute();
    set_has_speed_limit();
    attribute_.speed_limit_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::SpeedLimit >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution.speed_limit)
  return attribute_.speed_limit_;
}

// .com.here.pb.hdmap.shared.v1.core.SpeedCategory speed_category = 2;
inline bool SpeedLinkParametricAttribution::has_speed_category() const {
  return attribute_case() == kSpeedCategory;
}
inline void SpeedLinkParametricAttribution::set_has_speed_category() {
  _oneof_case_[0] = kSpeedCategory;
}
inline void SpeedLinkParametricAttribution::clear_speed_category() {
  if (has_speed_category()) {
    attribute_.speed_category_ = 0;
    clear_has_attribute();
  }
}
inline ::com::here::pb::hdmap::shared::v1::core::SpeedCategory SpeedLinkParametricAttribution::speed_category() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution.speed_category)
  if (has_speed_category()) {
    return static_cast< ::com::here::pb::hdmap::shared::v1::core::SpeedCategory >(attribute_.speed_category_);
  }
  return static_cast< ::com::here::pb::hdmap::shared::v1::core::SpeedCategory >(0);
}
inline void SpeedLinkParametricAttribution::set_speed_category(::com::here::pb::hdmap::shared::v1::core::SpeedCategory value) {
  if (!has_speed_category()) {
    clear_attribute();
    set_has_speed_category();
  }
  attribute_.speed_category_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution.speed_category)
}

// .com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit variable_speed_limit = 3;
inline bool SpeedLinkParametricAttribution::has_variable_speed_limit() const {
  return attribute_case() == kVariableSpeedLimit;
}
inline void SpeedLinkParametricAttribution::set_has_variable_speed_limit() {
  _oneof_case_[0] = kVariableSpeedLimit;
}
inline ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit* SpeedLinkParametricAttribution::release_variable_speed_limit() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution.variable_speed_limit)
  if (has_variable_speed_limit()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit* temp = attribute_.variable_speed_limit_;
    attribute_.variable_speed_limit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit& SpeedLinkParametricAttribution::variable_speed_limit() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution.variable_speed_limit)
  return has_variable_speed_limit()
      ? *attribute_.variable_speed_limit_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit*>(&::com::here::pb::hdmap::shared::v1::core::_VariableSpeedLimit_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit* SpeedLinkParametricAttribution::mutable_variable_speed_limit() {
  if (!has_variable_speed_limit()) {
    clear_attribute();
    set_has_variable_speed_limit();
    attribute_.variable_speed_limit_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution.variable_speed_limit)
  return attribute_.variable_speed_limit_;
}

// .com.here.pb.hdmap.shared.v1.core.ConditionalSpeedLimit conditional_speed_limit = 4;
inline bool SpeedLinkParametricAttribution::has_conditional_speed_limit() const {
  return attribute_case() == kConditionalSpeedLimit;
}
inline void SpeedLinkParametricAttribution::set_has_conditional_speed_limit() {
  _oneof_case_[0] = kConditionalSpeedLimit;
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit* SpeedLinkParametricAttribution::release_conditional_speed_limit() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution.conditional_speed_limit)
  if (has_conditional_speed_limit()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit* temp = attribute_.conditional_speed_limit_;
    attribute_.conditional_speed_limit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit& SpeedLinkParametricAttribution::conditional_speed_limit() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution.conditional_speed_limit)
  return has_conditional_speed_limit()
      ? *attribute_.conditional_speed_limit_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalSpeedLimit_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit* SpeedLinkParametricAttribution::mutable_conditional_speed_limit() {
  if (!has_conditional_speed_limit()) {
    clear_attribute();
    set_has_conditional_speed_limit();
    attribute_.conditional_speed_limit_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalSpeedLimit >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.speed.SpeedLinkParametricAttribution.conditional_speed_limit)
  return attribute_.conditional_speed_limit_;
}

inline bool SpeedLinkParametricAttribution::has_attribute() const {
  return attribute_case() != ATTRIBUTE_NOT_SET;
}
inline void SpeedLinkParametricAttribution::clear_has_attribute() {
  _oneof_case_[0] = ATTRIBUTE_NOT_SET;
}
inline SpeedLinkParametricAttribution::AttributeCase SpeedLinkParametricAttribution::attribute_case() const {
  return SpeedLinkParametricAttribution::AttributeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SpeedLinkPointAttribution

// .com.here.pb.hdmap.shared.v1.core.VariableSpeedSign variable_speed_sign = 1;
inline bool SpeedLinkPointAttribution::has_variable_speed_sign() const {
  return attribute_case() == kVariableSpeedSign;
}
inline void SpeedLinkPointAttribution::set_has_variable_speed_sign() {
  _oneof_case_[0] = kVariableSpeedSign;
}
inline ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign* SpeedLinkPointAttribution::release_variable_speed_sign() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution.variable_speed_sign)
  if (has_variable_speed_sign()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign* temp = attribute_.variable_speed_sign_;
    attribute_.variable_speed_sign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign& SpeedLinkPointAttribution::variable_speed_sign() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution.variable_speed_sign)
  return has_variable_speed_sign()
      ? *attribute_.variable_speed_sign_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign*>(&::com::here::pb::hdmap::shared::v1::core::_VariableSpeedSign_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign* SpeedLinkPointAttribution::mutable_variable_speed_sign() {
  if (!has_variable_speed_sign()) {
    clear_attribute();
    set_has_variable_speed_sign();
    attribute_.variable_speed_sign_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.speed.SpeedLinkPointAttribution.variable_speed_sign)
  return attribute_.variable_speed_sign_;
}

inline bool SpeedLinkPointAttribution::has_attribute() const {
  return attribute_case() != ATTRIBUTE_NOT_SET;
}
inline void SpeedLinkPointAttribution::clear_has_attribute() {
  _oneof_case_[0] = ATTRIBUTE_NOT_SET;
}
inline SpeedLinkPointAttribution::AttributeCase SpeedLinkPointAttribution::attribute_case() const {
  return SpeedLinkPointAttribution::AttributeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace speed
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fspeed_2flayer_2dspeed_2dattributes_2eproto
