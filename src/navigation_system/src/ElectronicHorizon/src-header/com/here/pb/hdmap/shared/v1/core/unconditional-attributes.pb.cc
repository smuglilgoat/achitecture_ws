// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/shared/v1/core/unconditional-attributes.proto

#include "com/here/pb/hdmap/shared/v1/core/unconditional-attributes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace shared {
namespace v1 {
namespace core {
class CoreMapReferenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CoreMapReference> _instance;
} _CoreMapReference_default_instance_;
class VariableSpeedLimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VariableSpeedLimit> _instance;
} _VariableSpeedLimit_default_instance_;
class TrafficMessageChannelCodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficMessageChannelCode> _instance;
} _TrafficMessageChannelCode_default_instance_;
class VariableSpeedSignDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VariableSpeedSign> _instance;
} _VariableSpeedSign_default_instance_;
class ComplexIntersectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComplexIntersection> _instance;
} _ComplexIntersection_default_instance_;
class BuiltUpAreaRoadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BuiltUpAreaRoad> _instance;
} _BuiltUpAreaRoad_default_instance_;
class RoadDividerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadDivider> _instance;
} _RoadDivider_default_instance_;
class RoadIdentifiersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadIdentifiers> _instance;
} _RoadIdentifiers_default_instance_;
}  // namespace core
}  // namespace v1
}  // namespace shared
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
static void InitDefaultsCoreMapReference_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_CoreMapReference_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::CoreMapReference();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::CoreMapReference::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CoreMapReference_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCoreMapReference_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto}, {}};

static void InitDefaultsVariableSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_VariableSpeedLimit_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VariableSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVariableSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto}, {}};

static void InitDefaultsTrafficMessageChannelCode_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_TrafficMessageChannelCode_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficMessageChannelCode_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficMessageChannelCode_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto}, {}};

static void InitDefaultsVariableSpeedSign_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_VariableSpeedSign_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VariableSpeedSign_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVariableSpeedSign_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto}, {}};

static void InitDefaultsComplexIntersection_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_ComplexIntersection_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ComplexIntersection_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsComplexIntersection_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto}, {}};

static void InitDefaultsBuiltUpAreaRoad_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_BuiltUpAreaRoad_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BuiltUpAreaRoad_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBuiltUpAreaRoad_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto}, {}};

static void InitDefaultsRoadDivider_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_RoadDivider_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::RoadDivider();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::RoadDivider::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RoadDivider_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoadDivider_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto}, {}};

static void InitDefaultsRoadIdentifiers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::here::pb::hdmap::shared::v1::core::_RoadIdentifiers_default_instance_;
    new (ptr) ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RoadIdentifiers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoadIdentifiers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto}, {}};

void InitDefaults_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CoreMapReference_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VariableSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficMessageChannelCode_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VariableSpeedSign_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ComplexIntersection_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BuiltUpAreaRoad_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadDivider_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadIdentifiers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[8];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::CoreMapReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::CoreMapReference, pvid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit, variable_speed_sign_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode, location_code_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode, location_disposition_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode, location_table_number_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode, ebu_country_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign, variable_speed_sign_id_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign, sign_location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ComplexIntersection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::ComplexIntersection, intersection_category_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad, is_built_up_area_road_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad, is_verified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadDivider, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadDivider, divider_type_),
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadDivider, applies_to_intersection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers, route_type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::CoreMapReference)},
  { 6, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit)},
  { 12, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode)},
  { 21, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign)},
  { 28, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::ComplexIntersection)},
  { 34, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad)},
  { 41, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::RoadDivider)},
  { 48, -1, sizeof(::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_CoreMapReference_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_VariableSpeedLimit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_TrafficMessageChannelCode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_VariableSpeedSign_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_ComplexIntersection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_BuiltUpAreaRoad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_RoadDivider_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::here::pb::hdmap::shared::v1::core::_RoadIdentifiers_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto = {
  {}, AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto, "com/here/pb/hdmap/shared/v1/core/unconditional-attributes.proto", schemas,
  file_default_instances, TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto::offsets,
  file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto, 8, file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto, file_level_service_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto,
};

const char descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[] =
  "\n\?com/here/pb/hdmap/shared/v1/core/uncon"
  "ditional-attributes.proto\022 com.here.pb.h"
  "dmap.shared.v1.core\032-com/here/pb/hdmap/s"
  "hared/v1/core/common.proto\" \n\020CoreMapRef"
  "erence\022\014\n\004pvid\030\001 \001(\r\"4\n\022VariableSpeedLim"
  "it\022\036\n\026variable_speed_sign_id\030\001 \001(\t\"\227\003\n\031T"
  "rafficMessageChannelCode\022\025\n\rlocation_cod"
  "e\030\001 \001(\r\022m\n\024location_disposition\030\002 \001(\0162O."
  "com.here.pb.hdmap.shared.v1.core.Traffic"
  "MessageChannelCode.LocationDisposition\022\035"
  "\n\025location_table_number\030\003 \001(\r\022\030\n\020ebu_cou"
  "ntry_code\030\004 \001(\t\"\272\001\n\023LocationDisposition\022"
  "\037\n\033LocationDisposition_UNKNOWN\020\000\022\037\n\033EXTE"
  "RNAL_POSITIVE_DIRECTION\020\001\022\037\n\033EXTERNAL_NE"
  "GATIVE_DIRECTION\020\002\022\037\n\033INTERNAL_POSITIVE_"
  "DIRECTION\020\003\022\037\n\033INTERNAL_NEGATIVE_DIRECTI"
  "ON\020\004\"\331\001\n\021VariableSpeedSign\022\036\n\026variable_s"
  "peed_sign_id\030\001 \001(\t\022W\n\rsign_location\030\002 \001("
  "\0162@.com.here.pb.hdmap.shared.v1.core.Var"
  "iableSpeedSign.SignLocation\"K\n\014SignLocat"
  "ion\022\030\n\024SignLocation_UNKNOWN\020\000\022\010\n\004LEFT\020\001\022"
  "\t\n\005RIGHT\020\002\022\014\n\010OVERHEAD\020\003\"\303\002\n\023ComplexInte"
  "rsection\022i\n\025intersection_category\030\001 \001(\0162"
  "J.com.here.pb.hdmap.shared.v1.core.Compl"
  "exIntersection.IntersectionCategory\"\300\001\n\024"
  "IntersectionCategory\022\037\n\033ComplexIntersect"
  "ion_UNKNOWN\020\000\022\031\n\025INTERSECTION_INTERNAL\020\001"
  "\022\r\n\tMANOEUVRE\020\002\022\021\n\rINDESCRIBABLE\020\003\022\016\n\nRO"
  "UNDABOUT\020\004\022\036\n\032UNDEFINED_TRAFFIC_INTERNAL"
  "\020\005\022\032\n\026SPECIAL_TRAFFIC_FIGURE\020\006\"E\n\017BuiltU"
  "pAreaRoad\022\035\n\025is_built_up_area_road\030\001 \001(\010"
  "\022\023\n\013is_verified\030\002 \001(\010\"\350\002\n\013RoadDivider\022S\n"
  "\014divider_type\030\001 \001(\0162=.com.here.pb.hdmap."
  "shared.v1.core.RoadDivider.RoadDividerTy"
  "pe\022d\n\027applies_to_intersection\030\002 \001(\0162C.co"
  "m.here.pb.hdmap.shared.v1.core.RoadDivid"
  "er.IntersectionsAffected\"G\n\017RoadDividerT"
  "ype\022\033\n\027RoadDividerType_UNKNOWN\020\000\022\t\n\005LEGA"
  "L\020\001\022\014\n\010PHYSICAL\020\002\"U\n\025IntersectionsAffect"
  "ed\022\036\n\032IntersectionsAffected_NONE\020\000\022\t\n\005ST"
  "ART\020\001\022\007\n\003END\020\002\022\010\n\004BOTH\020\003\"\363\001\n\017RoadIdentif"
  "iers\022O\n\nroute_type\030\001 \001(\0162;.com.here.pb.h"
  "dmap.shared.v1.core.RoadIdentifiers.Rout"
  "eType\"\216\001\n\tRouteType\022\025\n\021RouteType_UNKNOWN"
  "\020\000\022\020\n\014LEVEL_1_ROAD\020\001\022\020\n\014LEVEL_2_ROAD\020\002\022\020"
  "\n\014LEVEL_3_ROAD\020\003\022\020\n\014LEVEL_4_ROAD\020\004\022\020\n\014LE"
  "VEL_5_ROAD\020\005\022\020\n\014LEVEL_6_ROAD\020\006*`\n\017Functi"
  "onalClass\022\033\n\027FunctionalClass_UNKNOWN\020\000\022\010"
  "\n\004FC_1\020\001\022\010\n\004FC_2\020\002\022\010\n\004FC_3\020\003\022\010\n\004FC_4\020\004\022\010"
  "\n\004FC_5\020\005*\233\002\n\rSpeedCategory\022\031\n\025SpeedCateg"
  "ory_UNKNOWN\020\000\022\031\n\025OVER_130_KMPH__80_MPH\020\001"
  "\022\037\n\033BTW_101_130_KMPH__65_80_MPH\020\002\022\036\n\032BTW"
  "_91_100_KMPH__55_64_MPH\020\003\022\035\n\031BTW_71_90_K"
  "MPH__41_54_MPH\020\004\022\035\n\031BTW_51_70_KMPH__31_4"
  "0_MPH\020\005\022\035\n\031BTW_31_50_KMPH__21_30_MPH\020\006\022\034"
  "\n\030BTW_11_30_KMPH__6_20_MPH\020\007\022\030\n\024UNDER_11"
  "_KMPH__6_MPH\020\010b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto = {
  false, InitDefaults_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto, 
  descriptor_table_protodef_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto,
  "com/here/pb/hdmap/shared/v1/core/unconditional-attributes.proto", &assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto, 2262,
};

void AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fcommon_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto = []() { AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto(); return true; }();
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace shared {
namespace v1 {
namespace core {
const ::google::protobuf::EnumDescriptor* TrafficMessageChannelCode_LocationDisposition_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[0];
}
bool TrafficMessageChannelCode_LocationDisposition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficMessageChannelCode_LocationDisposition TrafficMessageChannelCode::LocationDisposition_UNKNOWN;
const TrafficMessageChannelCode_LocationDisposition TrafficMessageChannelCode::EXTERNAL_POSITIVE_DIRECTION;
const TrafficMessageChannelCode_LocationDisposition TrafficMessageChannelCode::EXTERNAL_NEGATIVE_DIRECTION;
const TrafficMessageChannelCode_LocationDisposition TrafficMessageChannelCode::INTERNAL_POSITIVE_DIRECTION;
const TrafficMessageChannelCode_LocationDisposition TrafficMessageChannelCode::INTERNAL_NEGATIVE_DIRECTION;
const TrafficMessageChannelCode_LocationDisposition TrafficMessageChannelCode::LocationDisposition_MIN;
const TrafficMessageChannelCode_LocationDisposition TrafficMessageChannelCode::LocationDisposition_MAX;
const int TrafficMessageChannelCode::LocationDisposition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VariableSpeedSign_SignLocation_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[1];
}
bool VariableSpeedSign_SignLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VariableSpeedSign_SignLocation VariableSpeedSign::SignLocation_UNKNOWN;
const VariableSpeedSign_SignLocation VariableSpeedSign::LEFT;
const VariableSpeedSign_SignLocation VariableSpeedSign::RIGHT;
const VariableSpeedSign_SignLocation VariableSpeedSign::OVERHEAD;
const VariableSpeedSign_SignLocation VariableSpeedSign::SignLocation_MIN;
const VariableSpeedSign_SignLocation VariableSpeedSign::SignLocation_MAX;
const int VariableSpeedSign::SignLocation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ComplexIntersection_IntersectionCategory_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[2];
}
bool ComplexIntersection_IntersectionCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ComplexIntersection_IntersectionCategory ComplexIntersection::ComplexIntersection_UNKNOWN;
const ComplexIntersection_IntersectionCategory ComplexIntersection::INTERSECTION_INTERNAL;
const ComplexIntersection_IntersectionCategory ComplexIntersection::MANOEUVRE;
const ComplexIntersection_IntersectionCategory ComplexIntersection::INDESCRIBABLE;
const ComplexIntersection_IntersectionCategory ComplexIntersection::ROUNDABOUT;
const ComplexIntersection_IntersectionCategory ComplexIntersection::UNDEFINED_TRAFFIC_INTERNAL;
const ComplexIntersection_IntersectionCategory ComplexIntersection::SPECIAL_TRAFFIC_FIGURE;
const ComplexIntersection_IntersectionCategory ComplexIntersection::IntersectionCategory_MIN;
const ComplexIntersection_IntersectionCategory ComplexIntersection::IntersectionCategory_MAX;
const int ComplexIntersection::IntersectionCategory_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RoadDivider_RoadDividerType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[3];
}
bool RoadDivider_RoadDividerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadDivider_RoadDividerType RoadDivider::RoadDividerType_UNKNOWN;
const RoadDivider_RoadDividerType RoadDivider::LEGAL;
const RoadDivider_RoadDividerType RoadDivider::PHYSICAL;
const RoadDivider_RoadDividerType RoadDivider::RoadDividerType_MIN;
const RoadDivider_RoadDividerType RoadDivider::RoadDividerType_MAX;
const int RoadDivider::RoadDividerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RoadDivider_IntersectionsAffected_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[4];
}
bool RoadDivider_IntersectionsAffected_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadDivider_IntersectionsAffected RoadDivider::IntersectionsAffected_NONE;
const RoadDivider_IntersectionsAffected RoadDivider::START;
const RoadDivider_IntersectionsAffected RoadDivider::END;
const RoadDivider_IntersectionsAffected RoadDivider::BOTH;
const RoadDivider_IntersectionsAffected RoadDivider::IntersectionsAffected_MIN;
const RoadDivider_IntersectionsAffected RoadDivider::IntersectionsAffected_MAX;
const int RoadDivider::IntersectionsAffected_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RoadIdentifiers_RouteType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[5];
}
bool RoadIdentifiers_RouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadIdentifiers_RouteType RoadIdentifiers::RouteType_UNKNOWN;
const RoadIdentifiers_RouteType RoadIdentifiers::LEVEL_1_ROAD;
const RoadIdentifiers_RouteType RoadIdentifiers::LEVEL_2_ROAD;
const RoadIdentifiers_RouteType RoadIdentifiers::LEVEL_3_ROAD;
const RoadIdentifiers_RouteType RoadIdentifiers::LEVEL_4_ROAD;
const RoadIdentifiers_RouteType RoadIdentifiers::LEVEL_5_ROAD;
const RoadIdentifiers_RouteType RoadIdentifiers::LEVEL_6_ROAD;
const RoadIdentifiers_RouteType RoadIdentifiers::RouteType_MIN;
const RoadIdentifiers_RouteType RoadIdentifiers::RouteType_MAX;
const int RoadIdentifiers::RouteType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FunctionalClass_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[6];
}
bool FunctionalClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SpeedCategory_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return file_level_enum_descriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[7];
}
bool SpeedCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CoreMapReference::InitAsDefaultInstance() {
}
class CoreMapReference::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoreMapReference::kPvidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoreMapReference::CoreMapReference()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
}
CoreMapReference::CoreMapReference(const CoreMapReference& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pvid_ = from.pvid_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
}

void CoreMapReference::SharedCtor() {
  pvid_ = 0u;
}

CoreMapReference::~CoreMapReference() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
  SharedDtor();
}

void CoreMapReference::SharedDtor() {
}

void CoreMapReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoreMapReference& CoreMapReference::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CoreMapReference_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void CoreMapReference::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pvid_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CoreMapReference::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CoreMapReference*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 pvid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_pvid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CoreMapReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pvid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CoreMapReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pvid = 1;
  if (this->pvid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pvid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
}

::google::protobuf::uint8* CoreMapReference::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pvid = 1;
  if (this->pvid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pvid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
  return target;
}

size_t CoreMapReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pvid = 1;
  if (this->pvid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pvid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoreMapReference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
  GOOGLE_DCHECK_NE(&from, this);
  const CoreMapReference* source =
      ::google::protobuf::DynamicCastToGenerated<CoreMapReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
    MergeFrom(*source);
  }
}

void CoreMapReference::MergeFrom(const CoreMapReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pvid() != 0) {
    set_pvid(from.pvid());
  }
}

void CoreMapReference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoreMapReference::CopyFrom(const CoreMapReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.CoreMapReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoreMapReference::IsInitialized() const {
  return true;
}

void CoreMapReference::Swap(CoreMapReference* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoreMapReference::InternalSwap(CoreMapReference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pvid_, other->pvid_);
}

::google::protobuf::Metadata CoreMapReference::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VariableSpeedLimit::InitAsDefaultInstance() {
}
class VariableSpeedLimit::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariableSpeedLimit::kVariableSpeedSignIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariableSpeedLimit::VariableSpeedLimit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
}
VariableSpeedLimit::VariableSpeedLimit(const VariableSpeedLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  variable_speed_sign_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variable_speed_sign_id().size() > 0) {
    variable_speed_sign_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_speed_sign_id_);
  }
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
}

void VariableSpeedLimit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VariableSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  variable_speed_sign_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VariableSpeedLimit::~VariableSpeedLimit() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
  SharedDtor();
}

void VariableSpeedLimit::SharedDtor() {
  variable_speed_sign_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VariableSpeedLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VariableSpeedLimit& VariableSpeedLimit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VariableSpeedLimit_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void VariableSpeedLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variable_speed_sign_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VariableSpeedLimit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VariableSpeedLimit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string variable_speed_sign_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit.variable_speed_sign_id");
        object = msg->mutable_variable_speed_sign_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VariableSpeedLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string variable_speed_sign_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variable_speed_sign_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variable_speed_sign_id().data(), static_cast<int>(this->variable_speed_sign_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit.variable_speed_sign_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VariableSpeedLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variable_speed_sign_id = 1;
  if (this->variable_speed_sign_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variable_speed_sign_id().data(), static_cast<int>(this->variable_speed_sign_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit.variable_speed_sign_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variable_speed_sign_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
}

::google::protobuf::uint8* VariableSpeedLimit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variable_speed_sign_id = 1;
  if (this->variable_speed_sign_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variable_speed_sign_id().data(), static_cast<int>(this->variable_speed_sign_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit.variable_speed_sign_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variable_speed_sign_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
  return target;
}

size_t VariableSpeedLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string variable_speed_sign_id = 1;
  if (this->variable_speed_sign_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variable_speed_sign_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariableSpeedLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const VariableSpeedLimit* source =
      ::google::protobuf::DynamicCastToGenerated<VariableSpeedLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
    MergeFrom(*source);
  }
}

void VariableSpeedLimit::MergeFrom(const VariableSpeedLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.variable_speed_sign_id().size() > 0) {

    variable_speed_sign_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_speed_sign_id_);
  }
}

void VariableSpeedLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableSpeedLimit::CopyFrom(const VariableSpeedLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableSpeedLimit::IsInitialized() const {
  return true;
}

void VariableSpeedLimit::Swap(VariableSpeedLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VariableSpeedLimit::InternalSwap(VariableSpeedLimit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  variable_speed_sign_id_.Swap(&other->variable_speed_sign_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata VariableSpeedLimit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TrafficMessageChannelCode::InitAsDefaultInstance() {
}
class TrafficMessageChannelCode::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficMessageChannelCode::kLocationCodeFieldNumber;
const int TrafficMessageChannelCode::kLocationDispositionFieldNumber;
const int TrafficMessageChannelCode::kLocationTableNumberFieldNumber;
const int TrafficMessageChannelCode::kEbuCountryCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficMessageChannelCode::TrafficMessageChannelCode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
}
TrafficMessageChannelCode::TrafficMessageChannelCode(const TrafficMessageChannelCode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ebu_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ebu_country_code().size() > 0) {
    ebu_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ebu_country_code_);
  }
  ::memcpy(&location_code_, &from.location_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&location_table_number_) -
    reinterpret_cast<char*>(&location_code_)) + sizeof(location_table_number_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
}

void TrafficMessageChannelCode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TrafficMessageChannelCode_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  ebu_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_table_number_) -
      reinterpret_cast<char*>(&location_code_)) + sizeof(location_table_number_));
}

TrafficMessageChannelCode::~TrafficMessageChannelCode() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
  SharedDtor();
}

void TrafficMessageChannelCode::SharedDtor() {
  ebu_country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficMessageChannelCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficMessageChannelCode& TrafficMessageChannelCode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TrafficMessageChannelCode_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void TrafficMessageChannelCode::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ebu_country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_table_number_) -
      reinterpret_cast<char*>(&location_code_)) + sizeof(location_table_number_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficMessageChannelCode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TrafficMessageChannelCode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 location_code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_location_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode.LocationDisposition location_disposition = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_location_disposition(static_cast<::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode_LocationDisposition>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 location_table_number = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_location_table_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string ebu_country_code = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode.ebu_country_code");
        object = msg->mutable_ebu_country_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficMessageChannelCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 location_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode.LocationDisposition location_disposition = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_location_disposition(static_cast< ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode_LocationDisposition >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 location_table_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_table_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ebu_country_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ebu_country_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ebu_country_code().data(), static_cast<int>(this->ebu_country_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode.ebu_country_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficMessageChannelCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 location_code = 1;
  if (this->location_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->location_code(), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode.LocationDisposition location_disposition = 2;
  if (this->location_disposition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->location_disposition(), output);
  }

  // uint32 location_table_number = 3;
  if (this->location_table_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->location_table_number(), output);
  }

  // string ebu_country_code = 4;
  if (this->ebu_country_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ebu_country_code().data(), static_cast<int>(this->ebu_country_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode.ebu_country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ebu_country_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
}

::google::protobuf::uint8* TrafficMessageChannelCode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 location_code = 1;
  if (this->location_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->location_code(), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode.LocationDisposition location_disposition = 2;
  if (this->location_disposition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->location_disposition(), target);
  }

  // uint32 location_table_number = 3;
  if (this->location_table_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->location_table_number(), target);
  }

  // string ebu_country_code = 4;
  if (this->ebu_country_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ebu_country_code().data(), static_cast<int>(this->ebu_country_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode.ebu_country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ebu_country_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
  return target;
}

size_t TrafficMessageChannelCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ebu_country_code = 4;
  if (this->ebu_country_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ebu_country_code());
  }

  // uint32 location_code = 1;
  if (this->location_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->location_code());
  }

  // .com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode.LocationDisposition location_disposition = 2;
  if (this->location_disposition() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->location_disposition());
  }

  // uint32 location_table_number = 3;
  if (this->location_table_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->location_table_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficMessageChannelCode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficMessageChannelCode* source =
      ::google::protobuf::DynamicCastToGenerated<TrafficMessageChannelCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
    MergeFrom(*source);
  }
}

void TrafficMessageChannelCode::MergeFrom(const TrafficMessageChannelCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ebu_country_code().size() > 0) {

    ebu_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ebu_country_code_);
  }
  if (from.location_code() != 0) {
    set_location_code(from.location_code());
  }
  if (from.location_disposition() != 0) {
    set_location_disposition(from.location_disposition());
  }
  if (from.location_table_number() != 0) {
    set_location_table_number(from.location_table_number());
  }
}

void TrafficMessageChannelCode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficMessageChannelCode::CopyFrom(const TrafficMessageChannelCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficMessageChannelCode::IsInitialized() const {
  return true;
}

void TrafficMessageChannelCode::Swap(TrafficMessageChannelCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficMessageChannelCode::InternalSwap(TrafficMessageChannelCode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ebu_country_code_.Swap(&other->ebu_country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_code_, other->location_code_);
  swap(location_disposition_, other->location_disposition_);
  swap(location_table_number_, other->location_table_number_);
}

::google::protobuf::Metadata TrafficMessageChannelCode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VariableSpeedSign::InitAsDefaultInstance() {
}
class VariableSpeedSign::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariableSpeedSign::kVariableSpeedSignIdFieldNumber;
const int VariableSpeedSign::kSignLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariableSpeedSign::VariableSpeedSign()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
}
VariableSpeedSign::VariableSpeedSign(const VariableSpeedSign& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  variable_speed_sign_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variable_speed_sign_id().size() > 0) {
    variable_speed_sign_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_speed_sign_id_);
  }
  sign_location_ = from.sign_location_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
}

void VariableSpeedSign::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VariableSpeedSign_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  variable_speed_sign_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_location_ = 0;
}

VariableSpeedSign::~VariableSpeedSign() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
  SharedDtor();
}

void VariableSpeedSign::SharedDtor() {
  variable_speed_sign_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VariableSpeedSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VariableSpeedSign& VariableSpeedSign::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VariableSpeedSign_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void VariableSpeedSign::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variable_speed_sign_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_location_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VariableSpeedSign::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VariableSpeedSign*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string variable_speed_sign_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.here.pb.hdmap.shared.v1.core.VariableSpeedSign.variable_speed_sign_id");
        object = msg->mutable_variable_speed_sign_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.VariableSpeedSign.SignLocation sign_location = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_sign_location(static_cast<::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign_SignLocation>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VariableSpeedSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string variable_speed_sign_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variable_speed_sign_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variable_speed_sign_id().data(), static_cast<int>(this->variable_speed_sign_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.here.pb.hdmap.shared.v1.core.VariableSpeedSign.variable_speed_sign_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.VariableSpeedSign.SignLocation sign_location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sign_location(static_cast< ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign_SignLocation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VariableSpeedSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variable_speed_sign_id = 1;
  if (this->variable_speed_sign_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variable_speed_sign_id().data(), static_cast<int>(this->variable_speed_sign_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.here.pb.hdmap.shared.v1.core.VariableSpeedSign.variable_speed_sign_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variable_speed_sign_id(), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.VariableSpeedSign.SignLocation sign_location = 2;
  if (this->sign_location() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sign_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
}

::google::protobuf::uint8* VariableSpeedSign::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variable_speed_sign_id = 1;
  if (this->variable_speed_sign_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variable_speed_sign_id().data(), static_cast<int>(this->variable_speed_sign_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.here.pb.hdmap.shared.v1.core.VariableSpeedSign.variable_speed_sign_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variable_speed_sign_id(), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.VariableSpeedSign.SignLocation sign_location = 2;
  if (this->sign_location() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sign_location(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
  return target;
}

size_t VariableSpeedSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string variable_speed_sign_id = 1;
  if (this->variable_speed_sign_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variable_speed_sign_id());
  }

  // .com.here.pb.hdmap.shared.v1.core.VariableSpeedSign.SignLocation sign_location = 2;
  if (this->sign_location() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sign_location());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariableSpeedSign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
  GOOGLE_DCHECK_NE(&from, this);
  const VariableSpeedSign* source =
      ::google::protobuf::DynamicCastToGenerated<VariableSpeedSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
    MergeFrom(*source);
  }
}

void VariableSpeedSign::MergeFrom(const VariableSpeedSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.variable_speed_sign_id().size() > 0) {

    variable_speed_sign_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_speed_sign_id_);
  }
  if (from.sign_location() != 0) {
    set_sign_location(from.sign_location());
  }
}

void VariableSpeedSign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableSpeedSign::CopyFrom(const VariableSpeedSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.VariableSpeedSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableSpeedSign::IsInitialized() const {
  return true;
}

void VariableSpeedSign::Swap(VariableSpeedSign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VariableSpeedSign::InternalSwap(VariableSpeedSign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  variable_speed_sign_id_.Swap(&other->variable_speed_sign_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sign_location_, other->sign_location_);
}

::google::protobuf::Metadata VariableSpeedSign::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ComplexIntersection::InitAsDefaultInstance() {
}
class ComplexIntersection::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComplexIntersection::kIntersectionCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComplexIntersection::ComplexIntersection()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
}
ComplexIntersection::ComplexIntersection(const ComplexIntersection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  intersection_category_ = from.intersection_category_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
}

void ComplexIntersection::SharedCtor() {
  intersection_category_ = 0;
}

ComplexIntersection::~ComplexIntersection() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
  SharedDtor();
}

void ComplexIntersection::SharedDtor() {
}

void ComplexIntersection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComplexIntersection& ComplexIntersection::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ComplexIntersection_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void ComplexIntersection::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intersection_category_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ComplexIntersection::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ComplexIntersection*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.ComplexIntersection.IntersectionCategory intersection_category = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_intersection_category(static_cast<::com::here::pb::hdmap::shared::v1::core::ComplexIntersection_IntersectionCategory>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ComplexIntersection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.ComplexIntersection.IntersectionCategory intersection_category = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_intersection_category(static_cast< ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection_IntersectionCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ComplexIntersection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.ComplexIntersection.IntersectionCategory intersection_category = 1;
  if (this->intersection_category() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->intersection_category(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
}

::google::protobuf::uint8* ComplexIntersection::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.ComplexIntersection.IntersectionCategory intersection_category = 1;
  if (this->intersection_category() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->intersection_category(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
  return target;
}

size_t ComplexIntersection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.ComplexIntersection.IntersectionCategory intersection_category = 1;
  if (this->intersection_category() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->intersection_category());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComplexIntersection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
  GOOGLE_DCHECK_NE(&from, this);
  const ComplexIntersection* source =
      ::google::protobuf::DynamicCastToGenerated<ComplexIntersection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
    MergeFrom(*source);
  }
}

void ComplexIntersection::MergeFrom(const ComplexIntersection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.intersection_category() != 0) {
    set_intersection_category(from.intersection_category());
  }
}

void ComplexIntersection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexIntersection::CopyFrom(const ComplexIntersection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.ComplexIntersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexIntersection::IsInitialized() const {
  return true;
}

void ComplexIntersection::Swap(ComplexIntersection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComplexIntersection::InternalSwap(ComplexIntersection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(intersection_category_, other->intersection_category_);
}

::google::protobuf::Metadata ComplexIntersection::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BuiltUpAreaRoad::InitAsDefaultInstance() {
}
class BuiltUpAreaRoad::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuiltUpAreaRoad::kIsBuiltUpAreaRoadFieldNumber;
const int BuiltUpAreaRoad::kIsVerifiedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuiltUpAreaRoad::BuiltUpAreaRoad()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
}
BuiltUpAreaRoad::BuiltUpAreaRoad(const BuiltUpAreaRoad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_built_up_area_road_, &from.is_built_up_area_road_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_verified_) -
    reinterpret_cast<char*>(&is_built_up_area_road_)) + sizeof(is_verified_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
}

void BuiltUpAreaRoad::SharedCtor() {
  ::memset(&is_built_up_area_road_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_verified_) -
      reinterpret_cast<char*>(&is_built_up_area_road_)) + sizeof(is_verified_));
}

BuiltUpAreaRoad::~BuiltUpAreaRoad() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
  SharedDtor();
}

void BuiltUpAreaRoad::SharedDtor() {
}

void BuiltUpAreaRoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuiltUpAreaRoad& BuiltUpAreaRoad::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BuiltUpAreaRoad_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void BuiltUpAreaRoad::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_built_up_area_road_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_verified_) -
      reinterpret_cast<char*>(&is_built_up_area_road_)) + sizeof(is_verified_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BuiltUpAreaRoad::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BuiltUpAreaRoad*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool is_built_up_area_road = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_is_built_up_area_road(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_verified = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_verified(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BuiltUpAreaRoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_built_up_area_road = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_built_up_area_road_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_verified = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BuiltUpAreaRoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_built_up_area_road = 1;
  if (this->is_built_up_area_road() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_built_up_area_road(), output);
  }

  // bool is_verified = 2;
  if (this->is_verified() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_verified(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
}

::google::protobuf::uint8* BuiltUpAreaRoad::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_built_up_area_road = 1;
  if (this->is_built_up_area_road() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_built_up_area_road(), target);
  }

  // bool is_verified = 2;
  if (this->is_verified() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_verified(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
  return target;
}

size_t BuiltUpAreaRoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_built_up_area_road = 1;
  if (this->is_built_up_area_road() != 0) {
    total_size += 1 + 1;
  }

  // bool is_verified = 2;
  if (this->is_verified() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuiltUpAreaRoad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
  GOOGLE_DCHECK_NE(&from, this);
  const BuiltUpAreaRoad* source =
      ::google::protobuf::DynamicCastToGenerated<BuiltUpAreaRoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
    MergeFrom(*source);
  }
}

void BuiltUpAreaRoad::MergeFrom(const BuiltUpAreaRoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_built_up_area_road() != 0) {
    set_is_built_up_area_road(from.is_built_up_area_road());
  }
  if (from.is_verified() != 0) {
    set_is_verified(from.is_verified());
  }
}

void BuiltUpAreaRoad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuiltUpAreaRoad::CopyFrom(const BuiltUpAreaRoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuiltUpAreaRoad::IsInitialized() const {
  return true;
}

void BuiltUpAreaRoad::Swap(BuiltUpAreaRoad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuiltUpAreaRoad::InternalSwap(BuiltUpAreaRoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_built_up_area_road_, other->is_built_up_area_road_);
  swap(is_verified_, other->is_verified_);
}

::google::protobuf::Metadata BuiltUpAreaRoad::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RoadDivider::InitAsDefaultInstance() {
}
class RoadDivider::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadDivider::kDividerTypeFieldNumber;
const int RoadDivider::kAppliesToIntersectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadDivider::RoadDivider()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.RoadDivider)
}
RoadDivider::RoadDivider(const RoadDivider& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&divider_type_, &from.divider_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&applies_to_intersection_) -
    reinterpret_cast<char*>(&divider_type_)) + sizeof(applies_to_intersection_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.RoadDivider)
}

void RoadDivider::SharedCtor() {
  ::memset(&divider_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applies_to_intersection_) -
      reinterpret_cast<char*>(&divider_type_)) + sizeof(applies_to_intersection_));
}

RoadDivider::~RoadDivider() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.RoadDivider)
  SharedDtor();
}

void RoadDivider::SharedDtor() {
}

void RoadDivider::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadDivider& RoadDivider::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RoadDivider_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void RoadDivider::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.RoadDivider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&divider_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applies_to_intersection_) -
      reinterpret_cast<char*>(&divider_type_)) + sizeof(applies_to_intersection_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoadDivider::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RoadDivider*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.RoadDivider.RoadDividerType divider_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_divider_type(static_cast<::com::here::pb::hdmap::shared::v1::core::RoadDivider_RoadDividerType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .com.here.pb.hdmap.shared.v1.core.RoadDivider.IntersectionsAffected applies_to_intersection = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_applies_to_intersection(static_cast<::com::here::pb::hdmap::shared::v1::core::RoadDivider_IntersectionsAffected>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoadDivider::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.RoadDivider)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.RoadDivider.RoadDividerType divider_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_divider_type(static_cast< ::com::here::pb::hdmap::shared::v1::core::RoadDivider_RoadDividerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.shared.v1.core.RoadDivider.IntersectionsAffected applies_to_intersection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_applies_to_intersection(static_cast< ::com::here::pb::hdmap::shared::v1::core::RoadDivider_IntersectionsAffected >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.RoadDivider)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.RoadDivider)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoadDivider::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.RoadDivider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadDivider.RoadDividerType divider_type = 1;
  if (this->divider_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->divider_type(), output);
  }

  // .com.here.pb.hdmap.shared.v1.core.RoadDivider.IntersectionsAffected applies_to_intersection = 2;
  if (this->applies_to_intersection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->applies_to_intersection(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.RoadDivider)
}

::google::protobuf::uint8* RoadDivider::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.RoadDivider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadDivider.RoadDividerType divider_type = 1;
  if (this->divider_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->divider_type(), target);
  }

  // .com.here.pb.hdmap.shared.v1.core.RoadDivider.IntersectionsAffected applies_to_intersection = 2;
  if (this->applies_to_intersection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->applies_to_intersection(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.RoadDivider)
  return target;
}

size_t RoadDivider::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.RoadDivider)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadDivider.RoadDividerType divider_type = 1;
  if (this->divider_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->divider_type());
  }

  // .com.here.pb.hdmap.shared.v1.core.RoadDivider.IntersectionsAffected applies_to_intersection = 2;
  if (this->applies_to_intersection() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->applies_to_intersection());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadDivider::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.RoadDivider)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadDivider* source =
      ::google::protobuf::DynamicCastToGenerated<RoadDivider>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.RoadDivider)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.RoadDivider)
    MergeFrom(*source);
  }
}

void RoadDivider::MergeFrom(const RoadDivider& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.RoadDivider)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.divider_type() != 0) {
    set_divider_type(from.divider_type());
  }
  if (from.applies_to_intersection() != 0) {
    set_applies_to_intersection(from.applies_to_intersection());
  }
}

void RoadDivider::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.RoadDivider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadDivider::CopyFrom(const RoadDivider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.RoadDivider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadDivider::IsInitialized() const {
  return true;
}

void RoadDivider::Swap(RoadDivider* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadDivider::InternalSwap(RoadDivider* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(divider_type_, other->divider_type_);
  swap(applies_to_intersection_, other->applies_to_intersection_);
}

::google::protobuf::Metadata RoadDivider::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RoadIdentifiers::InitAsDefaultInstance() {
}
class RoadIdentifiers::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadIdentifiers::kRouteTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadIdentifiers::RoadIdentifiers()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
}
RoadIdentifiers::RoadIdentifiers(const RoadIdentifiers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  route_type_ = from.route_type_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
}

void RoadIdentifiers::SharedCtor() {
  route_type_ = 0;
}

RoadIdentifiers::~RoadIdentifiers() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
  SharedDtor();
}

void RoadIdentifiers::SharedDtor() {
}

void RoadIdentifiers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadIdentifiers& RoadIdentifiers::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RoadIdentifiers_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto.base);
  return *internal_default_instance();
}


void RoadIdentifiers::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoadIdentifiers::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RoadIdentifiers*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.here.pb.hdmap.shared.v1.core.RoadIdentifiers.RouteType route_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_route_type(static_cast<::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers_RouteType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoadIdentifiers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.here.pb.hdmap.shared.v1.core.RoadIdentifiers.RouteType route_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_route_type(static_cast< ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers_RouteType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoadIdentifiers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadIdentifiers.RouteType route_type = 1;
  if (this->route_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->route_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
}

::google::protobuf::uint8* RoadIdentifiers::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadIdentifiers.RouteType route_type = 1;
  if (this->route_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->route_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
  return target;
}

size_t RoadIdentifiers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.here.pb.hdmap.shared.v1.core.RoadIdentifiers.RouteType route_type = 1;
  if (this->route_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->route_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadIdentifiers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadIdentifiers* source =
      ::google::protobuf::DynamicCastToGenerated<RoadIdentifiers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
    MergeFrom(*source);
  }
}

void RoadIdentifiers::MergeFrom(const RoadIdentifiers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.route_type() != 0) {
    set_route_type(from.route_type());
  }
}

void RoadIdentifiers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadIdentifiers::CopyFrom(const RoadIdentifiers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.shared.v1.core.RoadIdentifiers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadIdentifiers::IsInitialized() const {
  return true;
}

void RoadIdentifiers::Swap(RoadIdentifiers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadIdentifiers::InternalSwap(RoadIdentifiers* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(route_type_, other->route_type_);
}

::google::protobuf::Metadata RoadIdentifiers::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto);
  return ::file_level_metadata_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2funconditional_2dattributes_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace v1
}  // namespace shared
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::CoreMapReference* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::CoreMapReference >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::CoreMapReference >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::VariableSpeedLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::VariableSpeedSign >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::RoadDivider* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::RoadDivider >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::RoadDivider >(arena);
}
template<> PROTOBUF_NOINLINE ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers* Arena::CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers >(Arena* arena) {
  return Arena::CreateInternal< ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
