// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/shared/v1/core/conditional-attribute-modifiers.proto

#ifndef PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto
#define PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto();
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace shared {
namespace v1 {
namespace core {
class DateTimeModifier;
class DateTimeModifierDefaultTypeInternal;
extern DateTimeModifierDefaultTypeInternal _DateTimeModifier_default_instance_;
class DateTimeModifier_DateRange;
class DateTimeModifier_DateRangeDefaultTypeInternal;
extern DateTimeModifier_DateRangeDefaultTypeInternal _DateTimeModifier_DateRange_default_instance_;
class DateTimeModifier_DayOfMonthOfYearRange;
class DateTimeModifier_DayOfMonthOfYearRangeDefaultTypeInternal;
extern DateTimeModifier_DayOfMonthOfYearRangeDefaultTypeInternal _DateTimeModifier_DayOfMonthOfYearRange_default_instance_;
class DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear;
class DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYearDefaultTypeInternal;
extern DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYearDefaultTypeInternal _DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear_default_instance_;
class DateTimeModifier_DayOfMonthRange;
class DateTimeModifier_DayOfMonthRangeDefaultTypeInternal;
extern DateTimeModifier_DayOfMonthRangeDefaultTypeInternal _DateTimeModifier_DayOfMonthRange_default_instance_;
class DateTimeModifier_DayOfWeekOfMonthRange;
class DateTimeModifier_DayOfWeekOfMonthRangeDefaultTypeInternal;
extern DateTimeModifier_DayOfWeekOfMonthRangeDefaultTypeInternal _DateTimeModifier_DayOfWeekOfMonthRange_default_instance_;
class DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth;
class DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonthDefaultTypeInternal;
extern DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonthDefaultTypeInternal _DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth_default_instance_;
class DateTimeModifier_DayOfWeekOfYearRange;
class DateTimeModifier_DayOfWeekOfYearRangeDefaultTypeInternal;
extern DateTimeModifier_DayOfWeekOfYearRangeDefaultTypeInternal _DateTimeModifier_DayOfWeekOfYearRange_default_instance_;
class DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear;
class DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYearDefaultTypeInternal;
extern DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYearDefaultTypeInternal _DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear_default_instance_;
class DateTimeModifier_DaysOfWeek;
class DateTimeModifier_DaysOfWeekDefaultTypeInternal;
extern DateTimeModifier_DaysOfWeekDefaultTypeInternal _DateTimeModifier_DaysOfWeek_default_instance_;
class DateTimeModifier_MonthOfYearRange;
class DateTimeModifier_MonthOfYearRangeDefaultTypeInternal;
extern DateTimeModifier_MonthOfYearRangeDefaultTypeInternal _DateTimeModifier_MonthOfYearRange_default_instance_;
class DateTimeModifier_TimeRange;
class DateTimeModifier_TimeRangeDefaultTypeInternal;
extern DateTimeModifier_TimeRangeDefaultTypeInternal _DateTimeModifier_TimeRange_default_instance_;
class DateTimeModifier_WeekOfMonthRange;
class DateTimeModifier_WeekOfMonthRangeDefaultTypeInternal;
extern DateTimeModifier_WeekOfMonthRangeDefaultTypeInternal _DateTimeModifier_WeekOfMonthRange_default_instance_;
}  // namespace core
}  // namespace v1
}  // namespace shared
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier>(Arena*);
template<> ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange>(Arena*);
template<> ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange>(Arena*);
template<> ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear>(Arena*);
template<> ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange>(Arena*);
template<> ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange>(Arena*);
template<> ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth>(Arena*);
template<> ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange>(Arena*);
template<> ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear>(Arena*);
template<> ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek>(Arena*);
template<> ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange>(Arena*);
template<> ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange>(Arena*);
template<> ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange* Arena::CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace shared {
namespace v1 {
namespace core {

enum DateTimeModifier_MonthOfYear {
  DateTimeModifier_MonthOfYear_MonthOfYear_UNKNOWN = 0,
  DateTimeModifier_MonthOfYear_JANUARY = 1,
  DateTimeModifier_MonthOfYear_FEBRUARY = 2,
  DateTimeModifier_MonthOfYear_MARCH = 3,
  DateTimeModifier_MonthOfYear_APRIL = 4,
  DateTimeModifier_MonthOfYear_MAY = 5,
  DateTimeModifier_MonthOfYear_JUNE = 6,
  DateTimeModifier_MonthOfYear_JULY = 7,
  DateTimeModifier_MonthOfYear_AUGUST = 8,
  DateTimeModifier_MonthOfYear_SEPTEMBER = 9,
  DateTimeModifier_MonthOfYear_OCTOBER = 10,
  DateTimeModifier_MonthOfYear_NOVEMBER = 11,
  DateTimeModifier_MonthOfYear_DECEMBER = 12,
  DateTimeModifier_MonthOfYear_DateTimeModifier_MonthOfYear_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DateTimeModifier_MonthOfYear_DateTimeModifier_MonthOfYear_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DateTimeModifier_MonthOfYear_IsValid(int value);
const DateTimeModifier_MonthOfYear DateTimeModifier_MonthOfYear_MonthOfYear_MIN = DateTimeModifier_MonthOfYear_MonthOfYear_UNKNOWN;
const DateTimeModifier_MonthOfYear DateTimeModifier_MonthOfYear_MonthOfYear_MAX = DateTimeModifier_MonthOfYear_DECEMBER;
const int DateTimeModifier_MonthOfYear_MonthOfYear_ARRAYSIZE = DateTimeModifier_MonthOfYear_MonthOfYear_MAX + 1;

const ::google::protobuf::EnumDescriptor* DateTimeModifier_MonthOfYear_descriptor();
inline const ::std::string& DateTimeModifier_MonthOfYear_Name(DateTimeModifier_MonthOfYear value) {
  return ::google::protobuf::internal::NameOfEnum(
    DateTimeModifier_MonthOfYear_descriptor(), value);
}
inline bool DateTimeModifier_MonthOfYear_Parse(
    const ::std::string& name, DateTimeModifier_MonthOfYear* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DateTimeModifier_MonthOfYear>(
    DateTimeModifier_MonthOfYear_descriptor(), name, value);
}
enum DateTimeModifier_WeekInMonth {
  DateTimeModifier_WeekInMonth_WeekInMonth_UNKNOWN = 0,
  DateTimeModifier_WeekInMonth_WEEK_1 = 1,
  DateTimeModifier_WeekInMonth_WEEK_2 = 2,
  DateTimeModifier_WeekInMonth_WEEK_3 = 3,
  DateTimeModifier_WeekInMonth_WEEK_4 = 4,
  DateTimeModifier_WeekInMonth_WEEK_5 = 5,
  DateTimeModifier_WeekInMonth_DateTimeModifier_WeekInMonth_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DateTimeModifier_WeekInMonth_DateTimeModifier_WeekInMonth_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DateTimeModifier_WeekInMonth_IsValid(int value);
const DateTimeModifier_WeekInMonth DateTimeModifier_WeekInMonth_WeekInMonth_MIN = DateTimeModifier_WeekInMonth_WeekInMonth_UNKNOWN;
const DateTimeModifier_WeekInMonth DateTimeModifier_WeekInMonth_WeekInMonth_MAX = DateTimeModifier_WeekInMonth_WEEK_5;
const int DateTimeModifier_WeekInMonth_WeekInMonth_ARRAYSIZE = DateTimeModifier_WeekInMonth_WeekInMonth_MAX + 1;

const ::google::protobuf::EnumDescriptor* DateTimeModifier_WeekInMonth_descriptor();
inline const ::std::string& DateTimeModifier_WeekInMonth_Name(DateTimeModifier_WeekInMonth value) {
  return ::google::protobuf::internal::NameOfEnum(
    DateTimeModifier_WeekInMonth_descriptor(), value);
}
inline bool DateTimeModifier_WeekInMonth_Parse(
    const ::std::string& name, DateTimeModifier_WeekInMonth* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DateTimeModifier_WeekInMonth>(
    DateTimeModifier_WeekInMonth_descriptor(), name, value);
}
enum DateTimeModifier_DayOfWeek {
  DateTimeModifier_DayOfWeek_DayOfWeek_UNKNOWN = 0,
  DateTimeModifier_DayOfWeek_SUNDAY = 1,
  DateTimeModifier_DayOfWeek_MONDAY = 2,
  DateTimeModifier_DayOfWeek_TUESDAY = 3,
  DateTimeModifier_DayOfWeek_WEDNESDAY = 4,
  DateTimeModifier_DayOfWeek_THURSDAY = 5,
  DateTimeModifier_DayOfWeek_FRIDAY = 6,
  DateTimeModifier_DayOfWeek_SATURDAY = 7,
  DateTimeModifier_DayOfWeek_DateTimeModifier_DayOfWeek_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DateTimeModifier_DayOfWeek_DateTimeModifier_DayOfWeek_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DateTimeModifier_DayOfWeek_IsValid(int value);
const DateTimeModifier_DayOfWeek DateTimeModifier_DayOfWeek_DayOfWeek_MIN = DateTimeModifier_DayOfWeek_DayOfWeek_UNKNOWN;
const DateTimeModifier_DayOfWeek DateTimeModifier_DayOfWeek_DayOfWeek_MAX = DateTimeModifier_DayOfWeek_SATURDAY;
const int DateTimeModifier_DayOfWeek_DayOfWeek_ARRAYSIZE = DateTimeModifier_DayOfWeek_DayOfWeek_MAX + 1;

const ::google::protobuf::EnumDescriptor* DateTimeModifier_DayOfWeek_descriptor();
inline const ::std::string& DateTimeModifier_DayOfWeek_Name(DateTimeModifier_DayOfWeek value) {
  return ::google::protobuf::internal::NameOfEnum(
    DateTimeModifier_DayOfWeek_descriptor(), value);
}
inline bool DateTimeModifier_DayOfWeek_Parse(
    const ::std::string& name, DateTimeModifier_DayOfWeek* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DateTimeModifier_DayOfWeek>(
    DateTimeModifier_DayOfWeek_descriptor(), name, value);
}
// ===================================================================

class DateTimeModifier_TimeRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange) */ {
 public:
  DateTimeModifier_TimeRange();
  virtual ~DateTimeModifier_TimeRange();

  DateTimeModifier_TimeRange(const DateTimeModifier_TimeRange& from);

  inline DateTimeModifier_TimeRange& operator=(const DateTimeModifier_TimeRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTimeModifier_TimeRange(DateTimeModifier_TimeRange&& from) noexcept
    : DateTimeModifier_TimeRange() {
    *this = ::std::move(from);
  }

  inline DateTimeModifier_TimeRange& operator=(DateTimeModifier_TimeRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTimeModifier_TimeRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeModifier_TimeRange* internal_default_instance() {
    return reinterpret_cast<const DateTimeModifier_TimeRange*>(
               &_DateTimeModifier_TimeRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DateTimeModifier_TimeRange* other);
  friend void swap(DateTimeModifier_TimeRange& a, DateTimeModifier_TimeRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTimeModifier_TimeRange* New() const final {
    return CreateMaybeMessage<DateTimeModifier_TimeRange>(nullptr);
  }

  DateTimeModifier_TimeRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeModifier_TimeRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTimeModifier_TimeRange& from);
  void MergeFrom(const DateTimeModifier_TimeRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeModifier_TimeRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration start_time_of_day = 1;
  bool has_start_time_of_day() const;
  void clear_start_time_of_day();
  static const int kStartTimeOfDayFieldNumber = 1;
  const ::google::protobuf::Duration& start_time_of_day() const;
  ::google::protobuf::Duration* release_start_time_of_day();
  ::google::protobuf::Duration* mutable_start_time_of_day();
  void set_allocated_start_time_of_day(::google::protobuf::Duration* start_time_of_day);

  // .google.protobuf.Duration end_time_of_day = 2;
  bool has_end_time_of_day() const;
  void clear_end_time_of_day();
  static const int kEndTimeOfDayFieldNumber = 2;
  const ::google::protobuf::Duration& end_time_of_day() const;
  ::google::protobuf::Duration* release_end_time_of_day();
  ::google::protobuf::Duration* mutable_end_time_of_day();
  void set_allocated_end_time_of_day(::google::protobuf::Duration* end_time_of_day);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Duration* start_time_of_day_;
  ::google::protobuf::Duration* end_time_of_day_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
};
// -------------------------------------------------------------------

class DateTimeModifier_DateRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange) */ {
 public:
  DateTimeModifier_DateRange();
  virtual ~DateTimeModifier_DateRange();

  DateTimeModifier_DateRange(const DateTimeModifier_DateRange& from);

  inline DateTimeModifier_DateRange& operator=(const DateTimeModifier_DateRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTimeModifier_DateRange(DateTimeModifier_DateRange&& from) noexcept
    : DateTimeModifier_DateRange() {
    *this = ::std::move(from);
  }

  inline DateTimeModifier_DateRange& operator=(DateTimeModifier_DateRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTimeModifier_DateRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeModifier_DateRange* internal_default_instance() {
    return reinterpret_cast<const DateTimeModifier_DateRange*>(
               &_DateTimeModifier_DateRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DateTimeModifier_DateRange* other);
  friend void swap(DateTimeModifier_DateRange& a, DateTimeModifier_DateRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTimeModifier_DateRange* New() const final {
    return CreateMaybeMessage<DateTimeModifier_DateRange>(nullptr);
  }

  DateTimeModifier_DateRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeModifier_DateRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTimeModifier_DateRange& from);
  void MergeFrom(const DateTimeModifier_DateRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeModifier_DateRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::google::protobuf::Timestamp& start() const;
  ::google::protobuf::Timestamp* release_start();
  ::google::protobuf::Timestamp* mutable_start();
  void set_allocated_start(::google::protobuf::Timestamp* start);

  // .google.protobuf.Timestamp end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  const ::google::protobuf::Timestamp& end() const;
  ::google::protobuf::Timestamp* release_end();
  ::google::protobuf::Timestamp* mutable_end();
  void set_allocated_end(::google::protobuf::Timestamp* end);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* start_;
  ::google::protobuf::Timestamp* end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
};
// -------------------------------------------------------------------

class DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear) */ {
 public:
  DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear();
  virtual ~DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear();

  DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear(const DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& from);

  inline DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& operator=(const DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear(DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear&& from) noexcept
    : DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear() {
    *this = ::std::move(from);
  }

  inline DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& operator=(DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* internal_default_instance() {
    return reinterpret_cast<const DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear*>(
               &_DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* other);
  friend void swap(DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& a, DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* New() const final {
    return CreateMaybeMessage<DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear>(nullptr);
  }

  DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& from);
  void MergeFrom(const DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 day_of_month = 1;
  void clear_day_of_month();
  static const int kDayOfMonthFieldNumber = 1;
  ::google::protobuf::uint32 day_of_month() const;
  void set_day_of_month(::google::protobuf::uint32 value);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear month_of_year = 2;
  void clear_month_of_year();
  static const int kMonthOfYearFieldNumber = 2;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear month_of_year() const;
  void set_month_of_year(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 day_of_month_;
  int month_of_year_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
};
// -------------------------------------------------------------------

class DateTimeModifier_DayOfMonthOfYearRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange) */ {
 public:
  DateTimeModifier_DayOfMonthOfYearRange();
  virtual ~DateTimeModifier_DayOfMonthOfYearRange();

  DateTimeModifier_DayOfMonthOfYearRange(const DateTimeModifier_DayOfMonthOfYearRange& from);

  inline DateTimeModifier_DayOfMonthOfYearRange& operator=(const DateTimeModifier_DayOfMonthOfYearRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTimeModifier_DayOfMonthOfYearRange(DateTimeModifier_DayOfMonthOfYearRange&& from) noexcept
    : DateTimeModifier_DayOfMonthOfYearRange() {
    *this = ::std::move(from);
  }

  inline DateTimeModifier_DayOfMonthOfYearRange& operator=(DateTimeModifier_DayOfMonthOfYearRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTimeModifier_DayOfMonthOfYearRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeModifier_DayOfMonthOfYearRange* internal_default_instance() {
    return reinterpret_cast<const DateTimeModifier_DayOfMonthOfYearRange*>(
               &_DateTimeModifier_DayOfMonthOfYearRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DateTimeModifier_DayOfMonthOfYearRange* other);
  friend void swap(DateTimeModifier_DayOfMonthOfYearRange& a, DateTimeModifier_DayOfMonthOfYearRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTimeModifier_DayOfMonthOfYearRange* New() const final {
    return CreateMaybeMessage<DateTimeModifier_DayOfMonthOfYearRange>(nullptr);
  }

  DateTimeModifier_DayOfMonthOfYearRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeModifier_DayOfMonthOfYearRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTimeModifier_DayOfMonthOfYearRange& from);
  void MergeFrom(const DateTimeModifier_DayOfMonthOfYearRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeModifier_DayOfMonthOfYearRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear DayOfMonthOfYear;

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& start() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* release_start();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* mutable_start();
  void set_allocated_start(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* start);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& end() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* release_end();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* mutable_end();
  void set_allocated_end(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* end);

  // bool is_from_end = 3;
  void clear_is_from_end();
  static const int kIsFromEndFieldNumber = 3;
  bool is_from_end() const;
  void set_is_from_end(bool value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* start_;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* end_;
  bool is_from_end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
};
// -------------------------------------------------------------------

class DateTimeModifier_MonthOfYearRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange) */ {
 public:
  DateTimeModifier_MonthOfYearRange();
  virtual ~DateTimeModifier_MonthOfYearRange();

  DateTimeModifier_MonthOfYearRange(const DateTimeModifier_MonthOfYearRange& from);

  inline DateTimeModifier_MonthOfYearRange& operator=(const DateTimeModifier_MonthOfYearRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTimeModifier_MonthOfYearRange(DateTimeModifier_MonthOfYearRange&& from) noexcept
    : DateTimeModifier_MonthOfYearRange() {
    *this = ::std::move(from);
  }

  inline DateTimeModifier_MonthOfYearRange& operator=(DateTimeModifier_MonthOfYearRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTimeModifier_MonthOfYearRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeModifier_MonthOfYearRange* internal_default_instance() {
    return reinterpret_cast<const DateTimeModifier_MonthOfYearRange*>(
               &_DateTimeModifier_MonthOfYearRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DateTimeModifier_MonthOfYearRange* other);
  friend void swap(DateTimeModifier_MonthOfYearRange& a, DateTimeModifier_MonthOfYearRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTimeModifier_MonthOfYearRange* New() const final {
    return CreateMaybeMessage<DateTimeModifier_MonthOfYearRange>(nullptr);
  }

  DateTimeModifier_MonthOfYearRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeModifier_MonthOfYearRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTimeModifier_MonthOfYearRange& from);
  void MergeFrom(const DateTimeModifier_MonthOfYearRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeModifier_MonthOfYearRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear start() const;
  void set_start(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear value);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear end() const;
  void set_end(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int start_;
  int end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
};
// -------------------------------------------------------------------

class DateTimeModifier_WeekOfMonthRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange) */ {
 public:
  DateTimeModifier_WeekOfMonthRange();
  virtual ~DateTimeModifier_WeekOfMonthRange();

  DateTimeModifier_WeekOfMonthRange(const DateTimeModifier_WeekOfMonthRange& from);

  inline DateTimeModifier_WeekOfMonthRange& operator=(const DateTimeModifier_WeekOfMonthRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTimeModifier_WeekOfMonthRange(DateTimeModifier_WeekOfMonthRange&& from) noexcept
    : DateTimeModifier_WeekOfMonthRange() {
    *this = ::std::move(from);
  }

  inline DateTimeModifier_WeekOfMonthRange& operator=(DateTimeModifier_WeekOfMonthRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTimeModifier_WeekOfMonthRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeModifier_WeekOfMonthRange* internal_default_instance() {
    return reinterpret_cast<const DateTimeModifier_WeekOfMonthRange*>(
               &_DateTimeModifier_WeekOfMonthRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DateTimeModifier_WeekOfMonthRange* other);
  friend void swap(DateTimeModifier_WeekOfMonthRange& a, DateTimeModifier_WeekOfMonthRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTimeModifier_WeekOfMonthRange* New() const final {
    return CreateMaybeMessage<DateTimeModifier_WeekOfMonthRange>(nullptr);
  }

  DateTimeModifier_WeekOfMonthRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeModifier_WeekOfMonthRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTimeModifier_WeekOfMonthRange& from);
  void MergeFrom(const DateTimeModifier_WeekOfMonthRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeModifier_WeekOfMonthRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth start() const;
  void set_start(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth value);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth end() const;
  void set_end(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth value);

  // bool is_from_end = 3;
  void clear_is_from_end();
  static const int kIsFromEndFieldNumber = 3;
  bool is_from_end() const;
  void set_is_from_end(bool value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int start_;
  int end_;
  bool is_from_end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
};
// -------------------------------------------------------------------

class DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear) */ {
 public:
  DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear();
  virtual ~DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear();

  DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear(const DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& from);

  inline DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& operator=(const DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear(DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear&& from) noexcept
    : DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear() {
    *this = ::std::move(from);
  }

  inline DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& operator=(DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* internal_default_instance() {
    return reinterpret_cast<const DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear*>(
               &_DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* other);
  friend void swap(DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& a, DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* New() const final {
    return CreateMaybeMessage<DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear>(nullptr);
  }

  DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& from);
  void MergeFrom(const DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
  void clear_day_of_week();
  static const int kDayOfWeekFieldNumber = 1;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek day_of_week() const;
  void set_day_of_week(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek value);

  // uint32 week_of_year = 2;
  void clear_week_of_year();
  static const int kWeekOfYearFieldNumber = 2;
  ::google::protobuf::uint32 week_of_year() const;
  void set_week_of_year(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int day_of_week_;
  ::google::protobuf::uint32 week_of_year_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
};
// -------------------------------------------------------------------

class DateTimeModifier_DayOfWeekOfYearRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange) */ {
 public:
  DateTimeModifier_DayOfWeekOfYearRange();
  virtual ~DateTimeModifier_DayOfWeekOfYearRange();

  DateTimeModifier_DayOfWeekOfYearRange(const DateTimeModifier_DayOfWeekOfYearRange& from);

  inline DateTimeModifier_DayOfWeekOfYearRange& operator=(const DateTimeModifier_DayOfWeekOfYearRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTimeModifier_DayOfWeekOfYearRange(DateTimeModifier_DayOfWeekOfYearRange&& from) noexcept
    : DateTimeModifier_DayOfWeekOfYearRange() {
    *this = ::std::move(from);
  }

  inline DateTimeModifier_DayOfWeekOfYearRange& operator=(DateTimeModifier_DayOfWeekOfYearRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTimeModifier_DayOfWeekOfYearRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeModifier_DayOfWeekOfYearRange* internal_default_instance() {
    return reinterpret_cast<const DateTimeModifier_DayOfWeekOfYearRange*>(
               &_DateTimeModifier_DayOfWeekOfYearRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DateTimeModifier_DayOfWeekOfYearRange* other);
  friend void swap(DateTimeModifier_DayOfWeekOfYearRange& a, DateTimeModifier_DayOfWeekOfYearRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTimeModifier_DayOfWeekOfYearRange* New() const final {
    return CreateMaybeMessage<DateTimeModifier_DayOfWeekOfYearRange>(nullptr);
  }

  DateTimeModifier_DayOfWeekOfYearRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeModifier_DayOfWeekOfYearRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTimeModifier_DayOfWeekOfYearRange& from);
  void MergeFrom(const DateTimeModifier_DayOfWeekOfYearRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeModifier_DayOfWeekOfYearRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear DayOfWeekOfYear;

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& start() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* release_start();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* mutable_start();
  void set_allocated_start(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* start);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& end() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* release_end();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* mutable_end();
  void set_allocated_end(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* end);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* start_;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
};
// -------------------------------------------------------------------

class DateTimeModifier_DayOfMonthRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange) */ {
 public:
  DateTimeModifier_DayOfMonthRange();
  virtual ~DateTimeModifier_DayOfMonthRange();

  DateTimeModifier_DayOfMonthRange(const DateTimeModifier_DayOfMonthRange& from);

  inline DateTimeModifier_DayOfMonthRange& operator=(const DateTimeModifier_DayOfMonthRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTimeModifier_DayOfMonthRange(DateTimeModifier_DayOfMonthRange&& from) noexcept
    : DateTimeModifier_DayOfMonthRange() {
    *this = ::std::move(from);
  }

  inline DateTimeModifier_DayOfMonthRange& operator=(DateTimeModifier_DayOfMonthRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTimeModifier_DayOfMonthRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeModifier_DayOfMonthRange* internal_default_instance() {
    return reinterpret_cast<const DateTimeModifier_DayOfMonthRange*>(
               &_DateTimeModifier_DayOfMonthRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DateTimeModifier_DayOfMonthRange* other);
  friend void swap(DateTimeModifier_DayOfMonthRange& a, DateTimeModifier_DayOfMonthRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTimeModifier_DayOfMonthRange* New() const final {
    return CreateMaybeMessage<DateTimeModifier_DayOfMonthRange>(nullptr);
  }

  DateTimeModifier_DayOfMonthRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeModifier_DayOfMonthRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTimeModifier_DayOfMonthRange& from);
  void MergeFrom(const DateTimeModifier_DayOfMonthRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeModifier_DayOfMonthRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::uint32 start() const;
  void set_start(::google::protobuf::uint32 value);

  // uint32 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::uint32 end() const;
  void set_end(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
};
// -------------------------------------------------------------------

class DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth) */ {
 public:
  DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth();
  virtual ~DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth();

  DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth(const DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& from);

  inline DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& operator=(const DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth(DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth&& from) noexcept
    : DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth() {
    *this = ::std::move(from);
  }

  inline DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& operator=(DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* internal_default_instance() {
    return reinterpret_cast<const DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth*>(
               &_DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* other);
  friend void swap(DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& a, DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* New() const final {
    return CreateMaybeMessage<DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth>(nullptr);
  }

  DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& from);
  void MergeFrom(const DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
  void clear_day_of_week();
  static const int kDayOfWeekFieldNumber = 1;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek day_of_week() const;
  void set_day_of_week(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek value);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth week_in_month = 2;
  void clear_week_in_month();
  static const int kWeekInMonthFieldNumber = 2;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth week_in_month() const;
  void set_week_in_month(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int day_of_week_;
  int week_in_month_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
};
// -------------------------------------------------------------------

class DateTimeModifier_DayOfWeekOfMonthRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange) */ {
 public:
  DateTimeModifier_DayOfWeekOfMonthRange();
  virtual ~DateTimeModifier_DayOfWeekOfMonthRange();

  DateTimeModifier_DayOfWeekOfMonthRange(const DateTimeModifier_DayOfWeekOfMonthRange& from);

  inline DateTimeModifier_DayOfWeekOfMonthRange& operator=(const DateTimeModifier_DayOfWeekOfMonthRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTimeModifier_DayOfWeekOfMonthRange(DateTimeModifier_DayOfWeekOfMonthRange&& from) noexcept
    : DateTimeModifier_DayOfWeekOfMonthRange() {
    *this = ::std::move(from);
  }

  inline DateTimeModifier_DayOfWeekOfMonthRange& operator=(DateTimeModifier_DayOfWeekOfMonthRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTimeModifier_DayOfWeekOfMonthRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeModifier_DayOfWeekOfMonthRange* internal_default_instance() {
    return reinterpret_cast<const DateTimeModifier_DayOfWeekOfMonthRange*>(
               &_DateTimeModifier_DayOfWeekOfMonthRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(DateTimeModifier_DayOfWeekOfMonthRange* other);
  friend void swap(DateTimeModifier_DayOfWeekOfMonthRange& a, DateTimeModifier_DayOfWeekOfMonthRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTimeModifier_DayOfWeekOfMonthRange* New() const final {
    return CreateMaybeMessage<DateTimeModifier_DayOfWeekOfMonthRange>(nullptr);
  }

  DateTimeModifier_DayOfWeekOfMonthRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeModifier_DayOfWeekOfMonthRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTimeModifier_DayOfWeekOfMonthRange& from);
  void MergeFrom(const DateTimeModifier_DayOfWeekOfMonthRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeModifier_DayOfWeekOfMonthRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth DayOfWeekOfMonth;

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& start() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* release_start();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* mutable_start();
  void set_allocated_start(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* start);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& end() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* release_end();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* mutable_end();
  void set_allocated_end(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* end);

  // bool isFromEnd = 3;
  void clear_isfromend();
  static const int kIsFromEndFieldNumber = 3;
  bool isfromend() const;
  void set_isfromend(bool value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* start_;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* end_;
  bool isfromend_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
};
// -------------------------------------------------------------------

class DateTimeModifier_DaysOfWeek final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek) */ {
 public:
  DateTimeModifier_DaysOfWeek();
  virtual ~DateTimeModifier_DaysOfWeek();

  DateTimeModifier_DaysOfWeek(const DateTimeModifier_DaysOfWeek& from);

  inline DateTimeModifier_DaysOfWeek& operator=(const DateTimeModifier_DaysOfWeek& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTimeModifier_DaysOfWeek(DateTimeModifier_DaysOfWeek&& from) noexcept
    : DateTimeModifier_DaysOfWeek() {
    *this = ::std::move(from);
  }

  inline DateTimeModifier_DaysOfWeek& operator=(DateTimeModifier_DaysOfWeek&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTimeModifier_DaysOfWeek& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeModifier_DaysOfWeek* internal_default_instance() {
    return reinterpret_cast<const DateTimeModifier_DaysOfWeek*>(
               &_DateTimeModifier_DaysOfWeek_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(DateTimeModifier_DaysOfWeek* other);
  friend void swap(DateTimeModifier_DaysOfWeek& a, DateTimeModifier_DaysOfWeek& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTimeModifier_DaysOfWeek* New() const final {
    return CreateMaybeMessage<DateTimeModifier_DaysOfWeek>(nullptr);
  }

  DateTimeModifier_DaysOfWeek* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeModifier_DaysOfWeek>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTimeModifier_DaysOfWeek& from);
  void MergeFrom(const DateTimeModifier_DaysOfWeek& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeModifier_DaysOfWeek* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
  int day_of_week_size() const;
  void clear_day_of_week();
  static const int kDayOfWeekFieldNumber = 1;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek day_of_week(int index) const;
  void set_day_of_week(int index, ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek value);
  void add_day_of_week(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek value);
  const ::google::protobuf::RepeatedField<int>& day_of_week() const;
  ::google::protobuf::RepeatedField<int>* mutable_day_of_week();

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> day_of_week_;
  mutable std::atomic<int> _day_of_week_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
};
// -------------------------------------------------------------------

class DateTimeModifier final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.shared.v1.core.DateTimeModifier) */ {
 public:
  DateTimeModifier();
  virtual ~DateTimeModifier();

  DateTimeModifier(const DateTimeModifier& from);

  inline DateTimeModifier& operator=(const DateTimeModifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTimeModifier(DateTimeModifier&& from) noexcept
    : DateTimeModifier() {
    *this = ::std::move(from);
  }

  inline DateTimeModifier& operator=(DateTimeModifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTimeModifier& default_instance();

  enum DateModifierCase {
    kDaysOfWeek = 1,
    kDateRange = 2,
    kDayOfMonthRange = 3,
    kDayOfWeekOfMonthRange = 4,
    kDayOfWeekOfYearRange = 5,
    kWeekOfMonthRange = 6,
    kMonthOfYearRange = 7,
    kDayOfMonthOfYearRange = 8,
    kExternallySpecified = 9,
    DATEMODIFIER_NOT_SET = 0,
  };

  enum TimeModifierCase {
    kTimeRange = 10,
    kIsDawnToDusk = 11,
    kIsDuskToDawn = 12,
    TIMEMODIFIER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeModifier* internal_default_instance() {
    return reinterpret_cast<const DateTimeModifier*>(
               &_DateTimeModifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(DateTimeModifier* other);
  friend void swap(DateTimeModifier& a, DateTimeModifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTimeModifier* New() const final {
    return CreateMaybeMessage<DateTimeModifier>(nullptr);
  }

  DateTimeModifier* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeModifier>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTimeModifier& from);
  void MergeFrom(const DateTimeModifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeModifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DateTimeModifier_TimeRange TimeRange;
  typedef DateTimeModifier_DateRange DateRange;
  typedef DateTimeModifier_DayOfMonthOfYearRange DayOfMonthOfYearRange;
  typedef DateTimeModifier_MonthOfYearRange MonthOfYearRange;
  typedef DateTimeModifier_WeekOfMonthRange WeekOfMonthRange;
  typedef DateTimeModifier_DayOfWeekOfYearRange DayOfWeekOfYearRange;
  typedef DateTimeModifier_DayOfMonthRange DayOfMonthRange;
  typedef DateTimeModifier_DayOfWeekOfMonthRange DayOfWeekOfMonthRange;
  typedef DateTimeModifier_DaysOfWeek DaysOfWeek;

  typedef DateTimeModifier_MonthOfYear MonthOfYear;
  static const MonthOfYear MonthOfYear_UNKNOWN =
    DateTimeModifier_MonthOfYear_MonthOfYear_UNKNOWN;
  static const MonthOfYear JANUARY =
    DateTimeModifier_MonthOfYear_JANUARY;
  static const MonthOfYear FEBRUARY =
    DateTimeModifier_MonthOfYear_FEBRUARY;
  static const MonthOfYear MARCH =
    DateTimeModifier_MonthOfYear_MARCH;
  static const MonthOfYear APRIL =
    DateTimeModifier_MonthOfYear_APRIL;
  static const MonthOfYear MAY =
    DateTimeModifier_MonthOfYear_MAY;
  static const MonthOfYear JUNE =
    DateTimeModifier_MonthOfYear_JUNE;
  static const MonthOfYear JULY =
    DateTimeModifier_MonthOfYear_JULY;
  static const MonthOfYear AUGUST =
    DateTimeModifier_MonthOfYear_AUGUST;
  static const MonthOfYear SEPTEMBER =
    DateTimeModifier_MonthOfYear_SEPTEMBER;
  static const MonthOfYear OCTOBER =
    DateTimeModifier_MonthOfYear_OCTOBER;
  static const MonthOfYear NOVEMBER =
    DateTimeModifier_MonthOfYear_NOVEMBER;
  static const MonthOfYear DECEMBER =
    DateTimeModifier_MonthOfYear_DECEMBER;
  static inline bool MonthOfYear_IsValid(int value) {
    return DateTimeModifier_MonthOfYear_IsValid(value);
  }
  static const MonthOfYear MonthOfYear_MIN =
    DateTimeModifier_MonthOfYear_MonthOfYear_MIN;
  static const MonthOfYear MonthOfYear_MAX =
    DateTimeModifier_MonthOfYear_MonthOfYear_MAX;
  static const int MonthOfYear_ARRAYSIZE =
    DateTimeModifier_MonthOfYear_MonthOfYear_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MonthOfYear_descriptor() {
    return DateTimeModifier_MonthOfYear_descriptor();
  }
  static inline const ::std::string& MonthOfYear_Name(MonthOfYear value) {
    return DateTimeModifier_MonthOfYear_Name(value);
  }
  static inline bool MonthOfYear_Parse(const ::std::string& name,
      MonthOfYear* value) {
    return DateTimeModifier_MonthOfYear_Parse(name, value);
  }

  typedef DateTimeModifier_WeekInMonth WeekInMonth;
  static const WeekInMonth WeekInMonth_UNKNOWN =
    DateTimeModifier_WeekInMonth_WeekInMonth_UNKNOWN;
  static const WeekInMonth WEEK_1 =
    DateTimeModifier_WeekInMonth_WEEK_1;
  static const WeekInMonth WEEK_2 =
    DateTimeModifier_WeekInMonth_WEEK_2;
  static const WeekInMonth WEEK_3 =
    DateTimeModifier_WeekInMonth_WEEK_3;
  static const WeekInMonth WEEK_4 =
    DateTimeModifier_WeekInMonth_WEEK_4;
  static const WeekInMonth WEEK_5 =
    DateTimeModifier_WeekInMonth_WEEK_5;
  static inline bool WeekInMonth_IsValid(int value) {
    return DateTimeModifier_WeekInMonth_IsValid(value);
  }
  static const WeekInMonth WeekInMonth_MIN =
    DateTimeModifier_WeekInMonth_WeekInMonth_MIN;
  static const WeekInMonth WeekInMonth_MAX =
    DateTimeModifier_WeekInMonth_WeekInMonth_MAX;
  static const int WeekInMonth_ARRAYSIZE =
    DateTimeModifier_WeekInMonth_WeekInMonth_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WeekInMonth_descriptor() {
    return DateTimeModifier_WeekInMonth_descriptor();
  }
  static inline const ::std::string& WeekInMonth_Name(WeekInMonth value) {
    return DateTimeModifier_WeekInMonth_Name(value);
  }
  static inline bool WeekInMonth_Parse(const ::std::string& name,
      WeekInMonth* value) {
    return DateTimeModifier_WeekInMonth_Parse(name, value);
  }

  typedef DateTimeModifier_DayOfWeek DayOfWeek;
  static const DayOfWeek DayOfWeek_UNKNOWN =
    DateTimeModifier_DayOfWeek_DayOfWeek_UNKNOWN;
  static const DayOfWeek SUNDAY =
    DateTimeModifier_DayOfWeek_SUNDAY;
  static const DayOfWeek MONDAY =
    DateTimeModifier_DayOfWeek_MONDAY;
  static const DayOfWeek TUESDAY =
    DateTimeModifier_DayOfWeek_TUESDAY;
  static const DayOfWeek WEDNESDAY =
    DateTimeModifier_DayOfWeek_WEDNESDAY;
  static const DayOfWeek THURSDAY =
    DateTimeModifier_DayOfWeek_THURSDAY;
  static const DayOfWeek FRIDAY =
    DateTimeModifier_DayOfWeek_FRIDAY;
  static const DayOfWeek SATURDAY =
    DateTimeModifier_DayOfWeek_SATURDAY;
  static inline bool DayOfWeek_IsValid(int value) {
    return DateTimeModifier_DayOfWeek_IsValid(value);
  }
  static const DayOfWeek DayOfWeek_MIN =
    DateTimeModifier_DayOfWeek_DayOfWeek_MIN;
  static const DayOfWeek DayOfWeek_MAX =
    DateTimeModifier_DayOfWeek_DayOfWeek_MAX;
  static const int DayOfWeek_ARRAYSIZE =
    DateTimeModifier_DayOfWeek_DayOfWeek_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DayOfWeek_descriptor() {
    return DateTimeModifier_DayOfWeek_descriptor();
  }
  static inline const ::std::string& DayOfWeek_Name(DayOfWeek value) {
    return DateTimeModifier_DayOfWeek_Name(value);
  }
  static inline bool DayOfWeek_Parse(const ::std::string& name,
      DayOfWeek* value) {
    return DateTimeModifier_DayOfWeek_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool is_exclusion = 13;
  void clear_is_exclusion();
  static const int kIsExclusionFieldNumber = 13;
  bool is_exclusion() const;
  void set_is_exclusion(bool value);

  // bool is_approximate_seasonal_range = 14;
  void clear_is_approximate_seasonal_range();
  static const int kIsApproximateSeasonalRangeFieldNumber = 14;
  bool is_approximate_seasonal_range() const;
  void set_is_approximate_seasonal_range(bool value);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek days_of_week = 1;
  bool has_days_of_week() const;
  void clear_days_of_week();
  static const int kDaysOfWeekFieldNumber = 1;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek& days_of_week() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek* release_days_of_week();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek* mutable_days_of_week();
  void set_allocated_days_of_week(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek* days_of_week);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange date_range = 2;
  bool has_date_range() const;
  void clear_date_range();
  static const int kDateRangeFieldNumber = 2;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange& date_range() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange* release_date_range();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange* mutable_date_range();
  void set_allocated_date_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange* date_range);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange day_of_month_range = 3;
  bool has_day_of_month_range() const;
  void clear_day_of_month_range();
  static const int kDayOfMonthRangeFieldNumber = 3;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange& day_of_month_range() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange* release_day_of_month_range();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange* mutable_day_of_month_range();
  void set_allocated_day_of_month_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange* day_of_month_range);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange day_of_week_of_month_range = 4;
  bool has_day_of_week_of_month_range() const;
  void clear_day_of_week_of_month_range();
  static const int kDayOfWeekOfMonthRangeFieldNumber = 4;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange& day_of_week_of_month_range() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange* release_day_of_week_of_month_range();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange* mutable_day_of_week_of_month_range();
  void set_allocated_day_of_week_of_month_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange* day_of_week_of_month_range);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange day_of_week_of_year_range = 5;
  bool has_day_of_week_of_year_range() const;
  void clear_day_of_week_of_year_range();
  static const int kDayOfWeekOfYearRangeFieldNumber = 5;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange& day_of_week_of_year_range() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange* release_day_of_week_of_year_range();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange* mutable_day_of_week_of_year_range();
  void set_allocated_day_of_week_of_year_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange* day_of_week_of_year_range);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange week_of_month_range = 6;
  bool has_week_of_month_range() const;
  void clear_week_of_month_range();
  static const int kWeekOfMonthRangeFieldNumber = 6;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange& week_of_month_range() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange* release_week_of_month_range();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange* mutable_week_of_month_range();
  void set_allocated_week_of_month_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange* week_of_month_range);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange month_of_year_range = 7;
  bool has_month_of_year_range() const;
  void clear_month_of_year_range();
  static const int kMonthOfYearRangeFieldNumber = 7;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange& month_of_year_range() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange* release_month_of_year_range();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange* mutable_month_of_year_range();
  void set_allocated_month_of_year_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange* month_of_year_range);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange day_of_month_of_year_range = 8;
  bool has_day_of_month_of_year_range() const;
  void clear_day_of_month_of_year_range();
  static const int kDayOfMonthOfYearRangeFieldNumber = 8;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange& day_of_month_of_year_range() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange* release_day_of_month_of_year_range();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange* mutable_day_of_month_of_year_range();
  void set_allocated_day_of_month_of_year_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange* day_of_month_of_year_range);

  // string externally_specified = 9;
  private:
  bool has_externally_specified() const;
  public:
  void clear_externally_specified();
  static const int kExternallySpecifiedFieldNumber = 9;
  const ::std::string& externally_specified() const;
  void set_externally_specified(const ::std::string& value);
  #if LANG_CXX11
  void set_externally_specified(::std::string&& value);
  #endif
  void set_externally_specified(const char* value);
  void set_externally_specified(const char* value, size_t size);
  ::std::string* mutable_externally_specified();
  ::std::string* release_externally_specified();
  void set_allocated_externally_specified(::std::string* externally_specified);

  // .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange time_range = 10;
  bool has_time_range() const;
  void clear_time_range();
  static const int kTimeRangeFieldNumber = 10;
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange& time_range() const;
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange* release_time_range();
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange* mutable_time_range();
  void set_allocated_time_range(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange* time_range);

  // bool is_dawn_to_dusk = 11;
  private:
  bool has_is_dawn_to_dusk() const;
  public:
  void clear_is_dawn_to_dusk();
  static const int kIsDawnToDuskFieldNumber = 11;
  bool is_dawn_to_dusk() const;
  void set_is_dawn_to_dusk(bool value);

  // bool is_dusk_to_dawn = 12;
  private:
  bool has_is_dusk_to_dawn() const;
  public:
  void clear_is_dusk_to_dawn();
  static const int kIsDuskToDawnFieldNumber = 12;
  bool is_dusk_to_dawn() const;
  void set_is_dusk_to_dawn(bool value);

  void clear_dateModifier();
  DateModifierCase dateModifier_case() const;
  void clear_timeModifier();
  TimeModifierCase timeModifier_case() const;
  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.shared.v1.core.DateTimeModifier)
 private:
  class HasBitSetters;
  void set_has_days_of_week();
  void set_has_date_range();
  void set_has_day_of_month_range();
  void set_has_day_of_week_of_month_range();
  void set_has_day_of_week_of_year_range();
  void set_has_week_of_month_range();
  void set_has_month_of_year_range();
  void set_has_day_of_month_of_year_range();
  void set_has_externally_specified();
  void set_has_time_range();
  void set_has_is_dawn_to_dusk();
  void set_has_is_dusk_to_dawn();

  inline bool has_dateModifier() const;
  inline void clear_has_dateModifier();

  inline bool has_timeModifier() const;
  inline void clear_has_timeModifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_exclusion_;
  bool is_approximate_seasonal_range_;
  union DateModifierUnion {
    DateModifierUnion() {}
    ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek* days_of_week_;
    ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange* date_range_;
    ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange* day_of_month_range_;
    ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange* day_of_week_of_month_range_;
    ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange* day_of_week_of_year_range_;
    ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange* week_of_month_range_;
    ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange* month_of_year_range_;
    ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange* day_of_month_of_year_range_;
    ::google::protobuf::internal::ArenaStringPtr externally_specified_;
  } dateModifier_;
  union TimeModifierUnion {
    TimeModifierUnion() {}
    ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange* time_range_;
    bool is_dawn_to_dusk_;
    bool is_dusk_to_dawn_;
  } timeModifier_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DateTimeModifier_TimeRange

// .google.protobuf.Duration start_time_of_day = 1;
inline bool DateTimeModifier_TimeRange::has_start_time_of_day() const {
  return this != internal_default_instance() && start_time_of_day_ != nullptr;
}
inline const ::google::protobuf::Duration& DateTimeModifier_TimeRange::start_time_of_day() const {
  const ::google::protobuf::Duration* p = start_time_of_day_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange.start_time_of_day)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* DateTimeModifier_TimeRange::release_start_time_of_day() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange.start_time_of_day)
  
  ::google::protobuf::Duration* temp = start_time_of_day_;
  start_time_of_day_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* DateTimeModifier_TimeRange::mutable_start_time_of_day() {
  
  if (start_time_of_day_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    start_time_of_day_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange.start_time_of_day)
  return start_time_of_day_;
}
inline void DateTimeModifier_TimeRange::set_allocated_start_time_of_day(::google::protobuf::Duration* start_time_of_day) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_of_day_);
  }
  if (start_time_of_day) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time_of_day)->GetArena();
    if (message_arena != submessage_arena) {
      start_time_of_day = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time_of_day, submessage_arena);
    }
    
  } else {
    
  }
  start_time_of_day_ = start_time_of_day;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange.start_time_of_day)
}

// .google.protobuf.Duration end_time_of_day = 2;
inline bool DateTimeModifier_TimeRange::has_end_time_of_day() const {
  return this != internal_default_instance() && end_time_of_day_ != nullptr;
}
inline const ::google::protobuf::Duration& DateTimeModifier_TimeRange::end_time_of_day() const {
  const ::google::protobuf::Duration* p = end_time_of_day_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange.end_time_of_day)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* DateTimeModifier_TimeRange::release_end_time_of_day() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange.end_time_of_day)
  
  ::google::protobuf::Duration* temp = end_time_of_day_;
  end_time_of_day_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* DateTimeModifier_TimeRange::mutable_end_time_of_day() {
  
  if (end_time_of_day_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    end_time_of_day_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange.end_time_of_day)
  return end_time_of_day_;
}
inline void DateTimeModifier_TimeRange::set_allocated_end_time_of_day(::google::protobuf::Duration* end_time_of_day) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_of_day_);
  }
  if (end_time_of_day) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(end_time_of_day)->GetArena();
    if (message_arena != submessage_arena) {
      end_time_of_day = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time_of_day, submessage_arena);
    }
    
  } else {
    
  }
  end_time_of_day_ = end_time_of_day;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange.end_time_of_day)
}

// -------------------------------------------------------------------

// DateTimeModifier_DateRange

// .google.protobuf.Timestamp start = 1;
inline bool DateTimeModifier_DateRange::has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline const ::google::protobuf::Timestamp& DateTimeModifier_DateRange::start() const {
  const ::google::protobuf::Timestamp* p = start_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange.start)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DateTimeModifier_DateRange::release_start() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange.start)
  
  ::google::protobuf::Timestamp* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* DateTimeModifier_DateRange::mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange.start)
  return start_;
}
inline void DateTimeModifier_DateRange::set_allocated_start(::google::protobuf::Timestamp* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_);
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange.start)
}

// .google.protobuf.Timestamp end = 2;
inline bool DateTimeModifier_DateRange::has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline const ::google::protobuf::Timestamp& DateTimeModifier_DateRange::end() const {
  const ::google::protobuf::Timestamp* p = end_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange.end)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DateTimeModifier_DateRange::release_end() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange.end)
  
  ::google::protobuf::Timestamp* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* DateTimeModifier_DateRange::mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange.end)
  return end_;
}
inline void DateTimeModifier_DateRange::set_allocated_end(::google::protobuf::Timestamp* end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_);
  }
  if (end) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange.end)
}

// -------------------------------------------------------------------

// DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear

// uint32 day_of_month = 1;
inline void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::clear_day_of_month() {
  day_of_month_ = 0u;
}
inline ::google::protobuf::uint32 DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::day_of_month() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear.day_of_month)
  return day_of_month_;
}
inline void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::set_day_of_month(::google::protobuf::uint32 value) {
  
  day_of_month_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear.day_of_month)
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear month_of_year = 2;
inline void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::clear_month_of_year() {
  month_of_year_ = 0;
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::month_of_year() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear.month_of_year)
  return static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear >(month_of_year_);
}
inline void DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear::set_month_of_year(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear value) {
  
  month_of_year_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear.month_of_year)
}

// -------------------------------------------------------------------

// DateTimeModifier_DayOfMonthOfYearRange

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear start = 1;
inline bool DateTimeModifier_DayOfMonthOfYearRange::has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline void DateTimeModifier_DayOfMonthOfYearRange::clear_start() {
  if (GetArenaNoVirtual() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& DateTimeModifier_DayOfMonthOfYearRange::start() const {
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* p = start_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.start)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear*>(
      &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* DateTimeModifier_DayOfMonthOfYearRange::release_start() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.start)
  
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* DateTimeModifier_DayOfMonthOfYearRange::mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear>(GetArenaNoVirtual());
    start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.start)
  return start_;
}
inline void DateTimeModifier_DayOfMonthOfYearRange::set_allocated_start(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.start)
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.DayOfMonthOfYear end = 2;
inline bool DateTimeModifier_DayOfMonthOfYearRange::has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline void DateTimeModifier_DayOfMonthOfYearRange::clear_end() {
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear& DateTimeModifier_DayOfMonthOfYearRange::end() const {
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* p = end_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.end)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear*>(
      &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* DateTimeModifier_DayOfMonthOfYearRange::release_end() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.end)
  
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* DateTimeModifier_DayOfMonthOfYearRange::mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear>(GetArenaNoVirtual());
    end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.end)
  return end_;
}
inline void DateTimeModifier_DayOfMonthOfYearRange::set_allocated_end(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange_DayOfMonthOfYear* end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.end)
}

// bool is_from_end = 3;
inline void DateTimeModifier_DayOfMonthOfYearRange::clear_is_from_end() {
  is_from_end_ = false;
}
inline bool DateTimeModifier_DayOfMonthOfYearRange::is_from_end() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.is_from_end)
  return is_from_end_;
}
inline void DateTimeModifier_DayOfMonthOfYearRange::set_is_from_end(bool value) {
  
  is_from_end_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange.is_from_end)
}

// -------------------------------------------------------------------

// DateTimeModifier_MonthOfYearRange

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear start = 1;
inline void DateTimeModifier_MonthOfYearRange::clear_start() {
  start_ = 0;
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear DateTimeModifier_MonthOfYearRange::start() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange.start)
  return static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear >(start_);
}
inline void DateTimeModifier_MonthOfYearRange::set_start(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange.start)
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYear end = 2;
inline void DateTimeModifier_MonthOfYearRange::clear_end() {
  end_ = 0;
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear DateTimeModifier_MonthOfYearRange::end() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange.end)
  return static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear >(end_);
}
inline void DateTimeModifier_MonthOfYearRange::set_end(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange.end)
}

// -------------------------------------------------------------------

// DateTimeModifier_WeekOfMonthRange

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth start = 1;
inline void DateTimeModifier_WeekOfMonthRange::clear_start() {
  start_ = 0;
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth DateTimeModifier_WeekOfMonthRange::start() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange.start)
  return static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth >(start_);
}
inline void DateTimeModifier_WeekOfMonthRange::set_start(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange.start)
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth end = 2;
inline void DateTimeModifier_WeekOfMonthRange::clear_end() {
  end_ = 0;
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth DateTimeModifier_WeekOfMonthRange::end() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange.end)
  return static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth >(end_);
}
inline void DateTimeModifier_WeekOfMonthRange::set_end(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange.end)
}

// bool is_from_end = 3;
inline void DateTimeModifier_WeekOfMonthRange::clear_is_from_end() {
  is_from_end_ = false;
}
inline bool DateTimeModifier_WeekOfMonthRange::is_from_end() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange.is_from_end)
  return is_from_end_;
}
inline void DateTimeModifier_WeekOfMonthRange::set_is_from_end(bool value) {
  
  is_from_end_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange.is_from_end)
}

// -------------------------------------------------------------------

// DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
inline void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::clear_day_of_week() {
  day_of_week_ = 0;
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::day_of_week() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear.day_of_week)
  return static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek >(day_of_week_);
}
inline void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::set_day_of_week(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek value) {
  
  day_of_week_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear.day_of_week)
}

// uint32 week_of_year = 2;
inline void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::clear_week_of_year() {
  week_of_year_ = 0u;
}
inline ::google::protobuf::uint32 DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::week_of_year() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear.week_of_year)
  return week_of_year_;
}
inline void DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear::set_week_of_year(::google::protobuf::uint32 value) {
  
  week_of_year_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear.week_of_year)
}

// -------------------------------------------------------------------

// DateTimeModifier_DayOfWeekOfYearRange

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear start = 1;
inline bool DateTimeModifier_DayOfWeekOfYearRange::has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline void DateTimeModifier_DayOfWeekOfYearRange::clear_start() {
  if (GetArenaNoVirtual() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& DateTimeModifier_DayOfWeekOfYearRange::start() const {
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* p = start_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.start)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear*>(
      &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* DateTimeModifier_DayOfWeekOfYearRange::release_start() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.start)
  
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* DateTimeModifier_DayOfWeekOfYearRange::mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear>(GetArenaNoVirtual());
    start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.start)
  return start_;
}
inline void DateTimeModifier_DayOfWeekOfYearRange::set_allocated_start(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.start)
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.DayOfWeekOfYear end = 2;
inline bool DateTimeModifier_DayOfWeekOfYearRange::has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline void DateTimeModifier_DayOfWeekOfYearRange::clear_end() {
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear& DateTimeModifier_DayOfWeekOfYearRange::end() const {
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* p = end_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.end)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear*>(
      &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* DateTimeModifier_DayOfWeekOfYearRange::release_end() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.end)
  
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* DateTimeModifier_DayOfWeekOfYearRange::mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear>(GetArenaNoVirtual());
    end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.end)
  return end_;
}
inline void DateTimeModifier_DayOfWeekOfYearRange::set_allocated_end(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange_DayOfWeekOfYear* end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange.end)
}

// -------------------------------------------------------------------

// DateTimeModifier_DayOfMonthRange

// uint32 start = 1;
inline void DateTimeModifier_DayOfMonthRange::clear_start() {
  start_ = 0u;
}
inline ::google::protobuf::uint32 DateTimeModifier_DayOfMonthRange::start() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange.start)
  return start_;
}
inline void DateTimeModifier_DayOfMonthRange::set_start(::google::protobuf::uint32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange.start)
}

// uint32 end = 2;
inline void DateTimeModifier_DayOfMonthRange::clear_end() {
  end_ = 0u;
}
inline ::google::protobuf::uint32 DateTimeModifier_DayOfMonthRange::end() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange.end)
  return end_;
}
inline void DateTimeModifier_DayOfMonthRange::set_end(::google::protobuf::uint32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange.end)
}

// -------------------------------------------------------------------

// DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
inline void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::clear_day_of_week() {
  day_of_week_ = 0;
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::day_of_week() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth.day_of_week)
  return static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek >(day_of_week_);
}
inline void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::set_day_of_week(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek value) {
  
  day_of_week_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth.day_of_week)
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekInMonth week_in_month = 2;
inline void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::clear_week_in_month() {
  week_in_month_ = 0;
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::week_in_month() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth.week_in_month)
  return static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth >(week_in_month_);
}
inline void DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth::set_week_in_month(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth value) {
  
  week_in_month_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth.week_in_month)
}

// -------------------------------------------------------------------

// DateTimeModifier_DayOfWeekOfMonthRange

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth start = 1;
inline bool DateTimeModifier_DayOfWeekOfMonthRange::has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline void DateTimeModifier_DayOfWeekOfMonthRange::clear_start() {
  if (GetArenaNoVirtual() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& DateTimeModifier_DayOfWeekOfMonthRange::start() const {
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* p = start_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.start)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth*>(
      &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* DateTimeModifier_DayOfWeekOfMonthRange::release_start() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.start)
  
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* DateTimeModifier_DayOfWeekOfMonthRange::mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth>(GetArenaNoVirtual());
    start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.start)
  return start_;
}
inline void DateTimeModifier_DayOfWeekOfMonthRange::set_allocated_start(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.start)
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.DayOfWeekOfMonth end = 2;
inline bool DateTimeModifier_DayOfWeekOfMonthRange::has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline void DateTimeModifier_DayOfWeekOfMonthRange::clear_end() {
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth& DateTimeModifier_DayOfWeekOfMonthRange::end() const {
  const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* p = end_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.end)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth*>(
      &::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* DateTimeModifier_DayOfWeekOfMonthRange::release_end() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.end)
  
  ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* DateTimeModifier_DayOfWeekOfMonthRange::mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth>(GetArenaNoVirtual());
    end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.end)
  return end_;
}
inline void DateTimeModifier_DayOfWeekOfMonthRange::set_allocated_end(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange_DayOfWeekOfMonth* end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.end)
}

// bool isFromEnd = 3;
inline void DateTimeModifier_DayOfWeekOfMonthRange::clear_isfromend() {
  isfromend_ = false;
}
inline bool DateTimeModifier_DayOfWeekOfMonthRange::isfromend() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.isFromEnd)
  return isfromend_;
}
inline void DateTimeModifier_DayOfWeekOfMonthRange::set_isfromend(bool value) {
  
  isfromend_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange.isFromEnd)
}

// -------------------------------------------------------------------

// DateTimeModifier_DaysOfWeek

// repeated .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeek day_of_week = 1;
inline int DateTimeModifier_DaysOfWeek::day_of_week_size() const {
  return day_of_week_.size();
}
inline void DateTimeModifier_DaysOfWeek::clear_day_of_week() {
  day_of_week_.Clear();
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek DateTimeModifier_DaysOfWeek::day_of_week(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek.day_of_week)
  return static_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek >(day_of_week_.Get(index));
}
inline void DateTimeModifier_DaysOfWeek::set_day_of_week(int index, ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek value) {
  day_of_week_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek.day_of_week)
}
inline void DateTimeModifier_DaysOfWeek::add_day_of_week(::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek value) {
  day_of_week_.Add(value);
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek.day_of_week)
}
inline const ::google::protobuf::RepeatedField<int>&
DateTimeModifier_DaysOfWeek::day_of_week() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek.day_of_week)
  return day_of_week_;
}
inline ::google::protobuf::RepeatedField<int>*
DateTimeModifier_DaysOfWeek::mutable_day_of_week() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek.day_of_week)
  return &day_of_week_;
}

// -------------------------------------------------------------------

// DateTimeModifier

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DaysOfWeek days_of_week = 1;
inline bool DateTimeModifier::has_days_of_week() const {
  return dateModifier_case() == kDaysOfWeek;
}
inline void DateTimeModifier::set_has_days_of_week() {
  _oneof_case_[0] = kDaysOfWeek;
}
inline void DateTimeModifier::clear_days_of_week() {
  if (has_days_of_week()) {
    delete dateModifier_.days_of_week_;
    clear_has_dateModifier();
  }
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek* DateTimeModifier::release_days_of_week() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.days_of_week)
  if (has_days_of_week()) {
    clear_has_dateModifier();
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek* temp = dateModifier_.days_of_week_;
    dateModifier_.days_of_week_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek& DateTimeModifier::days_of_week() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.days_of_week)
  return has_days_of_week()
      ? *dateModifier_.days_of_week_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DaysOfWeek_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek* DateTimeModifier::mutable_days_of_week() {
  if (!has_days_of_week()) {
    clear_dateModifier();
    set_has_days_of_week();
    dateModifier_.days_of_week_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DaysOfWeek >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.days_of_week)
  return dateModifier_.days_of_week_;
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DateRange date_range = 2;
inline bool DateTimeModifier::has_date_range() const {
  return dateModifier_case() == kDateRange;
}
inline void DateTimeModifier::set_has_date_range() {
  _oneof_case_[0] = kDateRange;
}
inline void DateTimeModifier::clear_date_range() {
  if (has_date_range()) {
    delete dateModifier_.date_range_;
    clear_has_dateModifier();
  }
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange* DateTimeModifier::release_date_range() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.date_range)
  if (has_date_range()) {
    clear_has_dateModifier();
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange* temp = dateModifier_.date_range_;
    dateModifier_.date_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange& DateTimeModifier::date_range() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.date_range)
  return has_date_range()
      ? *dateModifier_.date_range_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DateRange_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange* DateTimeModifier::mutable_date_range() {
  if (!has_date_range()) {
    clear_dateModifier();
    set_has_date_range();
    dateModifier_.date_range_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DateRange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.date_range)
  return dateModifier_.date_range_;
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthRange day_of_month_range = 3;
inline bool DateTimeModifier::has_day_of_month_range() const {
  return dateModifier_case() == kDayOfMonthRange;
}
inline void DateTimeModifier::set_has_day_of_month_range() {
  _oneof_case_[0] = kDayOfMonthRange;
}
inline void DateTimeModifier::clear_day_of_month_range() {
  if (has_day_of_month_range()) {
    delete dateModifier_.day_of_month_range_;
    clear_has_dateModifier();
  }
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange* DateTimeModifier::release_day_of_month_range() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_month_range)
  if (has_day_of_month_range()) {
    clear_has_dateModifier();
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange* temp = dateModifier_.day_of_month_range_;
    dateModifier_.day_of_month_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange& DateTimeModifier::day_of_month_range() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_month_range)
  return has_day_of_month_range()
      ? *dateModifier_.day_of_month_range_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfMonthRange_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange* DateTimeModifier::mutable_day_of_month_range() {
  if (!has_day_of_month_range()) {
    clear_dateModifier();
    set_has_day_of_month_range();
    dateModifier_.day_of_month_range_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthRange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_month_range)
  return dateModifier_.day_of_month_range_;
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfMonthRange day_of_week_of_month_range = 4;
inline bool DateTimeModifier::has_day_of_week_of_month_range() const {
  return dateModifier_case() == kDayOfWeekOfMonthRange;
}
inline void DateTimeModifier::set_has_day_of_week_of_month_range() {
  _oneof_case_[0] = kDayOfWeekOfMonthRange;
}
inline void DateTimeModifier::clear_day_of_week_of_month_range() {
  if (has_day_of_week_of_month_range()) {
    delete dateModifier_.day_of_week_of_month_range_;
    clear_has_dateModifier();
  }
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange* DateTimeModifier::release_day_of_week_of_month_range() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_week_of_month_range)
  if (has_day_of_week_of_month_range()) {
    clear_has_dateModifier();
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange* temp = dateModifier_.day_of_week_of_month_range_;
    dateModifier_.day_of_week_of_month_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange& DateTimeModifier::day_of_week_of_month_range() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_week_of_month_range)
  return has_day_of_week_of_month_range()
      ? *dateModifier_.day_of_week_of_month_range_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfMonthRange_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange* DateTimeModifier::mutable_day_of_week_of_month_range() {
  if (!has_day_of_week_of_month_range()) {
    clear_dateModifier();
    set_has_day_of_week_of_month_range();
    dateModifier_.day_of_week_of_month_range_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfMonthRange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_week_of_month_range)
  return dateModifier_.day_of_week_of_month_range_;
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfWeekOfYearRange day_of_week_of_year_range = 5;
inline bool DateTimeModifier::has_day_of_week_of_year_range() const {
  return dateModifier_case() == kDayOfWeekOfYearRange;
}
inline void DateTimeModifier::set_has_day_of_week_of_year_range() {
  _oneof_case_[0] = kDayOfWeekOfYearRange;
}
inline void DateTimeModifier::clear_day_of_week_of_year_range() {
  if (has_day_of_week_of_year_range()) {
    delete dateModifier_.day_of_week_of_year_range_;
    clear_has_dateModifier();
  }
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange* DateTimeModifier::release_day_of_week_of_year_range() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_week_of_year_range)
  if (has_day_of_week_of_year_range()) {
    clear_has_dateModifier();
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange* temp = dateModifier_.day_of_week_of_year_range_;
    dateModifier_.day_of_week_of_year_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange& DateTimeModifier::day_of_week_of_year_range() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_week_of_year_range)
  return has_day_of_week_of_year_range()
      ? *dateModifier_.day_of_week_of_year_range_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfWeekOfYearRange_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange* DateTimeModifier::mutable_day_of_week_of_year_range() {
  if (!has_day_of_week_of_year_range()) {
    clear_dateModifier();
    set_has_day_of_week_of_year_range();
    dateModifier_.day_of_week_of_year_range_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeekOfYearRange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_week_of_year_range)
  return dateModifier_.day_of_week_of_year_range_;
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.WeekOfMonthRange week_of_month_range = 6;
inline bool DateTimeModifier::has_week_of_month_range() const {
  return dateModifier_case() == kWeekOfMonthRange;
}
inline void DateTimeModifier::set_has_week_of_month_range() {
  _oneof_case_[0] = kWeekOfMonthRange;
}
inline void DateTimeModifier::clear_week_of_month_range() {
  if (has_week_of_month_range()) {
    delete dateModifier_.week_of_month_range_;
    clear_has_dateModifier();
  }
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange* DateTimeModifier::release_week_of_month_range() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.week_of_month_range)
  if (has_week_of_month_range()) {
    clear_has_dateModifier();
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange* temp = dateModifier_.week_of_month_range_;
    dateModifier_.week_of_month_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange& DateTimeModifier::week_of_month_range() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.week_of_month_range)
  return has_week_of_month_range()
      ? *dateModifier_.week_of_month_range_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_WeekOfMonthRange_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange* DateTimeModifier::mutable_week_of_month_range() {
  if (!has_week_of_month_range()) {
    clear_dateModifier();
    set_has_week_of_month_range();
    dateModifier_.week_of_month_range_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekOfMonthRange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.week_of_month_range)
  return dateModifier_.week_of_month_range_;
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.MonthOfYearRange month_of_year_range = 7;
inline bool DateTimeModifier::has_month_of_year_range() const {
  return dateModifier_case() == kMonthOfYearRange;
}
inline void DateTimeModifier::set_has_month_of_year_range() {
  _oneof_case_[0] = kMonthOfYearRange;
}
inline void DateTimeModifier::clear_month_of_year_range() {
  if (has_month_of_year_range()) {
    delete dateModifier_.month_of_year_range_;
    clear_has_dateModifier();
  }
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange* DateTimeModifier::release_month_of_year_range() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.month_of_year_range)
  if (has_month_of_year_range()) {
    clear_has_dateModifier();
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange* temp = dateModifier_.month_of_year_range_;
    dateModifier_.month_of_year_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange& DateTimeModifier::month_of_year_range() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.month_of_year_range)
  return has_month_of_year_range()
      ? *dateModifier_.month_of_year_range_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_MonthOfYearRange_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange* DateTimeModifier::mutable_month_of_year_range() {
  if (!has_month_of_year_range()) {
    clear_dateModifier();
    set_has_month_of_year_range();
    dateModifier_.month_of_year_range_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYearRange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.month_of_year_range)
  return dateModifier_.month_of_year_range_;
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.DayOfMonthOfYearRange day_of_month_of_year_range = 8;
inline bool DateTimeModifier::has_day_of_month_of_year_range() const {
  return dateModifier_case() == kDayOfMonthOfYearRange;
}
inline void DateTimeModifier::set_has_day_of_month_of_year_range() {
  _oneof_case_[0] = kDayOfMonthOfYearRange;
}
inline void DateTimeModifier::clear_day_of_month_of_year_range() {
  if (has_day_of_month_of_year_range()) {
    delete dateModifier_.day_of_month_of_year_range_;
    clear_has_dateModifier();
  }
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange* DateTimeModifier::release_day_of_month_of_year_range() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_month_of_year_range)
  if (has_day_of_month_of_year_range()) {
    clear_has_dateModifier();
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange* temp = dateModifier_.day_of_month_of_year_range_;
    dateModifier_.day_of_month_of_year_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange& DateTimeModifier::day_of_month_of_year_range() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_month_of_year_range)
  return has_day_of_month_of_year_range()
      ? *dateModifier_.day_of_month_of_year_range_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_DayOfMonthOfYearRange_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange* DateTimeModifier::mutable_day_of_month_of_year_range() {
  if (!has_day_of_month_of_year_range()) {
    clear_dateModifier();
    set_has_day_of_month_of_year_range();
    dateModifier_.day_of_month_of_year_range_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfMonthOfYearRange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.day_of_month_of_year_range)
  return dateModifier_.day_of_month_of_year_range_;
}

// string externally_specified = 9;
inline bool DateTimeModifier::has_externally_specified() const {
  return dateModifier_case() == kExternallySpecified;
}
inline void DateTimeModifier::set_has_externally_specified() {
  _oneof_case_[0] = kExternallySpecified;
}
inline void DateTimeModifier::clear_externally_specified() {
  if (has_externally_specified()) {
    dateModifier_.externally_specified_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_dateModifier();
  }
}
inline const ::std::string& DateTimeModifier::externally_specified() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.externally_specified)
  if (has_externally_specified()) {
    return dateModifier_.externally_specified_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DateTimeModifier::set_externally_specified(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.externally_specified)
  if (!has_externally_specified()) {
    clear_dateModifier();
    set_has_externally_specified();
    dateModifier_.externally_specified_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  dateModifier_.externally_specified_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.externally_specified)
}
#if LANG_CXX11
inline void DateTimeModifier::set_externally_specified(::std::string&& value) {
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.externally_specified)
  if (!has_externally_specified()) {
    clear_dateModifier();
    set_has_externally_specified();
    dateModifier_.externally_specified_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  dateModifier_.externally_specified_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.externally_specified)
}
#endif
inline void DateTimeModifier::set_externally_specified(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_externally_specified()) {
    clear_dateModifier();
    set_has_externally_specified();
    dateModifier_.externally_specified_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  dateModifier_.externally_specified_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.externally_specified)
}
inline void DateTimeModifier::set_externally_specified(const char* value, size_t size) {
  if (!has_externally_specified()) {
    clear_dateModifier();
    set_has_externally_specified();
    dateModifier_.externally_specified_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  dateModifier_.externally_specified_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.externally_specified)
}
inline ::std::string* DateTimeModifier::mutable_externally_specified() {
  if (!has_externally_specified()) {
    clear_dateModifier();
    set_has_externally_specified();
    dateModifier_.externally_specified_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.externally_specified)
  return dateModifier_.externally_specified_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DateTimeModifier::release_externally_specified() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.externally_specified)
  if (has_externally_specified()) {
    clear_has_dateModifier();
    return dateModifier_.externally_specified_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void DateTimeModifier::set_allocated_externally_specified(::std::string* externally_specified) {
  if (has_dateModifier()) {
    clear_dateModifier();
  }
  if (externally_specified != nullptr) {
    set_has_externally_specified();
    dateModifier_.externally_specified_.UnsafeSetDefault(externally_specified);
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.externally_specified)
}

// .com.here.pb.hdmap.shared.v1.core.DateTimeModifier.TimeRange time_range = 10;
inline bool DateTimeModifier::has_time_range() const {
  return timeModifier_case() == kTimeRange;
}
inline void DateTimeModifier::set_has_time_range() {
  _oneof_case_[1] = kTimeRange;
}
inline void DateTimeModifier::clear_time_range() {
  if (has_time_range()) {
    delete timeModifier_.time_range_;
    clear_has_timeModifier();
  }
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange* DateTimeModifier::release_time_range() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.time_range)
  if (has_time_range()) {
    clear_has_timeModifier();
      ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange* temp = timeModifier_.time_range_;
    timeModifier_.time_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange& DateTimeModifier::time_range() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.time_range)
  return has_time_range()
      ? *timeModifier_.time_range_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange*>(&::com::here::pb::hdmap::shared::v1::core::_DateTimeModifier_TimeRange_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange* DateTimeModifier::mutable_time_range() {
  if (!has_time_range()) {
    clear_timeModifier();
    set_has_time_range();
    timeModifier_.time_range_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_TimeRange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.time_range)
  return timeModifier_.time_range_;
}

// bool is_dawn_to_dusk = 11;
inline bool DateTimeModifier::has_is_dawn_to_dusk() const {
  return timeModifier_case() == kIsDawnToDusk;
}
inline void DateTimeModifier::set_has_is_dawn_to_dusk() {
  _oneof_case_[1] = kIsDawnToDusk;
}
inline void DateTimeModifier::clear_is_dawn_to_dusk() {
  if (has_is_dawn_to_dusk()) {
    timeModifier_.is_dawn_to_dusk_ = false;
    clear_has_timeModifier();
  }
}
inline bool DateTimeModifier::is_dawn_to_dusk() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.is_dawn_to_dusk)
  if (has_is_dawn_to_dusk()) {
    return timeModifier_.is_dawn_to_dusk_;
  }
  return false;
}
inline void DateTimeModifier::set_is_dawn_to_dusk(bool value) {
  if (!has_is_dawn_to_dusk()) {
    clear_timeModifier();
    set_has_is_dawn_to_dusk();
  }
  timeModifier_.is_dawn_to_dusk_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.is_dawn_to_dusk)
}

// bool is_dusk_to_dawn = 12;
inline bool DateTimeModifier::has_is_dusk_to_dawn() const {
  return timeModifier_case() == kIsDuskToDawn;
}
inline void DateTimeModifier::set_has_is_dusk_to_dawn() {
  _oneof_case_[1] = kIsDuskToDawn;
}
inline void DateTimeModifier::clear_is_dusk_to_dawn() {
  if (has_is_dusk_to_dawn()) {
    timeModifier_.is_dusk_to_dawn_ = false;
    clear_has_timeModifier();
  }
}
inline bool DateTimeModifier::is_dusk_to_dawn() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.is_dusk_to_dawn)
  if (has_is_dusk_to_dawn()) {
    return timeModifier_.is_dusk_to_dawn_;
  }
  return false;
}
inline void DateTimeModifier::set_is_dusk_to_dawn(bool value) {
  if (!has_is_dusk_to_dawn()) {
    clear_timeModifier();
    set_has_is_dusk_to_dawn();
  }
  timeModifier_.is_dusk_to_dawn_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.is_dusk_to_dawn)
}

// bool is_exclusion = 13;
inline void DateTimeModifier::clear_is_exclusion() {
  is_exclusion_ = false;
}
inline bool DateTimeModifier::is_exclusion() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.is_exclusion)
  return is_exclusion_;
}
inline void DateTimeModifier::set_is_exclusion(bool value) {
  
  is_exclusion_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.is_exclusion)
}

// bool is_approximate_seasonal_range = 14;
inline void DateTimeModifier::clear_is_approximate_seasonal_range() {
  is_approximate_seasonal_range_ = false;
}
inline bool DateTimeModifier::is_approximate_seasonal_range() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.is_approximate_seasonal_range)
  return is_approximate_seasonal_range_;
}
inline void DateTimeModifier::set_is_approximate_seasonal_range(bool value) {
  
  is_approximate_seasonal_range_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.shared.v1.core.DateTimeModifier.is_approximate_seasonal_range)
}

inline bool DateTimeModifier::has_dateModifier() const {
  return dateModifier_case() != DATEMODIFIER_NOT_SET;
}
inline void DateTimeModifier::clear_has_dateModifier() {
  _oneof_case_[0] = DATEMODIFIER_NOT_SET;
}
inline bool DateTimeModifier::has_timeModifier() const {
  return timeModifier_case() != TIMEMODIFIER_NOT_SET;
}
inline void DateTimeModifier::clear_has_timeModifier() {
  _oneof_case_[1] = TIMEMODIFIER_NOT_SET;
}
inline DateTimeModifier::DateModifierCase DateTimeModifier::dateModifier_case() const {
  return DateTimeModifier::DateModifierCase(_oneof_case_[0]);
}
inline DateTimeModifier::TimeModifierCase DateTimeModifier::timeModifier_case() const {
  return DateTimeModifier::TimeModifierCase(_oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace v1
}  // namespace shared
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear>() {
  return ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_MonthOfYear_descriptor();
}
template <> struct is_proto_enum< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth>() {
  return ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_WeekInMonth_descriptor();
}
template <> struct is_proto_enum< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek>() {
  return ::com::here::pb::hdmap::shared::v1::core::DateTimeModifier_DayOfWeek_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fshared_2fv1_2fcore_2fconditional_2dattribute_2dmodifiers_2eproto
