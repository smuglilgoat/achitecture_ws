// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/external/v1/routing/layer-routing-attributes.proto

#ifndef PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto
#define PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "com/here/pb/hdmap/external/v1/common/common.pb.h"
#include "com/here/pb/hdmap/shared/v1/core/common.pb.h"
#include "com/here/pb/hdmap/shared/v1/core/conditional-attributes.pb.h"
#include "com/here/pb/hdmap/shared/v1/core/unconditional-attributes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto();
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace routing {
class AdministrativeAreaRelationship;
class AdministrativeAreaRelationshipDefaultTypeInternal;
extern AdministrativeAreaRelationshipDefaultTypeInternal _AdministrativeAreaRelationship_default_instance_;
class DefinesAdministrativeAreaBoundary;
class DefinesAdministrativeAreaBoundaryDefaultTypeInternal;
extern DefinesAdministrativeAreaBoundaryDefaultTypeInternal _DefinesAdministrativeAreaBoundary_default_instance_;
class LinkAttribution;
class LinkAttributionDefaultTypeInternal;
extern LinkAttributionDefaultTypeInternal _LinkAttribution_default_instance_;
class LinkAttribution_ParametricAttribution;
class LinkAttribution_ParametricAttributionDefaultTypeInternal;
extern LinkAttribution_ParametricAttributionDefaultTypeInternal _LinkAttribution_ParametricAttribution_default_instance_;
class LinkAttribution_PointAttribution;
class LinkAttribution_PointAttributionDefaultTypeInternal;
extern LinkAttribution_PointAttributionDefaultTypeInternal _LinkAttribution_PointAttribution_default_instance_;
class NodeAttribution;
class NodeAttributionDefaultTypeInternal;
extern NodeAttributionDefaultTypeInternal _NodeAttribution_default_instance_;
class NodeAttribution_IntersectionTraversalAttribution;
class NodeAttribution_IntersectionTraversalAttributionDefaultTypeInternal;
extern NodeAttribution_IntersectionTraversalAttributionDefaultTypeInternal _NodeAttribution_IntersectionTraversalAttribution_default_instance_;
class RoutingAttributesLayerTile;
class RoutingAttributesLayerTileDefaultTypeInternal;
extern RoutingAttributesLayerTileDefaultTypeInternal _RoutingAttributesLayerTile_default_instance_;
class RoutingAttributionGroup;
class RoutingAttributionGroupDefaultTypeInternal;
extern RoutingAttributionGroupDefaultTypeInternal _RoutingAttributionGroup_default_instance_;
class RoutingLinkParametricAttribution;
class RoutingLinkParametricAttributionDefaultTypeInternal;
extern RoutingLinkParametricAttributionDefaultTypeInternal _RoutingLinkParametricAttribution_default_instance_;
class RoutingLinkPointAttribution;
class RoutingLinkPointAttributionDefaultTypeInternal;
extern RoutingLinkPointAttributionDefaultTypeInternal _RoutingLinkPointAttribution_default_instance_;
class RoutingNodeAttribution;
class RoutingNodeAttributionDefaultTypeInternal;
extern RoutingNodeAttributionDefaultTypeInternal _RoutingNodeAttribution_default_instance_;
class RoutingStrandAttribution;
class RoutingStrandAttributionDefaultTypeInternal;
extern RoutingStrandAttributionDefaultTypeInternal _RoutingStrandAttribution_default_instance_;
class StrandAttribution;
class StrandAttributionDefaultTypeInternal;
extern StrandAttributionDefaultTypeInternal _StrandAttribution_default_instance_;
class StrandAttribution_OrientedTiledLinkReference;
class StrandAttribution_OrientedTiledLinkReferenceDefaultTypeInternal;
extern StrandAttribution_OrientedTiledLinkReferenceDefaultTypeInternal _StrandAttribution_OrientedTiledLinkReference_default_instance_;
class WithinAdministrativeArea;
class WithinAdministrativeAreaDefaultTypeInternal;
extern WithinAdministrativeAreaDefaultTypeInternal _WithinAdministrativeArea_default_instance_;
}  // namespace routing
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::here::pb::hdmap::external::v1::routing::AdministrativeAreaRelationship* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::AdministrativeAreaRelationship>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::DefinesAdministrativeAreaBoundary* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::DefinesAdministrativeAreaBoundary>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::LinkAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::LinkAttribution>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_ParametricAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::LinkAttribution_ParametricAttribution>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_PointAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::LinkAttribution_PointAttribution>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::NodeAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::NodeAttribution>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::NodeAttribution_IntersectionTraversalAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::NodeAttribution_IntersectionTraversalAttribution>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::RoutingAttributesLayerTile* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::RoutingAttributesLayerTile>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::RoutingAttributionGroup* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::RoutingAttributionGroup>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::RoutingLinkParametricAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::RoutingLinkParametricAttribution>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::RoutingLinkPointAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::RoutingLinkPointAttribution>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::RoutingNodeAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::RoutingNodeAttribution>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::RoutingStrandAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::RoutingStrandAttribution>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::StrandAttribution* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::StrandAttribution>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::StrandAttribution_OrientedTiledLinkReference* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::StrandAttribution_OrientedTiledLinkReference>(Arena*);
template<> ::com::here::pb::hdmap::external::v1::routing::WithinAdministrativeArea* Arena::CreateMaybeMessage<::com::here::pb::hdmap::external::v1::routing::WithinAdministrativeArea>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace routing {

// ===================================================================

class RoutingAttributesLayerTile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile) */ {
 public:
  RoutingAttributesLayerTile();
  virtual ~RoutingAttributesLayerTile();

  RoutingAttributesLayerTile(const RoutingAttributesLayerTile& from);

  inline RoutingAttributesLayerTile& operator=(const RoutingAttributesLayerTile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoutingAttributesLayerTile(RoutingAttributesLayerTile&& from) noexcept
    : RoutingAttributesLayerTile() {
    *this = ::std::move(from);
  }

  inline RoutingAttributesLayerTile& operator=(RoutingAttributesLayerTile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RoutingAttributesLayerTile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingAttributesLayerTile* internal_default_instance() {
    return reinterpret_cast<const RoutingAttributesLayerTile*>(
               &_RoutingAttributesLayerTile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RoutingAttributesLayerTile* other);
  friend void swap(RoutingAttributesLayerTile& a, RoutingAttributesLayerTile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoutingAttributesLayerTile* New() const final {
    return CreateMaybeMessage<RoutingAttributesLayerTile>(nullptr);
  }

  RoutingAttributesLayerTile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoutingAttributesLayerTile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoutingAttributesLayerTile& from);
  void MergeFrom(const RoutingAttributesLayerTile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingAttributesLayerTile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.v1.routing.LinkAttribution link_attribution = 2;
  int link_attribution_size() const;
  void clear_link_attribution();
  static const int kLinkAttributionFieldNumber = 2;
  ::com::here::pb::hdmap::external::v1::routing::LinkAttribution* mutable_link_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution >*
      mutable_link_attribution();
  const ::com::here::pb::hdmap::external::v1::routing::LinkAttribution& link_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::routing::LinkAttribution* add_link_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution >&
      link_attribution() const;

  // repeated .com.here.pb.hdmap.external.v1.routing.NodeAttribution node_attribution = 3;
  int node_attribution_size() const;
  void clear_node_attribution();
  static const int kNodeAttributionFieldNumber = 3;
  ::com::here::pb::hdmap::external::v1::routing::NodeAttribution* mutable_node_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::NodeAttribution >*
      mutable_node_attribution();
  const ::com::here::pb::hdmap::external::v1::routing::NodeAttribution& node_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::routing::NodeAttribution* add_node_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::NodeAttribution >&
      node_attribution() const;

  // repeated .com.here.pb.hdmap.external.v1.routing.StrandAttribution strand_attribution = 4;
  int strand_attribution_size() const;
  void clear_strand_attribution();
  static const int kStrandAttributionFieldNumber = 4;
  ::com::here::pb::hdmap::external::v1::routing::StrandAttribution* mutable_strand_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::StrandAttribution >*
      mutable_strand_attribution();
  const ::com::here::pb::hdmap::external::v1::routing::StrandAttribution& strand_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::routing::StrandAttribution* add_strand_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::StrandAttribution >&
      strand_attribution() const;

  // repeated .com.here.pb.hdmap.external.v1.routing.RoutingAttributionGroup attribution_group_list = 5;
  int attribution_group_list_size() const;
  void clear_attribution_group_list();
  static const int kAttributionGroupListFieldNumber = 5;
  ::com::here::pb::hdmap::external::v1::routing::RoutingAttributionGroup* mutable_attribution_group_list(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingAttributionGroup >*
      mutable_attribution_group_list();
  const ::com::here::pb::hdmap::external::v1::routing::RoutingAttributionGroup& attribution_group_list(int index) const;
  ::com::here::pb::hdmap::external::v1::routing::RoutingAttributionGroup* add_attribution_group_list();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingAttributionGroup >&
      attribution_group_list() const;

  // uint32 here_tile_id = 1;
  void clear_here_tile_id();
  static const int kHereTileIdFieldNumber = 1;
  ::google::protobuf::uint32 here_tile_id() const;
  void set_here_tile_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution > link_attribution_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::NodeAttribution > node_attribution_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::StrandAttribution > strand_attribution_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingAttributionGroup > attribution_group_list_;
  ::google::protobuf::uint32 here_tile_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class LinkAttribution_ParametricAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution) */ {
 public:
  LinkAttribution_ParametricAttribution();
  virtual ~LinkAttribution_ParametricAttribution();

  LinkAttribution_ParametricAttribution(const LinkAttribution_ParametricAttribution& from);

  inline LinkAttribution_ParametricAttribution& operator=(const LinkAttribution_ParametricAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinkAttribution_ParametricAttribution(LinkAttribution_ParametricAttribution&& from) noexcept
    : LinkAttribution_ParametricAttribution() {
    *this = ::std::move(from);
  }

  inline LinkAttribution_ParametricAttribution& operator=(LinkAttribution_ParametricAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LinkAttribution_ParametricAttribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkAttribution_ParametricAttribution* internal_default_instance() {
    return reinterpret_cast<const LinkAttribution_ParametricAttribution*>(
               &_LinkAttribution_ParametricAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LinkAttribution_ParametricAttribution* other);
  friend void swap(LinkAttribution_ParametricAttribution& a, LinkAttribution_ParametricAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinkAttribution_ParametricAttribution* New() const final {
    return CreateMaybeMessage<LinkAttribution_ParametricAttribution>(nullptr);
  }

  LinkAttribution_ParametricAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinkAttribution_ParametricAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinkAttribution_ParametricAttribution& from);
  void MergeFrom(const LinkAttribution_ParametricAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkAttribution_ParametricAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 attribution_group_indexes = 3 [packed = true];
  int attribution_group_indexes_size() const;
  void clear_attribution_group_indexes();
  static const int kAttributionGroupIndexesFieldNumber = 3;
  ::google::protobuf::uint32 attribution_group_indexes(int index) const;
  void set_attribution_group_indexes(int index, ::google::protobuf::uint32 value);
  void add_attribution_group_indexes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attribution_group_indexes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attribution_group_indexes();

  // repeated .com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution link_parametric_attribution = 4;
  int link_parametric_attribution_size() const;
  void clear_link_parametric_attribution();
  static const int kLinkParametricAttributionFieldNumber = 4;
  ::com::here::pb::hdmap::external::v1::routing::RoutingLinkParametricAttribution* mutable_link_parametric_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingLinkParametricAttribution >*
      mutable_link_parametric_attribution();
  const ::com::here::pb::hdmap::external::v1::routing::RoutingLinkParametricAttribution& link_parametric_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::routing::RoutingLinkParametricAttribution* add_link_parametric_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingLinkParametricAttribution >&
      link_parametric_attribution() const;

  // .com.here.pb.hdmap.external.v1.common.ParametricRange applies_to_range = 1;
  bool has_applies_to_range() const;
  void clear_applies_to_range();
  static const int kAppliesToRangeFieldNumber = 1;
  const ::com::here::pb::hdmap::external::v1::common::ParametricRange& applies_to_range() const;
  ::com::here::pb::hdmap::external::v1::common::ParametricRange* release_applies_to_range();
  ::com::here::pb::hdmap::external::v1::common::ParametricRange* mutable_applies_to_range();
  void set_allocated_applies_to_range(::com::here::pb::hdmap::external::v1::common::ParametricRange* applies_to_range);

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  void clear_applies_to_direction();
  static const int kAppliesToDirectionFieldNumber = 2;
  ::com::here::pb::hdmap::external::v1::common::RelativeDirection applies_to_direction() const;
  void set_applies_to_direction(::com::here::pb::hdmap::external::v1::common::RelativeDirection value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attribution_group_indexes_;
  mutable std::atomic<int> _attribution_group_indexes_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingLinkParametricAttribution > link_parametric_attribution_;
  ::com::here::pb::hdmap::external::v1::common::ParametricRange* applies_to_range_;
  int applies_to_direction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class LinkAttribution_PointAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution) */ {
 public:
  LinkAttribution_PointAttribution();
  virtual ~LinkAttribution_PointAttribution();

  LinkAttribution_PointAttribution(const LinkAttribution_PointAttribution& from);

  inline LinkAttribution_PointAttribution& operator=(const LinkAttribution_PointAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinkAttribution_PointAttribution(LinkAttribution_PointAttribution&& from) noexcept
    : LinkAttribution_PointAttribution() {
    *this = ::std::move(from);
  }

  inline LinkAttribution_PointAttribution& operator=(LinkAttribution_PointAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LinkAttribution_PointAttribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkAttribution_PointAttribution* internal_default_instance() {
    return reinterpret_cast<const LinkAttribution_PointAttribution*>(
               &_LinkAttribution_PointAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LinkAttribution_PointAttribution* other);
  friend void swap(LinkAttribution_PointAttribution& a, LinkAttribution_PointAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinkAttribution_PointAttribution* New() const final {
    return CreateMaybeMessage<LinkAttribution_PointAttribution>(nullptr);
  }

  LinkAttribution_PointAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinkAttribution_PointAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinkAttribution_PointAttribution& from);
  void MergeFrom(const LinkAttribution_PointAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkAttribution_PointAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 attribution_group_indexes = 3 [packed = true];
  int attribution_group_indexes_size() const;
  void clear_attribution_group_indexes();
  static const int kAttributionGroupIndexesFieldNumber = 3;
  ::google::protobuf::uint32 attribution_group_indexes(int index) const;
  void set_attribution_group_indexes(int index, ::google::protobuf::uint32 value);
  void add_attribution_group_indexes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attribution_group_indexes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attribution_group_indexes();

  // repeated .com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution link_point_attribution = 4;
  int link_point_attribution_size() const;
  void clear_link_point_attribution();
  static const int kLinkPointAttributionFieldNumber = 4;
  ::com::here::pb::hdmap::external::v1::routing::RoutingLinkPointAttribution* mutable_link_point_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingLinkPointAttribution >*
      mutable_link_point_attribution();
  const ::com::here::pb::hdmap::external::v1::routing::RoutingLinkPointAttribution& link_point_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::routing::RoutingLinkPointAttribution* add_link_point_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingLinkPointAttribution >&
      link_point_attribution() const;

  // double applies_to_location = 1;
  void clear_applies_to_location();
  static const int kAppliesToLocationFieldNumber = 1;
  double applies_to_location() const;
  void set_applies_to_location(double value);

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
  void clear_applies_to_direction();
  static const int kAppliesToDirectionFieldNumber = 2;
  ::com::here::pb::hdmap::external::v1::common::RelativeDirection applies_to_direction() const;
  void set_applies_to_direction(::com::here::pb::hdmap::external::v1::common::RelativeDirection value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attribution_group_indexes_;
  mutable std::atomic<int> _attribution_group_indexes_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingLinkPointAttribution > link_point_attribution_;
  double applies_to_location_;
  int applies_to_direction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class LinkAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.LinkAttribution) */ {
 public:
  LinkAttribution();
  virtual ~LinkAttribution();

  LinkAttribution(const LinkAttribution& from);

  inline LinkAttribution& operator=(const LinkAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinkAttribution(LinkAttribution&& from) noexcept
    : LinkAttribution() {
    *this = ::std::move(from);
  }

  inline LinkAttribution& operator=(LinkAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LinkAttribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkAttribution* internal_default_instance() {
    return reinterpret_cast<const LinkAttribution*>(
               &_LinkAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LinkAttribution* other);
  friend void swap(LinkAttribution& a, LinkAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinkAttribution* New() const final {
    return CreateMaybeMessage<LinkAttribution>(nullptr);
  }

  LinkAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinkAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinkAttribution& from);
  void MergeFrom(const LinkAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinkAttribution_ParametricAttribution ParametricAttribution;
  typedef LinkAttribution_PointAttribution PointAttribution;

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution parametric_attribution = 2;
  int parametric_attribution_size() const;
  void clear_parametric_attribution();
  static const int kParametricAttributionFieldNumber = 2;
  ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_ParametricAttribution* mutable_parametric_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_ParametricAttribution >*
      mutable_parametric_attribution();
  const ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_ParametricAttribution& parametric_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_ParametricAttribution* add_parametric_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_ParametricAttribution >&
      parametric_attribution() const;

  // repeated .com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution point_attribution = 3;
  int point_attribution_size() const;
  void clear_point_attribution();
  static const int kPointAttributionFieldNumber = 3;
  ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_PointAttribution* mutable_point_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_PointAttribution >*
      mutable_point_attribution();
  const ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_PointAttribution& point_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_PointAttribution* add_point_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_PointAttribution >&
      point_attribution() const;

  // repeated .com.here.pb.hdmap.external.v1.common.TiledStrandAttributionReference strand_attribution_refs = 4;
  int strand_attribution_refs_size() const;
  void clear_strand_attribution_refs();
  static const int kStrandAttributionRefsFieldNumber = 4;
  ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference* mutable_strand_attribution_refs(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference >*
      mutable_strand_attribution_refs();
  const ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference& strand_attribution_refs(int index) const;
  ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference* add_strand_attribution_refs();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference >&
      strand_attribution_refs() const;

  // uint32 link_local_ref = 1;
  void clear_link_local_ref();
  static const int kLinkLocalRefFieldNumber = 1;
  ::google::protobuf::uint32 link_local_ref() const;
  void set_link_local_ref(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.LinkAttribution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_ParametricAttribution > parametric_attribution_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_PointAttribution > point_attribution_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference > strand_attribution_refs_;
  ::google::protobuf::uint32 link_local_ref_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class NodeAttribution_IntersectionTraversalAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution) */ {
 public:
  NodeAttribution_IntersectionTraversalAttribution();
  virtual ~NodeAttribution_IntersectionTraversalAttribution();

  NodeAttribution_IntersectionTraversalAttribution(const NodeAttribution_IntersectionTraversalAttribution& from);

  inline NodeAttribution_IntersectionTraversalAttribution& operator=(const NodeAttribution_IntersectionTraversalAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeAttribution_IntersectionTraversalAttribution(NodeAttribution_IntersectionTraversalAttribution&& from) noexcept
    : NodeAttribution_IntersectionTraversalAttribution() {
    *this = ::std::move(from);
  }

  inline NodeAttribution_IntersectionTraversalAttribution& operator=(NodeAttribution_IntersectionTraversalAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeAttribution_IntersectionTraversalAttribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeAttribution_IntersectionTraversalAttribution* internal_default_instance() {
    return reinterpret_cast<const NodeAttribution_IntersectionTraversalAttribution*>(
               &_NodeAttribution_IntersectionTraversalAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NodeAttribution_IntersectionTraversalAttribution* other);
  friend void swap(NodeAttribution_IntersectionTraversalAttribution& a, NodeAttribution_IntersectionTraversalAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeAttribution_IntersectionTraversalAttribution* New() const final {
    return CreateMaybeMessage<NodeAttribution_IntersectionTraversalAttribution>(nullptr);
  }

  NodeAttribution_IntersectionTraversalAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeAttribution_IntersectionTraversalAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeAttribution_IntersectionTraversalAttribution& from);
  void MergeFrom(const NodeAttribution_IntersectionTraversalAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeAttribution_IntersectionTraversalAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference from_link_refs = 1;
  int from_link_refs_size() const;
  void clear_from_link_refs();
  static const int kFromLinkRefsFieldNumber = 1;
  ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* mutable_from_link_refs(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >*
      mutable_from_link_refs();
  const ::com::here::pb::hdmap::external::v1::common::TiledLinkReference& from_link_refs(int index) const;
  ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* add_from_link_refs();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >&
      from_link_refs() const;

  // repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference to_link_refs = 2;
  int to_link_refs_size() const;
  void clear_to_link_refs();
  static const int kToLinkRefsFieldNumber = 2;
  ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* mutable_to_link_refs(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >*
      mutable_to_link_refs();
  const ::com::here::pb::hdmap::external::v1::common::TiledLinkReference& to_link_refs(int index) const;
  ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* add_to_link_refs();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >&
      to_link_refs() const;

  // repeated uint32 attribution_group_indexes = 3 [packed = true];
  int attribution_group_indexes_size() const;
  void clear_attribution_group_indexes();
  static const int kAttributionGroupIndexesFieldNumber = 3;
  ::google::protobuf::uint32 attribution_group_indexes(int index) const;
  void set_attribution_group_indexes(int index, ::google::protobuf::uint32 value);
  void add_attribution_group_indexes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attribution_group_indexes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attribution_group_indexes();

  // repeated .com.here.pb.hdmap.external.v1.routing.RoutingNodeAttribution node_attribution = 4;
  int node_attribution_size() const;
  void clear_node_attribution();
  static const int kNodeAttributionFieldNumber = 4;
  ::com::here::pb::hdmap::external::v1::routing::RoutingNodeAttribution* mutable_node_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingNodeAttribution >*
      mutable_node_attribution();
  const ::com::here::pb::hdmap::external::v1::routing::RoutingNodeAttribution& node_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::routing::RoutingNodeAttribution* add_node_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingNodeAttribution >&
      node_attribution() const;

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference > from_link_refs_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference > to_link_refs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attribution_group_indexes_;
  mutable std::atomic<int> _attribution_group_indexes_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingNodeAttribution > node_attribution_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class NodeAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.NodeAttribution) */ {
 public:
  NodeAttribution();
  virtual ~NodeAttribution();

  NodeAttribution(const NodeAttribution& from);

  inline NodeAttribution& operator=(const NodeAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeAttribution(NodeAttribution&& from) noexcept
    : NodeAttribution() {
    *this = ::std::move(from);
  }

  inline NodeAttribution& operator=(NodeAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeAttribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeAttribution* internal_default_instance() {
    return reinterpret_cast<const NodeAttribution*>(
               &_NodeAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NodeAttribution* other);
  friend void swap(NodeAttribution& a, NodeAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeAttribution* New() const final {
    return CreateMaybeMessage<NodeAttribution>(nullptr);
  }

  NodeAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeAttribution& from);
  void MergeFrom(const NodeAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NodeAttribution_IntersectionTraversalAttribution IntersectionTraversalAttribution;

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution intersection_traversal_attribution = 2;
  int intersection_traversal_attribution_size() const;
  void clear_intersection_traversal_attribution();
  static const int kIntersectionTraversalAttributionFieldNumber = 2;
  ::com::here::pb::hdmap::external::v1::routing::NodeAttribution_IntersectionTraversalAttribution* mutable_intersection_traversal_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::NodeAttribution_IntersectionTraversalAttribution >*
      mutable_intersection_traversal_attribution();
  const ::com::here::pb::hdmap::external::v1::routing::NodeAttribution_IntersectionTraversalAttribution& intersection_traversal_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::routing::NodeAttribution_IntersectionTraversalAttribution* add_intersection_traversal_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::NodeAttribution_IntersectionTraversalAttribution >&
      intersection_traversal_attribution() const;

  // uint32 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::uint32 node_id() const;
  void set_node_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.NodeAttribution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::NodeAttribution_IntersectionTraversalAttribution > intersection_traversal_attribution_;
  ::google::protobuf::uint32 node_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class StrandAttribution_OrientedTiledLinkReference final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.StrandAttribution.OrientedTiledLinkReference) */ {
 public:
  StrandAttribution_OrientedTiledLinkReference();
  virtual ~StrandAttribution_OrientedTiledLinkReference();

  StrandAttribution_OrientedTiledLinkReference(const StrandAttribution_OrientedTiledLinkReference& from);

  inline StrandAttribution_OrientedTiledLinkReference& operator=(const StrandAttribution_OrientedTiledLinkReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StrandAttribution_OrientedTiledLinkReference(StrandAttribution_OrientedTiledLinkReference&& from) noexcept
    : StrandAttribution_OrientedTiledLinkReference() {
    *this = ::std::move(from);
  }

  inline StrandAttribution_OrientedTiledLinkReference& operator=(StrandAttribution_OrientedTiledLinkReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StrandAttribution_OrientedTiledLinkReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StrandAttribution_OrientedTiledLinkReference* internal_default_instance() {
    return reinterpret_cast<const StrandAttribution_OrientedTiledLinkReference*>(
               &_StrandAttribution_OrientedTiledLinkReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(StrandAttribution_OrientedTiledLinkReference* other);
  friend void swap(StrandAttribution_OrientedTiledLinkReference& a, StrandAttribution_OrientedTiledLinkReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StrandAttribution_OrientedTiledLinkReference* New() const final {
    return CreateMaybeMessage<StrandAttribution_OrientedTiledLinkReference>(nullptr);
  }

  StrandAttribution_OrientedTiledLinkReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StrandAttribution_OrientedTiledLinkReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StrandAttribution_OrientedTiledLinkReference& from);
  void MergeFrom(const StrandAttribution_OrientedTiledLinkReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrandAttribution_OrientedTiledLinkReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.external.v1.common.TiledLinkReference additional_link_refs = 1;
  bool has_additional_link_refs() const;
  void clear_additional_link_refs();
  static const int kAdditionalLinkRefsFieldNumber = 1;
  const ::com::here::pb::hdmap::external::v1::common::TiledLinkReference& additional_link_refs() const;
  ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* release_additional_link_refs();
  ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* mutable_additional_link_refs();
  void set_allocated_additional_link_refs(::com::here::pb::hdmap::external::v1::common::TiledLinkReference* additional_link_refs);

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection link_orientation_in_strand = 2;
  void clear_link_orientation_in_strand();
  static const int kLinkOrientationInStrandFieldNumber = 2;
  ::com::here::pb::hdmap::external::v1::common::RelativeDirection link_orientation_in_strand() const;
  void set_link_orientation_in_strand(::com::here::pb::hdmap::external::v1::common::RelativeDirection value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.StrandAttribution.OrientedTiledLinkReference)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* additional_link_refs_;
  int link_orientation_in_strand_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class StrandAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.StrandAttribution) */ {
 public:
  StrandAttribution();
  virtual ~StrandAttribution();

  StrandAttribution(const StrandAttribution& from);

  inline StrandAttribution& operator=(const StrandAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StrandAttribution(StrandAttribution&& from) noexcept
    : StrandAttribution() {
    *this = ::std::move(from);
  }

  inline StrandAttribution& operator=(StrandAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StrandAttribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StrandAttribution* internal_default_instance() {
    return reinterpret_cast<const StrandAttribution*>(
               &_StrandAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(StrandAttribution* other);
  friend void swap(StrandAttribution& a, StrandAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StrandAttribution* New() const final {
    return CreateMaybeMessage<StrandAttribution>(nullptr);
  }

  StrandAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StrandAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StrandAttribution& from);
  void MergeFrom(const StrandAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrandAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StrandAttribution_OrientedTiledLinkReference OrientedTiledLinkReference;

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.v1.routing.StrandAttribution.OrientedTiledLinkReference additional_link_refs = 5;
  int additional_link_refs_size() const;
  void clear_additional_link_refs();
  static const int kAdditionalLinkRefsFieldNumber = 5;
  ::com::here::pb::hdmap::external::v1::routing::StrandAttribution_OrientedTiledLinkReference* mutable_additional_link_refs(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::StrandAttribution_OrientedTiledLinkReference >*
      mutable_additional_link_refs();
  const ::com::here::pb::hdmap::external::v1::routing::StrandAttribution_OrientedTiledLinkReference& additional_link_refs(int index) const;
  ::com::here::pb::hdmap::external::v1::routing::StrandAttribution_OrientedTiledLinkReference* add_additional_link_refs();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::StrandAttribution_OrientedTiledLinkReference >&
      additional_link_refs() const;

  // repeated uint32 attribution_group_indexes = 7 [packed = true];
  int attribution_group_indexes_size() const;
  void clear_attribution_group_indexes();
  static const int kAttributionGroupIndexesFieldNumber = 7;
  ::google::protobuf::uint32 attribution_group_indexes(int index) const;
  void set_attribution_group_indexes(int index, ::google::protobuf::uint32 value);
  void add_attribution_group_indexes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attribution_group_indexes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attribution_group_indexes();

  // repeated .com.here.pb.hdmap.external.v1.routing.RoutingStrandAttribution strand_attribution = 8;
  int strand_attribution_size() const;
  void clear_strand_attribution();
  static const int kStrandAttributionFieldNumber = 8;
  ::com::here::pb::hdmap::external::v1::routing::RoutingStrandAttribution* mutable_strand_attribution(int index);
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingStrandAttribution >*
      mutable_strand_attribution();
  const ::com::here::pb::hdmap::external::v1::routing::RoutingStrandAttribution& strand_attribution(int index) const;
  ::com::here::pb::hdmap::external::v1::routing::RoutingStrandAttribution* add_strand_attribution();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingStrandAttribution >&
      strand_attribution() const;

  // .com.here.pb.hdmap.external.v1.common.StrandAttributionLocalReference strand_attribution_id = 1;
  bool has_strand_attribution_id() const;
  void clear_strand_attribution_id();
  static const int kStrandAttributionIdFieldNumber = 1;
  const ::com::here::pb::hdmap::external::v1::common::StrandAttributionLocalReference& strand_attribution_id() const;
  ::com::here::pb::hdmap::external::v1::common::StrandAttributionLocalReference* release_strand_attribution_id();
  ::com::here::pb::hdmap::external::v1::common::StrandAttributionLocalReference* mutable_strand_attribution_id();
  void set_allocated_strand_attribution_id(::com::here::pb::hdmap::external::v1::common::StrandAttributionLocalReference* strand_attribution_id);

  // .com.here.pb.hdmap.external.v1.common.ParametricLocation first_link_start = 3;
  bool has_first_link_start() const;
  void clear_first_link_start();
  static const int kFirstLinkStartFieldNumber = 3;
  const ::com::here::pb::hdmap::external::v1::common::ParametricLocation& first_link_start() const;
  ::com::here::pb::hdmap::external::v1::common::ParametricLocation* release_first_link_start();
  ::com::here::pb::hdmap::external::v1::common::ParametricLocation* mutable_first_link_start();
  void set_allocated_first_link_start(::com::here::pb::hdmap::external::v1::common::ParametricLocation* first_link_start);

  // .com.here.pb.hdmap.external.v1.common.ParametricLocation last_link_end = 6;
  bool has_last_link_end() const;
  void clear_last_link_end();
  static const int kLastLinkEndFieldNumber = 6;
  const ::com::here::pb::hdmap::external::v1::common::ParametricLocation& last_link_end() const;
  ::com::here::pb::hdmap::external::v1::common::ParametricLocation* release_last_link_end();
  ::com::here::pb::hdmap::external::v1::common::ParametricLocation* mutable_last_link_end();
  void set_allocated_last_link_end(::com::here::pb::hdmap::external::v1::common::ParametricLocation* last_link_end);

  // uint32 first_link_id = 2;
  void clear_first_link_id();
  static const int kFirstLinkIdFieldNumber = 2;
  ::google::protobuf::uint32 first_link_id() const;
  void set_first_link_id(::google::protobuf::uint32 value);

  // .com.here.pb.hdmap.external.v1.common.RelativeDirection first_link_orientation_in_strand = 4;
  void clear_first_link_orientation_in_strand();
  static const int kFirstLinkOrientationInStrandFieldNumber = 4;
  ::com::here::pb::hdmap::external::v1::common::RelativeDirection first_link_orientation_in_strand() const;
  void set_first_link_orientation_in_strand(::com::here::pb::hdmap::external::v1::common::RelativeDirection value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.StrandAttribution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::StrandAttribution_OrientedTiledLinkReference > additional_link_refs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attribution_group_indexes_;
  mutable std::atomic<int> _attribution_group_indexes_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingStrandAttribution > strand_attribution_;
  ::com::here::pb::hdmap::external::v1::common::StrandAttributionLocalReference* strand_attribution_id_;
  ::com::here::pb::hdmap::external::v1::common::ParametricLocation* first_link_start_;
  ::com::here::pb::hdmap::external::v1::common::ParametricLocation* last_link_end_;
  ::google::protobuf::uint32 first_link_id_;
  int first_link_orientation_in_strand_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class RoutingAttributionGroup final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.RoutingAttributionGroup) */ {
 public:
  RoutingAttributionGroup();
  virtual ~RoutingAttributionGroup();

  RoutingAttributionGroup(const RoutingAttributionGroup& from);

  inline RoutingAttributionGroup& operator=(const RoutingAttributionGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoutingAttributionGroup(RoutingAttributionGroup&& from) noexcept
    : RoutingAttributionGroup() {
    *this = ::std::move(from);
  }

  inline RoutingAttributionGroup& operator=(RoutingAttributionGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RoutingAttributionGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingAttributionGroup* internal_default_instance() {
    return reinterpret_cast<const RoutingAttributionGroup*>(
               &_RoutingAttributionGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(RoutingAttributionGroup* other);
  friend void swap(RoutingAttributionGroup& a, RoutingAttributionGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoutingAttributionGroup* New() const final {
    return CreateMaybeMessage<RoutingAttributionGroup>(nullptr);
  }

  RoutingAttributionGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoutingAttributionGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoutingAttributionGroup& from);
  void MergeFrom(const RoutingAttributionGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingAttributionGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.RoutingAttributionGroup)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class RoutingLinkParametricAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution) */ {
 public:
  RoutingLinkParametricAttribution();
  virtual ~RoutingLinkParametricAttribution();

  RoutingLinkParametricAttribution(const RoutingLinkParametricAttribution& from);

  inline RoutingLinkParametricAttribution& operator=(const RoutingLinkParametricAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoutingLinkParametricAttribution(RoutingLinkParametricAttribution&& from) noexcept
    : RoutingLinkParametricAttribution() {
    *this = ::std::move(from);
  }

  inline RoutingLinkParametricAttribution& operator=(RoutingLinkParametricAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RoutingLinkParametricAttribution& default_instance();

  enum AttributeCase {
    kAccessibleBy = 2,
    kFunctionalClass = 3,
    kIsMultiplyDigitized = 4,
    kIsBridge = 5,
    kIsTunnel = 6,
    kIsControlledAccess = 7,
    kIsLimitedAccess = 8,
    kIsUrban = 9,
    kIsPriorityRoad = 10,
    kIsRamp = 11,
    kBuiltUpAreaRoad = 12,
    kComplexIntersection = 13,
    kRdsTmcCode = 14,
    kConditionalUsageFeeRequired = 15,
    kConditionalOvertakingRestriction = 16,
    kConditionalAccessRestriction = 17,
    kConditionalAccessPermission = 18,
    kRoadDivider = 19,
    kAdministrativeAreaRelationship = 20,
    kRoadIdentifiers = 21,
    kIsWithinInterchange = 22,
    ATTRIBUTE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingLinkParametricAttribution* internal_default_instance() {
    return reinterpret_cast<const RoutingLinkParametricAttribution*>(
               &_RoutingLinkParametricAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(RoutingLinkParametricAttribution* other);
  friend void swap(RoutingLinkParametricAttribution& a, RoutingLinkParametricAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoutingLinkParametricAttribution* New() const final {
    return CreateMaybeMessage<RoutingLinkParametricAttribution>(nullptr);
  }

  RoutingLinkParametricAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoutingLinkParametricAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoutingLinkParametricAttribution& from);
  void MergeFrom(const RoutingLinkParametricAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingLinkParametricAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.shared.v1.core.RoadUsers accessible_by = 2;
  bool has_accessible_by() const;
  void clear_accessible_by();
  static const int kAccessibleByFieldNumber = 2;
  const ::com::here::pb::hdmap::shared::v1::core::RoadUsers& accessible_by() const;
  ::com::here::pb::hdmap::shared::v1::core::RoadUsers* release_accessible_by();
  ::com::here::pb::hdmap::shared::v1::core::RoadUsers* mutable_accessible_by();
  void set_allocated_accessible_by(::com::here::pb::hdmap::shared::v1::core::RoadUsers* accessible_by);

  // .com.here.pb.hdmap.shared.v1.core.FunctionalClass functional_class = 3;
  private:
  bool has_functional_class() const;
  public:
  void clear_functional_class();
  static const int kFunctionalClassFieldNumber = 3;
  ::com::here::pb::hdmap::shared::v1::core::FunctionalClass functional_class() const;
  void set_functional_class(::com::here::pb::hdmap::shared::v1::core::FunctionalClass value);

  // bool is_multiply_digitized = 4;
  private:
  bool has_is_multiply_digitized() const;
  public:
  void clear_is_multiply_digitized();
  static const int kIsMultiplyDigitizedFieldNumber = 4;
  bool is_multiply_digitized() const;
  void set_is_multiply_digitized(bool value);

  // bool is_bridge = 5;
  private:
  bool has_is_bridge() const;
  public:
  void clear_is_bridge();
  static const int kIsBridgeFieldNumber = 5;
  bool is_bridge() const;
  void set_is_bridge(bool value);

  // bool is_tunnel = 6;
  private:
  bool has_is_tunnel() const;
  public:
  void clear_is_tunnel();
  static const int kIsTunnelFieldNumber = 6;
  bool is_tunnel() const;
  void set_is_tunnel(bool value);

  // bool is_controlled_access = 7;
  private:
  bool has_is_controlled_access() const;
  public:
  void clear_is_controlled_access();
  static const int kIsControlledAccessFieldNumber = 7;
  bool is_controlled_access() const;
  void set_is_controlled_access(bool value);

  // bool is_limited_access = 8;
  private:
  bool has_is_limited_access() const;
  public:
  void clear_is_limited_access();
  static const int kIsLimitedAccessFieldNumber = 8;
  bool is_limited_access() const;
  void set_is_limited_access(bool value);

  // bool is_urban = 9;
  private:
  bool has_is_urban() const;
  public:
  void clear_is_urban();
  static const int kIsUrbanFieldNumber = 9;
  bool is_urban() const;
  void set_is_urban(bool value);

  // bool is_priority_road = 10;
  private:
  bool has_is_priority_road() const;
  public:
  void clear_is_priority_road();
  static const int kIsPriorityRoadFieldNumber = 10;
  bool is_priority_road() const;
  void set_is_priority_road(bool value);

  // bool is_ramp = 11;
  private:
  bool has_is_ramp() const;
  public:
  void clear_is_ramp();
  static const int kIsRampFieldNumber = 11;
  bool is_ramp() const;
  void set_is_ramp(bool value);

  // .com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad built_up_area_road = 12;
  bool has_built_up_area_road() const;
  void clear_built_up_area_road();
  static const int kBuiltUpAreaRoadFieldNumber = 12;
  const ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad& built_up_area_road() const;
  ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad* release_built_up_area_road();
  ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad* mutable_built_up_area_road();
  void set_allocated_built_up_area_road(::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad* built_up_area_road);

  // .com.here.pb.hdmap.shared.v1.core.ComplexIntersection complex_intersection = 13;
  bool has_complex_intersection() const;
  void clear_complex_intersection();
  static const int kComplexIntersectionFieldNumber = 13;
  const ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection& complex_intersection() const;
  ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection* release_complex_intersection();
  ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection* mutable_complex_intersection();
  void set_allocated_complex_intersection(::com::here::pb::hdmap::shared::v1::core::ComplexIntersection* complex_intersection);

  // .com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode rds_tmc_code = 14;
  bool has_rds_tmc_code() const;
  void clear_rds_tmc_code();
  static const int kRdsTmcCodeFieldNumber = 14;
  const ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode& rds_tmc_code() const;
  ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode* release_rds_tmc_code();
  ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode* mutable_rds_tmc_code();
  void set_allocated_rds_tmc_code(::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode* rds_tmc_code);

  // .com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired conditional_usage_fee_required = 15;
  bool has_conditional_usage_fee_required() const;
  void clear_conditional_usage_fee_required();
  static const int kConditionalUsageFeeRequiredFieldNumber = 15;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired& conditional_usage_fee_required() const;
  ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired* release_conditional_usage_fee_required();
  ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired* mutable_conditional_usage_fee_required();
  void set_allocated_conditional_usage_fee_required(::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired* conditional_usage_fee_required);

  // .com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction conditional_overtaking_restriction = 16;
  bool has_conditional_overtaking_restriction() const;
  void clear_conditional_overtaking_restriction();
  static const int kConditionalOvertakingRestrictionFieldNumber = 16;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction& conditional_overtaking_restriction() const;
  ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction* release_conditional_overtaking_restriction();
  ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction* mutable_conditional_overtaking_restriction();
  void set_allocated_conditional_overtaking_restriction(::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction* conditional_overtaking_restriction);

  // .com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction conditional_access_restriction = 17;
  bool has_conditional_access_restriction() const;
  void clear_conditional_access_restriction();
  static const int kConditionalAccessRestrictionFieldNumber = 17;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction& conditional_access_restriction() const;
  ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction* release_conditional_access_restriction();
  ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction* mutable_conditional_access_restriction();
  void set_allocated_conditional_access_restriction(::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction* conditional_access_restriction);

  // .com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission conditional_access_permission = 18;
  bool has_conditional_access_permission() const;
  void clear_conditional_access_permission();
  static const int kConditionalAccessPermissionFieldNumber = 18;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission& conditional_access_permission() const;
  ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission* release_conditional_access_permission();
  ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission* mutable_conditional_access_permission();
  void set_allocated_conditional_access_permission(::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission* conditional_access_permission);

  // .com.here.pb.hdmap.shared.v1.core.RoadDivider road_divider = 19;
  bool has_road_divider() const;
  void clear_road_divider();
  static const int kRoadDividerFieldNumber = 19;
  const ::com::here::pb::hdmap::shared::v1::core::RoadDivider& road_divider() const;
  ::com::here::pb::hdmap::shared::v1::core::RoadDivider* release_road_divider();
  ::com::here::pb::hdmap::shared::v1::core::RoadDivider* mutable_road_divider();
  void set_allocated_road_divider(::com::here::pb::hdmap::shared::v1::core::RoadDivider* road_divider);

  // .com.here.pb.hdmap.external.v1.routing.AdministrativeAreaRelationship administrative_area_relationship = 20;
  bool has_administrative_area_relationship() const;
  void clear_administrative_area_relationship();
  static const int kAdministrativeAreaRelationshipFieldNumber = 20;
  const ::com::here::pb::hdmap::external::v1::routing::AdministrativeAreaRelationship& administrative_area_relationship() const;
  ::com::here::pb::hdmap::external::v1::routing::AdministrativeAreaRelationship* release_administrative_area_relationship();
  ::com::here::pb::hdmap::external::v1::routing::AdministrativeAreaRelationship* mutable_administrative_area_relationship();
  void set_allocated_administrative_area_relationship(::com::here::pb::hdmap::external::v1::routing::AdministrativeAreaRelationship* administrative_area_relationship);

  // .com.here.pb.hdmap.shared.v1.core.RoadIdentifiers road_identifiers = 21;
  bool has_road_identifiers() const;
  void clear_road_identifiers();
  static const int kRoadIdentifiersFieldNumber = 21;
  const ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers& road_identifiers() const;
  ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers* release_road_identifiers();
  ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers* mutable_road_identifiers();
  void set_allocated_road_identifiers(::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers* road_identifiers);

  // bool is_within_interchange = 22;
  private:
  bool has_is_within_interchange() const;
  public:
  void clear_is_within_interchange();
  static const int kIsWithinInterchangeFieldNumber = 22;
  bool is_within_interchange() const;
  void set_is_within_interchange(bool value);

  void clear_attribute();
  AttributeCase attribute_case() const;
  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution)
 private:
  class HasBitSetters;
  void set_has_accessible_by();
  void set_has_functional_class();
  void set_has_is_multiply_digitized();
  void set_has_is_bridge();
  void set_has_is_tunnel();
  void set_has_is_controlled_access();
  void set_has_is_limited_access();
  void set_has_is_urban();
  void set_has_is_priority_road();
  void set_has_is_ramp();
  void set_has_built_up_area_road();
  void set_has_complex_intersection();
  void set_has_rds_tmc_code();
  void set_has_conditional_usage_fee_required();
  void set_has_conditional_overtaking_restriction();
  void set_has_conditional_access_restriction();
  void set_has_conditional_access_permission();
  void set_has_road_divider();
  void set_has_administrative_area_relationship();
  void set_has_road_identifiers();
  void set_has_is_within_interchange();

  inline bool has_attribute() const;
  inline void clear_has_attribute();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union AttributeUnion {
    AttributeUnion() {}
    ::com::here::pb::hdmap::shared::v1::core::RoadUsers* accessible_by_;
    int functional_class_;
    bool is_multiply_digitized_;
    bool is_bridge_;
    bool is_tunnel_;
    bool is_controlled_access_;
    bool is_limited_access_;
    bool is_urban_;
    bool is_priority_road_;
    bool is_ramp_;
    ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad* built_up_area_road_;
    ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection* complex_intersection_;
    ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode* rds_tmc_code_;
    ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired* conditional_usage_fee_required_;
    ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction* conditional_overtaking_restriction_;
    ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction* conditional_access_restriction_;
    ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission* conditional_access_permission_;
    ::com::here::pb::hdmap::shared::v1::core::RoadDivider* road_divider_;
    ::com::here::pb::hdmap::external::v1::routing::AdministrativeAreaRelationship* administrative_area_relationship_;
    ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers* road_identifiers_;
    bool is_within_interchange_;
  } attribute_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class RoutingLinkPointAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution) */ {
 public:
  RoutingLinkPointAttribution();
  virtual ~RoutingLinkPointAttribution();

  RoutingLinkPointAttribution(const RoutingLinkPointAttribution& from);

  inline RoutingLinkPointAttribution& operator=(const RoutingLinkPointAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoutingLinkPointAttribution(RoutingLinkPointAttribution&& from) noexcept
    : RoutingLinkPointAttribution() {
    *this = ::std::move(from);
  }

  inline RoutingLinkPointAttribution& operator=(RoutingLinkPointAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RoutingLinkPointAttribution& default_instance();

  enum AttributeCase {
    kConditionalRestrictedDrivingManoeuvre = 1,
    kConditionalUturnRestrictedDrivingManoeuvre = 2,
    kConditionalUturnPermittedDrivingManoeuvre = 3,
    kConditionalTollStructure = 4,
    ATTRIBUTE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingLinkPointAttribution* internal_default_instance() {
    return reinterpret_cast<const RoutingLinkPointAttribution*>(
               &_RoutingLinkPointAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(RoutingLinkPointAttribution* other);
  friend void swap(RoutingLinkPointAttribution& a, RoutingLinkPointAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoutingLinkPointAttribution* New() const final {
    return CreateMaybeMessage<RoutingLinkPointAttribution>(nullptr);
  }

  RoutingLinkPointAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoutingLinkPointAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoutingLinkPointAttribution& from);
  void MergeFrom(const RoutingLinkPointAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingLinkPointAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre conditional_restricted_driving_manoeuvre = 1;
  bool has_conditional_restricted_driving_manoeuvre() const;
  void clear_conditional_restricted_driving_manoeuvre();
  static const int kConditionalRestrictedDrivingManoeuvreFieldNumber = 1;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre& conditional_restricted_driving_manoeuvre() const;
  ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* release_conditional_restricted_driving_manoeuvre();
  ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* mutable_conditional_restricted_driving_manoeuvre();
  void set_allocated_conditional_restricted_driving_manoeuvre(::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* conditional_restricted_driving_manoeuvre);

  // .com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre conditional_uturn_restricted_driving_manoeuvre = 2;
  bool has_conditional_uturn_restricted_driving_manoeuvre() const;
  void clear_conditional_uturn_restricted_driving_manoeuvre();
  static const int kConditionalUturnRestrictedDrivingManoeuvreFieldNumber = 2;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre& conditional_uturn_restricted_driving_manoeuvre() const;
  ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* release_conditional_uturn_restricted_driving_manoeuvre();
  ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* mutable_conditional_uturn_restricted_driving_manoeuvre();
  void set_allocated_conditional_uturn_restricted_driving_manoeuvre(::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* conditional_uturn_restricted_driving_manoeuvre);

  // .com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre conditional_uturn_permitted_driving_manoeuvre = 3;
  bool has_conditional_uturn_permitted_driving_manoeuvre() const;
  void clear_conditional_uturn_permitted_driving_manoeuvre();
  static const int kConditionalUturnPermittedDrivingManoeuvreFieldNumber = 3;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre& conditional_uturn_permitted_driving_manoeuvre() const;
  ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* release_conditional_uturn_permitted_driving_manoeuvre();
  ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* mutable_conditional_uturn_permitted_driving_manoeuvre();
  void set_allocated_conditional_uturn_permitted_driving_manoeuvre(::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* conditional_uturn_permitted_driving_manoeuvre);

  // .com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure conditional_toll_structure = 4;
  bool has_conditional_toll_structure() const;
  void clear_conditional_toll_structure();
  static const int kConditionalTollStructureFieldNumber = 4;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure& conditional_toll_structure() const;
  ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure* release_conditional_toll_structure();
  ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure* mutable_conditional_toll_structure();
  void set_allocated_conditional_toll_structure(::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure* conditional_toll_structure);

  void clear_attribute();
  AttributeCase attribute_case() const;
  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution)
 private:
  class HasBitSetters;
  void set_has_conditional_restricted_driving_manoeuvre();
  void set_has_conditional_uturn_restricted_driving_manoeuvre();
  void set_has_conditional_uturn_permitted_driving_manoeuvre();
  void set_has_conditional_toll_structure();

  inline bool has_attribute() const;
  inline void clear_has_attribute();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union AttributeUnion {
    AttributeUnion() {}
    ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* conditional_restricted_driving_manoeuvre_;
    ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* conditional_uturn_restricted_driving_manoeuvre_;
    ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* conditional_uturn_permitted_driving_manoeuvre_;
    ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure* conditional_toll_structure_;
  } attribute_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class RoutingNodeAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.RoutingNodeAttribution) */ {
 public:
  RoutingNodeAttribution();
  virtual ~RoutingNodeAttribution();

  RoutingNodeAttribution(const RoutingNodeAttribution& from);

  inline RoutingNodeAttribution& operator=(const RoutingNodeAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoutingNodeAttribution(RoutingNodeAttribution&& from) noexcept
    : RoutingNodeAttribution() {
    *this = ::std::move(from);
  }

  inline RoutingNodeAttribution& operator=(RoutingNodeAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RoutingNodeAttribution& default_instance();

  enum AttributeCase {
    kConditionalRestrictedDrivingManoeuvre = 1,
    ATTRIBUTE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingNodeAttribution* internal_default_instance() {
    return reinterpret_cast<const RoutingNodeAttribution*>(
               &_RoutingNodeAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(RoutingNodeAttribution* other);
  friend void swap(RoutingNodeAttribution& a, RoutingNodeAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoutingNodeAttribution* New() const final {
    return CreateMaybeMessage<RoutingNodeAttribution>(nullptr);
  }

  RoutingNodeAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoutingNodeAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoutingNodeAttribution& from);
  void MergeFrom(const RoutingNodeAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingNodeAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre conditional_restricted_driving_manoeuvre = 1;
  bool has_conditional_restricted_driving_manoeuvre() const;
  void clear_conditional_restricted_driving_manoeuvre();
  static const int kConditionalRestrictedDrivingManoeuvreFieldNumber = 1;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre& conditional_restricted_driving_manoeuvre() const;
  ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* release_conditional_restricted_driving_manoeuvre();
  ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* mutable_conditional_restricted_driving_manoeuvre();
  void set_allocated_conditional_restricted_driving_manoeuvre(::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* conditional_restricted_driving_manoeuvre);

  void clear_attribute();
  AttributeCase attribute_case() const;
  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.RoutingNodeAttribution)
 private:
  class HasBitSetters;
  void set_has_conditional_restricted_driving_manoeuvre();

  inline bool has_attribute() const;
  inline void clear_has_attribute();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union AttributeUnion {
    AttributeUnion() {}
    ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* conditional_restricted_driving_manoeuvre_;
  } attribute_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class RoutingStrandAttribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.RoutingStrandAttribution) */ {
 public:
  RoutingStrandAttribution();
  virtual ~RoutingStrandAttribution();

  RoutingStrandAttribution(const RoutingStrandAttribution& from);

  inline RoutingStrandAttribution& operator=(const RoutingStrandAttribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoutingStrandAttribution(RoutingStrandAttribution&& from) noexcept
    : RoutingStrandAttribution() {
    *this = ::std::move(from);
  }

  inline RoutingStrandAttribution& operator=(RoutingStrandAttribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RoutingStrandAttribution& default_instance();

  enum TypeCase {
    kConditionalRestrictedDrivingManoeuvre = 1,
    kConditionalPermittedDrivingManoeuvre = 2,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingStrandAttribution* internal_default_instance() {
    return reinterpret_cast<const RoutingStrandAttribution*>(
               &_RoutingStrandAttribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RoutingStrandAttribution* other);
  friend void swap(RoutingStrandAttribution& a, RoutingStrandAttribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoutingStrandAttribution* New() const final {
    return CreateMaybeMessage<RoutingStrandAttribution>(nullptr);
  }

  RoutingStrandAttribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoutingStrandAttribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoutingStrandAttribution& from);
  void MergeFrom(const RoutingStrandAttribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingStrandAttribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre conditional_restricted_driving_manoeuvre = 1;
  bool has_conditional_restricted_driving_manoeuvre() const;
  void clear_conditional_restricted_driving_manoeuvre();
  static const int kConditionalRestrictedDrivingManoeuvreFieldNumber = 1;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre& conditional_restricted_driving_manoeuvre() const;
  ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* release_conditional_restricted_driving_manoeuvre();
  ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* mutable_conditional_restricted_driving_manoeuvre();
  void set_allocated_conditional_restricted_driving_manoeuvre(::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* conditional_restricted_driving_manoeuvre);

  // .com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre conditional_permitted_driving_manoeuvre = 2;
  bool has_conditional_permitted_driving_manoeuvre() const;
  void clear_conditional_permitted_driving_manoeuvre();
  static const int kConditionalPermittedDrivingManoeuvreFieldNumber = 2;
  const ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre& conditional_permitted_driving_manoeuvre() const;
  ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* release_conditional_permitted_driving_manoeuvre();
  ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* mutable_conditional_permitted_driving_manoeuvre();
  void set_allocated_conditional_permitted_driving_manoeuvre(::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* conditional_permitted_driving_manoeuvre);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.RoutingStrandAttribution)
 private:
  class HasBitSetters;
  void set_has_conditional_restricted_driving_manoeuvre();
  void set_has_conditional_permitted_driving_manoeuvre();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* conditional_restricted_driving_manoeuvre_;
    ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* conditional_permitted_driving_manoeuvre_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class AdministrativeAreaRelationship final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.AdministrativeAreaRelationship) */ {
 public:
  AdministrativeAreaRelationship();
  virtual ~AdministrativeAreaRelationship();

  AdministrativeAreaRelationship(const AdministrativeAreaRelationship& from);

  inline AdministrativeAreaRelationship& operator=(const AdministrativeAreaRelationship& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdministrativeAreaRelationship(AdministrativeAreaRelationship&& from) noexcept
    : AdministrativeAreaRelationship() {
    *this = ::std::move(from);
  }

  inline AdministrativeAreaRelationship& operator=(AdministrativeAreaRelationship&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AdministrativeAreaRelationship& default_instance();

  enum RelationCase {
    kAdministrativeAreaBoundary = 1,
    kWithinAdministrativeArea = 2,
    RELATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdministrativeAreaRelationship* internal_default_instance() {
    return reinterpret_cast<const AdministrativeAreaRelationship*>(
               &_AdministrativeAreaRelationship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(AdministrativeAreaRelationship* other);
  friend void swap(AdministrativeAreaRelationship& a, AdministrativeAreaRelationship& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdministrativeAreaRelationship* New() const final {
    return CreateMaybeMessage<AdministrativeAreaRelationship>(nullptr);
  }

  AdministrativeAreaRelationship* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdministrativeAreaRelationship>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdministrativeAreaRelationship& from);
  void MergeFrom(const AdministrativeAreaRelationship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdministrativeAreaRelationship* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.external.v1.routing.DefinesAdministrativeAreaBoundary administrative_area_boundary = 1;
  bool has_administrative_area_boundary() const;
  void clear_administrative_area_boundary();
  static const int kAdministrativeAreaBoundaryFieldNumber = 1;
  const ::com::here::pb::hdmap::external::v1::routing::DefinesAdministrativeAreaBoundary& administrative_area_boundary() const;
  ::com::here::pb::hdmap::external::v1::routing::DefinesAdministrativeAreaBoundary* release_administrative_area_boundary();
  ::com::here::pb::hdmap::external::v1::routing::DefinesAdministrativeAreaBoundary* mutable_administrative_area_boundary();
  void set_allocated_administrative_area_boundary(::com::here::pb::hdmap::external::v1::routing::DefinesAdministrativeAreaBoundary* administrative_area_boundary);

  // .com.here.pb.hdmap.external.v1.routing.WithinAdministrativeArea within_administrative_area = 2;
  bool has_within_administrative_area() const;
  void clear_within_administrative_area();
  static const int kWithinAdministrativeAreaFieldNumber = 2;
  const ::com::here::pb::hdmap::external::v1::routing::WithinAdministrativeArea& within_administrative_area() const;
  ::com::here::pb::hdmap::external::v1::routing::WithinAdministrativeArea* release_within_administrative_area();
  ::com::here::pb::hdmap::external::v1::routing::WithinAdministrativeArea* mutable_within_administrative_area();
  void set_allocated_within_administrative_area(::com::here::pb::hdmap::external::v1::routing::WithinAdministrativeArea* within_administrative_area);

  void clear_relation();
  RelationCase relation_case() const;
  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.AdministrativeAreaRelationship)
 private:
  class HasBitSetters;
  void set_has_administrative_area_boundary();
  void set_has_within_administrative_area();

  inline bool has_relation() const;
  inline void clear_has_relation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union RelationUnion {
    RelationUnion() {}
    ::com::here::pb::hdmap::external::v1::routing::DefinesAdministrativeAreaBoundary* administrative_area_boundary_;
    ::com::here::pb::hdmap::external::v1::routing::WithinAdministrativeArea* within_administrative_area_;
  } relation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class DefinesAdministrativeAreaBoundary final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.DefinesAdministrativeAreaBoundary) */ {
 public:
  DefinesAdministrativeAreaBoundary();
  virtual ~DefinesAdministrativeAreaBoundary();

  DefinesAdministrativeAreaBoundary(const DefinesAdministrativeAreaBoundary& from);

  inline DefinesAdministrativeAreaBoundary& operator=(const DefinesAdministrativeAreaBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DefinesAdministrativeAreaBoundary(DefinesAdministrativeAreaBoundary&& from) noexcept
    : DefinesAdministrativeAreaBoundary() {
    *this = ::std::move(from);
  }

  inline DefinesAdministrativeAreaBoundary& operator=(DefinesAdministrativeAreaBoundary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DefinesAdministrativeAreaBoundary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefinesAdministrativeAreaBoundary* internal_default_instance() {
    return reinterpret_cast<const DefinesAdministrativeAreaBoundary*>(
               &_DefinesAdministrativeAreaBoundary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(DefinesAdministrativeAreaBoundary* other);
  friend void swap(DefinesAdministrativeAreaBoundary& a, DefinesAdministrativeAreaBoundary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DefinesAdministrativeAreaBoundary* New() const final {
    return CreateMaybeMessage<DefinesAdministrativeAreaBoundary>(nullptr);
  }

  DefinesAdministrativeAreaBoundary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DefinesAdministrativeAreaBoundary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DefinesAdministrativeAreaBoundary& from);
  void MergeFrom(const DefinesAdministrativeAreaBoundary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefinesAdministrativeAreaBoundary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.external.v1.common.PartitionedAdministrativeAreaReference left_administrative_area_ref = 1;
  bool has_left_administrative_area_ref() const;
  void clear_left_administrative_area_ref();
  static const int kLeftAdministrativeAreaRefFieldNumber = 1;
  const ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference& left_administrative_area_ref() const;
  ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* release_left_administrative_area_ref();
  ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* mutable_left_administrative_area_ref();
  void set_allocated_left_administrative_area_ref(::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* left_administrative_area_ref);

  // .com.here.pb.hdmap.external.v1.common.PartitionedAdministrativeAreaReference right_administrative_area_ref = 2;
  bool has_right_administrative_area_ref() const;
  void clear_right_administrative_area_ref();
  static const int kRightAdministrativeAreaRefFieldNumber = 2;
  const ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference& right_administrative_area_ref() const;
  ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* release_right_administrative_area_ref();
  ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* mutable_right_administrative_area_ref();
  void set_allocated_right_administrative_area_ref(::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* right_administrative_area_ref);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.DefinesAdministrativeAreaBoundary)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* left_administrative_area_ref_;
  ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* right_administrative_area_ref_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// -------------------------------------------------------------------

class WithinAdministrativeArea final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.routing.WithinAdministrativeArea) */ {
 public:
  WithinAdministrativeArea();
  virtual ~WithinAdministrativeArea();

  WithinAdministrativeArea(const WithinAdministrativeArea& from);

  inline WithinAdministrativeArea& operator=(const WithinAdministrativeArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WithinAdministrativeArea(WithinAdministrativeArea&& from) noexcept
    : WithinAdministrativeArea() {
    *this = ::std::move(from);
  }

  inline WithinAdministrativeArea& operator=(WithinAdministrativeArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WithinAdministrativeArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WithinAdministrativeArea* internal_default_instance() {
    return reinterpret_cast<const WithinAdministrativeArea*>(
               &_WithinAdministrativeArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(WithinAdministrativeArea* other);
  friend void swap(WithinAdministrativeArea& a, WithinAdministrativeArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WithinAdministrativeArea* New() const final {
    return CreateMaybeMessage<WithinAdministrativeArea>(nullptr);
  }

  WithinAdministrativeArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WithinAdministrativeArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WithinAdministrativeArea& from);
  void MergeFrom(const WithinAdministrativeArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithinAdministrativeArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.external.v1.common.PartitionedAdministrativeAreaReference administrative_area_ref = 1;
  bool has_administrative_area_ref() const;
  void clear_administrative_area_ref();
  static const int kAdministrativeAreaRefFieldNumber = 1;
  const ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference& administrative_area_ref() const;
  ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* release_administrative_area_ref();
  ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* mutable_administrative_area_ref();
  void set_allocated_administrative_area_ref(::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* administrative_area_ref);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.routing.WithinAdministrativeArea)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* administrative_area_ref_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoutingAttributesLayerTile

// uint32 here_tile_id = 1;
inline void RoutingAttributesLayerTile::clear_here_tile_id() {
  here_tile_id_ = 0u;
}
inline ::google::protobuf::uint32 RoutingAttributesLayerTile::here_tile_id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.here_tile_id)
  return here_tile_id_;
}
inline void RoutingAttributesLayerTile::set_here_tile_id(::google::protobuf::uint32 value) {
  
  here_tile_id_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.here_tile_id)
}

// repeated .com.here.pb.hdmap.external.v1.routing.LinkAttribution link_attribution = 2;
inline int RoutingAttributesLayerTile::link_attribution_size() const {
  return link_attribution_.size();
}
inline void RoutingAttributesLayerTile::clear_link_attribution() {
  link_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::routing::LinkAttribution* RoutingAttributesLayerTile::mutable_link_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.link_attribution)
  return link_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution >*
RoutingAttributesLayerTile::mutable_link_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.link_attribution)
  return &link_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::routing::LinkAttribution& RoutingAttributesLayerTile::link_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.link_attribution)
  return link_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::routing::LinkAttribution* RoutingAttributesLayerTile::add_link_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.link_attribution)
  return link_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution >&
RoutingAttributesLayerTile::link_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.link_attribution)
  return link_attribution_;
}

// repeated .com.here.pb.hdmap.external.v1.routing.NodeAttribution node_attribution = 3;
inline int RoutingAttributesLayerTile::node_attribution_size() const {
  return node_attribution_.size();
}
inline void RoutingAttributesLayerTile::clear_node_attribution() {
  node_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::routing::NodeAttribution* RoutingAttributesLayerTile::mutable_node_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.node_attribution)
  return node_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::NodeAttribution >*
RoutingAttributesLayerTile::mutable_node_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.node_attribution)
  return &node_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::routing::NodeAttribution& RoutingAttributesLayerTile::node_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.node_attribution)
  return node_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::routing::NodeAttribution* RoutingAttributesLayerTile::add_node_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.node_attribution)
  return node_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::NodeAttribution >&
RoutingAttributesLayerTile::node_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.node_attribution)
  return node_attribution_;
}

// repeated .com.here.pb.hdmap.external.v1.routing.StrandAttribution strand_attribution = 4;
inline int RoutingAttributesLayerTile::strand_attribution_size() const {
  return strand_attribution_.size();
}
inline void RoutingAttributesLayerTile::clear_strand_attribution() {
  strand_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::routing::StrandAttribution* RoutingAttributesLayerTile::mutable_strand_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.strand_attribution)
  return strand_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::StrandAttribution >*
RoutingAttributesLayerTile::mutable_strand_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.strand_attribution)
  return &strand_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::routing::StrandAttribution& RoutingAttributesLayerTile::strand_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.strand_attribution)
  return strand_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::routing::StrandAttribution* RoutingAttributesLayerTile::add_strand_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.strand_attribution)
  return strand_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::StrandAttribution >&
RoutingAttributesLayerTile::strand_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.strand_attribution)
  return strand_attribution_;
}

// repeated .com.here.pb.hdmap.external.v1.routing.RoutingAttributionGroup attribution_group_list = 5;
inline int RoutingAttributesLayerTile::attribution_group_list_size() const {
  return attribution_group_list_.size();
}
inline void RoutingAttributesLayerTile::clear_attribution_group_list() {
  attribution_group_list_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::routing::RoutingAttributionGroup* RoutingAttributesLayerTile::mutable_attribution_group_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.attribution_group_list)
  return attribution_group_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingAttributionGroup >*
RoutingAttributesLayerTile::mutable_attribution_group_list() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.attribution_group_list)
  return &attribution_group_list_;
}
inline const ::com::here::pb::hdmap::external::v1::routing::RoutingAttributionGroup& RoutingAttributesLayerTile::attribution_group_list(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.attribution_group_list)
  return attribution_group_list_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::routing::RoutingAttributionGroup* RoutingAttributesLayerTile::add_attribution_group_list() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.attribution_group_list)
  return attribution_group_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingAttributionGroup >&
RoutingAttributesLayerTile::attribution_group_list() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.RoutingAttributesLayerTile.attribution_group_list)
  return attribution_group_list_;
}

// -------------------------------------------------------------------

// LinkAttribution_ParametricAttribution

// .com.here.pb.hdmap.external.v1.common.ParametricRange applies_to_range = 1;
inline bool LinkAttribution_ParametricAttribution::has_applies_to_range() const {
  return this != internal_default_instance() && applies_to_range_ != nullptr;
}
inline const ::com::here::pb::hdmap::external::v1::common::ParametricRange& LinkAttribution_ParametricAttribution::applies_to_range() const {
  const ::com::here::pb::hdmap::external::v1::common::ParametricRange* p = applies_to_range_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.applies_to_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::common::ParametricRange*>(
      &::com::here::pb::hdmap::external::v1::common::_ParametricRange_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::common::ParametricRange* LinkAttribution_ParametricAttribution::release_applies_to_range() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.applies_to_range)
  
  ::com::here::pb::hdmap::external::v1::common::ParametricRange* temp = applies_to_range_;
  applies_to_range_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::external::v1::common::ParametricRange* LinkAttribution_ParametricAttribution::mutable_applies_to_range() {
  
  if (applies_to_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::external::v1::common::ParametricRange>(GetArenaNoVirtual());
    applies_to_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.applies_to_range)
  return applies_to_range_;
}
inline void LinkAttribution_ParametricAttribution::set_allocated_applies_to_range(::com::here::pb::hdmap::external::v1::common::ParametricRange* applies_to_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(applies_to_range_);
  }
  if (applies_to_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      applies_to_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, applies_to_range, submessage_arena);
    }
    
  } else {
    
  }
  applies_to_range_ = applies_to_range;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.applies_to_range)
}

// .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
inline void LinkAttribution_ParametricAttribution::clear_applies_to_direction() {
  applies_to_direction_ = 0;
}
inline ::com::here::pb::hdmap::external::v1::common::RelativeDirection LinkAttribution_ParametricAttribution::applies_to_direction() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.applies_to_direction)
  return static_cast< ::com::here::pb::hdmap::external::v1::common::RelativeDirection >(applies_to_direction_);
}
inline void LinkAttribution_ParametricAttribution::set_applies_to_direction(::com::here::pb::hdmap::external::v1::common::RelativeDirection value) {
  
  applies_to_direction_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.applies_to_direction)
}

// repeated uint32 attribution_group_indexes = 3 [packed = true];
inline int LinkAttribution_ParametricAttribution::attribution_group_indexes_size() const {
  return attribution_group_indexes_.size();
}
inline void LinkAttribution_ParametricAttribution::clear_attribution_group_indexes() {
  attribution_group_indexes_.Clear();
}
inline ::google::protobuf::uint32 LinkAttribution_ParametricAttribution::attribution_group_indexes(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.attribution_group_indexes)
  return attribution_group_indexes_.Get(index);
}
inline void LinkAttribution_ParametricAttribution::set_attribution_group_indexes(int index, ::google::protobuf::uint32 value) {
  attribution_group_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.attribution_group_indexes)
}
inline void LinkAttribution_ParametricAttribution::add_attribution_group_indexes(::google::protobuf::uint32 value) {
  attribution_group_indexes_.Add(value);
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.attribution_group_indexes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LinkAttribution_ParametricAttribution::attribution_group_indexes() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.attribution_group_indexes)
  return attribution_group_indexes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LinkAttribution_ParametricAttribution::mutable_attribution_group_indexes() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.attribution_group_indexes)
  return &attribution_group_indexes_;
}

// repeated .com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution link_parametric_attribution = 4;
inline int LinkAttribution_ParametricAttribution::link_parametric_attribution_size() const {
  return link_parametric_attribution_.size();
}
inline void LinkAttribution_ParametricAttribution::clear_link_parametric_attribution() {
  link_parametric_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::routing::RoutingLinkParametricAttribution* LinkAttribution_ParametricAttribution::mutable_link_parametric_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.link_parametric_attribution)
  return link_parametric_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingLinkParametricAttribution >*
LinkAttribution_ParametricAttribution::mutable_link_parametric_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.link_parametric_attribution)
  return &link_parametric_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::routing::RoutingLinkParametricAttribution& LinkAttribution_ParametricAttribution::link_parametric_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.link_parametric_attribution)
  return link_parametric_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::routing::RoutingLinkParametricAttribution* LinkAttribution_ParametricAttribution::add_link_parametric_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.link_parametric_attribution)
  return link_parametric_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingLinkParametricAttribution >&
LinkAttribution_ParametricAttribution::link_parametric_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution.link_parametric_attribution)
  return link_parametric_attribution_;
}

// -------------------------------------------------------------------

// LinkAttribution_PointAttribution

// double applies_to_location = 1;
inline void LinkAttribution_PointAttribution::clear_applies_to_location() {
  applies_to_location_ = 0;
}
inline double LinkAttribution_PointAttribution::applies_to_location() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution.applies_to_location)
  return applies_to_location_;
}
inline void LinkAttribution_PointAttribution::set_applies_to_location(double value) {
  
  applies_to_location_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution.applies_to_location)
}

// .com.here.pb.hdmap.external.v1.common.RelativeDirection applies_to_direction = 2;
inline void LinkAttribution_PointAttribution::clear_applies_to_direction() {
  applies_to_direction_ = 0;
}
inline ::com::here::pb::hdmap::external::v1::common::RelativeDirection LinkAttribution_PointAttribution::applies_to_direction() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution.applies_to_direction)
  return static_cast< ::com::here::pb::hdmap::external::v1::common::RelativeDirection >(applies_to_direction_);
}
inline void LinkAttribution_PointAttribution::set_applies_to_direction(::com::here::pb::hdmap::external::v1::common::RelativeDirection value) {
  
  applies_to_direction_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution.applies_to_direction)
}

// repeated uint32 attribution_group_indexes = 3 [packed = true];
inline int LinkAttribution_PointAttribution::attribution_group_indexes_size() const {
  return attribution_group_indexes_.size();
}
inline void LinkAttribution_PointAttribution::clear_attribution_group_indexes() {
  attribution_group_indexes_.Clear();
}
inline ::google::protobuf::uint32 LinkAttribution_PointAttribution::attribution_group_indexes(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution.attribution_group_indexes)
  return attribution_group_indexes_.Get(index);
}
inline void LinkAttribution_PointAttribution::set_attribution_group_indexes(int index, ::google::protobuf::uint32 value) {
  attribution_group_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution.attribution_group_indexes)
}
inline void LinkAttribution_PointAttribution::add_attribution_group_indexes(::google::protobuf::uint32 value) {
  attribution_group_indexes_.Add(value);
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution.attribution_group_indexes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LinkAttribution_PointAttribution::attribution_group_indexes() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution.attribution_group_indexes)
  return attribution_group_indexes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LinkAttribution_PointAttribution::mutable_attribution_group_indexes() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution.attribution_group_indexes)
  return &attribution_group_indexes_;
}

// repeated .com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution link_point_attribution = 4;
inline int LinkAttribution_PointAttribution::link_point_attribution_size() const {
  return link_point_attribution_.size();
}
inline void LinkAttribution_PointAttribution::clear_link_point_attribution() {
  link_point_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::routing::RoutingLinkPointAttribution* LinkAttribution_PointAttribution::mutable_link_point_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution.link_point_attribution)
  return link_point_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingLinkPointAttribution >*
LinkAttribution_PointAttribution::mutable_link_point_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution.link_point_attribution)
  return &link_point_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::routing::RoutingLinkPointAttribution& LinkAttribution_PointAttribution::link_point_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution.link_point_attribution)
  return link_point_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::routing::RoutingLinkPointAttribution* LinkAttribution_PointAttribution::add_link_point_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution.link_point_attribution)
  return link_point_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingLinkPointAttribution >&
LinkAttribution_PointAttribution::link_point_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution.link_point_attribution)
  return link_point_attribution_;
}

// -------------------------------------------------------------------

// LinkAttribution

// uint32 link_local_ref = 1;
inline void LinkAttribution::clear_link_local_ref() {
  link_local_ref_ = 0u;
}
inline ::google::protobuf::uint32 LinkAttribution::link_local_ref() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.LinkAttribution.link_local_ref)
  return link_local_ref_;
}
inline void LinkAttribution::set_link_local_ref(::google::protobuf::uint32 value) {
  
  link_local_ref_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.LinkAttribution.link_local_ref)
}

// repeated .com.here.pb.hdmap.external.v1.routing.LinkAttribution.ParametricAttribution parametric_attribution = 2;
inline int LinkAttribution::parametric_attribution_size() const {
  return parametric_attribution_.size();
}
inline void LinkAttribution::clear_parametric_attribution() {
  parametric_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_ParametricAttribution* LinkAttribution::mutable_parametric_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.LinkAttribution.parametric_attribution)
  return parametric_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_ParametricAttribution >*
LinkAttribution::mutable_parametric_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.LinkAttribution.parametric_attribution)
  return &parametric_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_ParametricAttribution& LinkAttribution::parametric_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.LinkAttribution.parametric_attribution)
  return parametric_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_ParametricAttribution* LinkAttribution::add_parametric_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.LinkAttribution.parametric_attribution)
  return parametric_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_ParametricAttribution >&
LinkAttribution::parametric_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.LinkAttribution.parametric_attribution)
  return parametric_attribution_;
}

// repeated .com.here.pb.hdmap.external.v1.routing.LinkAttribution.PointAttribution point_attribution = 3;
inline int LinkAttribution::point_attribution_size() const {
  return point_attribution_.size();
}
inline void LinkAttribution::clear_point_attribution() {
  point_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_PointAttribution* LinkAttribution::mutable_point_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.LinkAttribution.point_attribution)
  return point_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_PointAttribution >*
LinkAttribution::mutable_point_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.LinkAttribution.point_attribution)
  return &point_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_PointAttribution& LinkAttribution::point_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.LinkAttribution.point_attribution)
  return point_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_PointAttribution* LinkAttribution::add_point_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.LinkAttribution.point_attribution)
  return point_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::LinkAttribution_PointAttribution >&
LinkAttribution::point_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.LinkAttribution.point_attribution)
  return point_attribution_;
}

// repeated .com.here.pb.hdmap.external.v1.common.TiledStrandAttributionReference strand_attribution_refs = 4;
inline int LinkAttribution::strand_attribution_refs_size() const {
  return strand_attribution_refs_.size();
}
inline ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference* LinkAttribution::mutable_strand_attribution_refs(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.LinkAttribution.strand_attribution_refs)
  return strand_attribution_refs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference >*
LinkAttribution::mutable_strand_attribution_refs() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.LinkAttribution.strand_attribution_refs)
  return &strand_attribution_refs_;
}
inline const ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference& LinkAttribution::strand_attribution_refs(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.LinkAttribution.strand_attribution_refs)
  return strand_attribution_refs_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference* LinkAttribution::add_strand_attribution_refs() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.LinkAttribution.strand_attribution_refs)
  return strand_attribution_refs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledStrandAttributionReference >&
LinkAttribution::strand_attribution_refs() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.LinkAttribution.strand_attribution_refs)
  return strand_attribution_refs_;
}

// -------------------------------------------------------------------

// NodeAttribution_IntersectionTraversalAttribution

// repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference from_link_refs = 1;
inline int NodeAttribution_IntersectionTraversalAttribution::from_link_refs_size() const {
  return from_link_refs_.size();
}
inline ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* NodeAttribution_IntersectionTraversalAttribution::mutable_from_link_refs(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.from_link_refs)
  return from_link_refs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >*
NodeAttribution_IntersectionTraversalAttribution::mutable_from_link_refs() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.from_link_refs)
  return &from_link_refs_;
}
inline const ::com::here::pb::hdmap::external::v1::common::TiledLinkReference& NodeAttribution_IntersectionTraversalAttribution::from_link_refs(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.from_link_refs)
  return from_link_refs_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* NodeAttribution_IntersectionTraversalAttribution::add_from_link_refs() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.from_link_refs)
  return from_link_refs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >&
NodeAttribution_IntersectionTraversalAttribution::from_link_refs() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.from_link_refs)
  return from_link_refs_;
}

// repeated .com.here.pb.hdmap.external.v1.common.TiledLinkReference to_link_refs = 2;
inline int NodeAttribution_IntersectionTraversalAttribution::to_link_refs_size() const {
  return to_link_refs_.size();
}
inline ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* NodeAttribution_IntersectionTraversalAttribution::mutable_to_link_refs(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.to_link_refs)
  return to_link_refs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >*
NodeAttribution_IntersectionTraversalAttribution::mutable_to_link_refs() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.to_link_refs)
  return &to_link_refs_;
}
inline const ::com::here::pb::hdmap::external::v1::common::TiledLinkReference& NodeAttribution_IntersectionTraversalAttribution::to_link_refs(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.to_link_refs)
  return to_link_refs_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* NodeAttribution_IntersectionTraversalAttribution::add_to_link_refs() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.to_link_refs)
  return to_link_refs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::common::TiledLinkReference >&
NodeAttribution_IntersectionTraversalAttribution::to_link_refs() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.to_link_refs)
  return to_link_refs_;
}

// repeated uint32 attribution_group_indexes = 3 [packed = true];
inline int NodeAttribution_IntersectionTraversalAttribution::attribution_group_indexes_size() const {
  return attribution_group_indexes_.size();
}
inline void NodeAttribution_IntersectionTraversalAttribution::clear_attribution_group_indexes() {
  attribution_group_indexes_.Clear();
}
inline ::google::protobuf::uint32 NodeAttribution_IntersectionTraversalAttribution::attribution_group_indexes(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.attribution_group_indexes)
  return attribution_group_indexes_.Get(index);
}
inline void NodeAttribution_IntersectionTraversalAttribution::set_attribution_group_indexes(int index, ::google::protobuf::uint32 value) {
  attribution_group_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.attribution_group_indexes)
}
inline void NodeAttribution_IntersectionTraversalAttribution::add_attribution_group_indexes(::google::protobuf::uint32 value) {
  attribution_group_indexes_.Add(value);
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.attribution_group_indexes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NodeAttribution_IntersectionTraversalAttribution::attribution_group_indexes() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.attribution_group_indexes)
  return attribution_group_indexes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NodeAttribution_IntersectionTraversalAttribution::mutable_attribution_group_indexes() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.attribution_group_indexes)
  return &attribution_group_indexes_;
}

// repeated .com.here.pb.hdmap.external.v1.routing.RoutingNodeAttribution node_attribution = 4;
inline int NodeAttribution_IntersectionTraversalAttribution::node_attribution_size() const {
  return node_attribution_.size();
}
inline void NodeAttribution_IntersectionTraversalAttribution::clear_node_attribution() {
  node_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::routing::RoutingNodeAttribution* NodeAttribution_IntersectionTraversalAttribution::mutable_node_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.node_attribution)
  return node_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingNodeAttribution >*
NodeAttribution_IntersectionTraversalAttribution::mutable_node_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.node_attribution)
  return &node_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::routing::RoutingNodeAttribution& NodeAttribution_IntersectionTraversalAttribution::node_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.node_attribution)
  return node_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::routing::RoutingNodeAttribution* NodeAttribution_IntersectionTraversalAttribution::add_node_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.node_attribution)
  return node_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingNodeAttribution >&
NodeAttribution_IntersectionTraversalAttribution::node_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution.node_attribution)
  return node_attribution_;
}

// -------------------------------------------------------------------

// NodeAttribution

// uint32 node_id = 1;
inline void NodeAttribution::clear_node_id() {
  node_id_ = 0u;
}
inline ::google::protobuf::uint32 NodeAttribution::node_id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.NodeAttribution.node_id)
  return node_id_;
}
inline void NodeAttribution::set_node_id(::google::protobuf::uint32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.NodeAttribution.node_id)
}

// repeated .com.here.pb.hdmap.external.v1.routing.NodeAttribution.IntersectionTraversalAttribution intersection_traversal_attribution = 2;
inline int NodeAttribution::intersection_traversal_attribution_size() const {
  return intersection_traversal_attribution_.size();
}
inline void NodeAttribution::clear_intersection_traversal_attribution() {
  intersection_traversal_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::routing::NodeAttribution_IntersectionTraversalAttribution* NodeAttribution::mutable_intersection_traversal_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.NodeAttribution.intersection_traversal_attribution)
  return intersection_traversal_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::NodeAttribution_IntersectionTraversalAttribution >*
NodeAttribution::mutable_intersection_traversal_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.NodeAttribution.intersection_traversal_attribution)
  return &intersection_traversal_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::routing::NodeAttribution_IntersectionTraversalAttribution& NodeAttribution::intersection_traversal_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.NodeAttribution.intersection_traversal_attribution)
  return intersection_traversal_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::routing::NodeAttribution_IntersectionTraversalAttribution* NodeAttribution::add_intersection_traversal_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.NodeAttribution.intersection_traversal_attribution)
  return intersection_traversal_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::NodeAttribution_IntersectionTraversalAttribution >&
NodeAttribution::intersection_traversal_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.NodeAttribution.intersection_traversal_attribution)
  return intersection_traversal_attribution_;
}

// -------------------------------------------------------------------

// StrandAttribution_OrientedTiledLinkReference

// .com.here.pb.hdmap.external.v1.common.TiledLinkReference additional_link_refs = 1;
inline bool StrandAttribution_OrientedTiledLinkReference::has_additional_link_refs() const {
  return this != internal_default_instance() && additional_link_refs_ != nullptr;
}
inline const ::com::here::pb::hdmap::external::v1::common::TiledLinkReference& StrandAttribution_OrientedTiledLinkReference::additional_link_refs() const {
  const ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* p = additional_link_refs_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.StrandAttribution.OrientedTiledLinkReference.additional_link_refs)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::common::TiledLinkReference*>(
      &::com::here::pb::hdmap::external::v1::common::_TiledLinkReference_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* StrandAttribution_OrientedTiledLinkReference::release_additional_link_refs() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.StrandAttribution.OrientedTiledLinkReference.additional_link_refs)
  
  ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* temp = additional_link_refs_;
  additional_link_refs_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::external::v1::common::TiledLinkReference* StrandAttribution_OrientedTiledLinkReference::mutable_additional_link_refs() {
  
  if (additional_link_refs_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::external::v1::common::TiledLinkReference>(GetArenaNoVirtual());
    additional_link_refs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.StrandAttribution.OrientedTiledLinkReference.additional_link_refs)
  return additional_link_refs_;
}
inline void StrandAttribution_OrientedTiledLinkReference::set_allocated_additional_link_refs(::com::here::pb::hdmap::external::v1::common::TiledLinkReference* additional_link_refs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(additional_link_refs_);
  }
  if (additional_link_refs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      additional_link_refs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, additional_link_refs, submessage_arena);
    }
    
  } else {
    
  }
  additional_link_refs_ = additional_link_refs;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.routing.StrandAttribution.OrientedTiledLinkReference.additional_link_refs)
}

// .com.here.pb.hdmap.external.v1.common.RelativeDirection link_orientation_in_strand = 2;
inline void StrandAttribution_OrientedTiledLinkReference::clear_link_orientation_in_strand() {
  link_orientation_in_strand_ = 0;
}
inline ::com::here::pb::hdmap::external::v1::common::RelativeDirection StrandAttribution_OrientedTiledLinkReference::link_orientation_in_strand() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.StrandAttribution.OrientedTiledLinkReference.link_orientation_in_strand)
  return static_cast< ::com::here::pb::hdmap::external::v1::common::RelativeDirection >(link_orientation_in_strand_);
}
inline void StrandAttribution_OrientedTiledLinkReference::set_link_orientation_in_strand(::com::here::pb::hdmap::external::v1::common::RelativeDirection value) {
  
  link_orientation_in_strand_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.StrandAttribution.OrientedTiledLinkReference.link_orientation_in_strand)
}

// -------------------------------------------------------------------

// StrandAttribution

// .com.here.pb.hdmap.external.v1.common.StrandAttributionLocalReference strand_attribution_id = 1;
inline bool StrandAttribution::has_strand_attribution_id() const {
  return this != internal_default_instance() && strand_attribution_id_ != nullptr;
}
inline const ::com::here::pb::hdmap::external::v1::common::StrandAttributionLocalReference& StrandAttribution::strand_attribution_id() const {
  const ::com::here::pb::hdmap::external::v1::common::StrandAttributionLocalReference* p = strand_attribution_id_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.StrandAttribution.strand_attribution_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::common::StrandAttributionLocalReference*>(
      &::com::here::pb::hdmap::external::v1::common::_StrandAttributionLocalReference_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::common::StrandAttributionLocalReference* StrandAttribution::release_strand_attribution_id() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.StrandAttribution.strand_attribution_id)
  
  ::com::here::pb::hdmap::external::v1::common::StrandAttributionLocalReference* temp = strand_attribution_id_;
  strand_attribution_id_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::external::v1::common::StrandAttributionLocalReference* StrandAttribution::mutable_strand_attribution_id() {
  
  if (strand_attribution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::external::v1::common::StrandAttributionLocalReference>(GetArenaNoVirtual());
    strand_attribution_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.StrandAttribution.strand_attribution_id)
  return strand_attribution_id_;
}
inline void StrandAttribution::set_allocated_strand_attribution_id(::com::here::pb::hdmap::external::v1::common::StrandAttributionLocalReference* strand_attribution_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(strand_attribution_id_);
  }
  if (strand_attribution_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      strand_attribution_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, strand_attribution_id, submessage_arena);
    }
    
  } else {
    
  }
  strand_attribution_id_ = strand_attribution_id;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.routing.StrandAttribution.strand_attribution_id)
}

// uint32 first_link_id = 2;
inline void StrandAttribution::clear_first_link_id() {
  first_link_id_ = 0u;
}
inline ::google::protobuf::uint32 StrandAttribution::first_link_id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.StrandAttribution.first_link_id)
  return first_link_id_;
}
inline void StrandAttribution::set_first_link_id(::google::protobuf::uint32 value) {
  
  first_link_id_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.StrandAttribution.first_link_id)
}

// .com.here.pb.hdmap.external.v1.common.ParametricLocation first_link_start = 3;
inline bool StrandAttribution::has_first_link_start() const {
  return this != internal_default_instance() && first_link_start_ != nullptr;
}
inline const ::com::here::pb::hdmap::external::v1::common::ParametricLocation& StrandAttribution::first_link_start() const {
  const ::com::here::pb::hdmap::external::v1::common::ParametricLocation* p = first_link_start_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.StrandAttribution.first_link_start)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::common::ParametricLocation*>(
      &::com::here::pb::hdmap::external::v1::common::_ParametricLocation_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::common::ParametricLocation* StrandAttribution::release_first_link_start() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.StrandAttribution.first_link_start)
  
  ::com::here::pb::hdmap::external::v1::common::ParametricLocation* temp = first_link_start_;
  first_link_start_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::external::v1::common::ParametricLocation* StrandAttribution::mutable_first_link_start() {
  
  if (first_link_start_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::external::v1::common::ParametricLocation>(GetArenaNoVirtual());
    first_link_start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.StrandAttribution.first_link_start)
  return first_link_start_;
}
inline void StrandAttribution::set_allocated_first_link_start(::com::here::pb::hdmap::external::v1::common::ParametricLocation* first_link_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(first_link_start_);
  }
  if (first_link_start) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      first_link_start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, first_link_start, submessage_arena);
    }
    
  } else {
    
  }
  first_link_start_ = first_link_start;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.routing.StrandAttribution.first_link_start)
}

// .com.here.pb.hdmap.external.v1.common.RelativeDirection first_link_orientation_in_strand = 4;
inline void StrandAttribution::clear_first_link_orientation_in_strand() {
  first_link_orientation_in_strand_ = 0;
}
inline ::com::here::pb::hdmap::external::v1::common::RelativeDirection StrandAttribution::first_link_orientation_in_strand() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.StrandAttribution.first_link_orientation_in_strand)
  return static_cast< ::com::here::pb::hdmap::external::v1::common::RelativeDirection >(first_link_orientation_in_strand_);
}
inline void StrandAttribution::set_first_link_orientation_in_strand(::com::here::pb::hdmap::external::v1::common::RelativeDirection value) {
  
  first_link_orientation_in_strand_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.StrandAttribution.first_link_orientation_in_strand)
}

// repeated .com.here.pb.hdmap.external.v1.routing.StrandAttribution.OrientedTiledLinkReference additional_link_refs = 5;
inline int StrandAttribution::additional_link_refs_size() const {
  return additional_link_refs_.size();
}
inline void StrandAttribution::clear_additional_link_refs() {
  additional_link_refs_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::routing::StrandAttribution_OrientedTiledLinkReference* StrandAttribution::mutable_additional_link_refs(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.StrandAttribution.additional_link_refs)
  return additional_link_refs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::StrandAttribution_OrientedTiledLinkReference >*
StrandAttribution::mutable_additional_link_refs() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.StrandAttribution.additional_link_refs)
  return &additional_link_refs_;
}
inline const ::com::here::pb::hdmap::external::v1::routing::StrandAttribution_OrientedTiledLinkReference& StrandAttribution::additional_link_refs(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.StrandAttribution.additional_link_refs)
  return additional_link_refs_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::routing::StrandAttribution_OrientedTiledLinkReference* StrandAttribution::add_additional_link_refs() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.StrandAttribution.additional_link_refs)
  return additional_link_refs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::StrandAttribution_OrientedTiledLinkReference >&
StrandAttribution::additional_link_refs() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.StrandAttribution.additional_link_refs)
  return additional_link_refs_;
}

// .com.here.pb.hdmap.external.v1.common.ParametricLocation last_link_end = 6;
inline bool StrandAttribution::has_last_link_end() const {
  return this != internal_default_instance() && last_link_end_ != nullptr;
}
inline const ::com::here::pb::hdmap::external::v1::common::ParametricLocation& StrandAttribution::last_link_end() const {
  const ::com::here::pb::hdmap::external::v1::common::ParametricLocation* p = last_link_end_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.StrandAttribution.last_link_end)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::common::ParametricLocation*>(
      &::com::here::pb::hdmap::external::v1::common::_ParametricLocation_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::common::ParametricLocation* StrandAttribution::release_last_link_end() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.StrandAttribution.last_link_end)
  
  ::com::here::pb::hdmap::external::v1::common::ParametricLocation* temp = last_link_end_;
  last_link_end_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::external::v1::common::ParametricLocation* StrandAttribution::mutable_last_link_end() {
  
  if (last_link_end_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::external::v1::common::ParametricLocation>(GetArenaNoVirtual());
    last_link_end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.StrandAttribution.last_link_end)
  return last_link_end_;
}
inline void StrandAttribution::set_allocated_last_link_end(::com::here::pb::hdmap::external::v1::common::ParametricLocation* last_link_end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_link_end_);
  }
  if (last_link_end) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_link_end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_link_end, submessage_arena);
    }
    
  } else {
    
  }
  last_link_end_ = last_link_end;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.routing.StrandAttribution.last_link_end)
}

// repeated uint32 attribution_group_indexes = 7 [packed = true];
inline int StrandAttribution::attribution_group_indexes_size() const {
  return attribution_group_indexes_.size();
}
inline void StrandAttribution::clear_attribution_group_indexes() {
  attribution_group_indexes_.Clear();
}
inline ::google::protobuf::uint32 StrandAttribution::attribution_group_indexes(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.StrandAttribution.attribution_group_indexes)
  return attribution_group_indexes_.Get(index);
}
inline void StrandAttribution::set_attribution_group_indexes(int index, ::google::protobuf::uint32 value) {
  attribution_group_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.StrandAttribution.attribution_group_indexes)
}
inline void StrandAttribution::add_attribution_group_indexes(::google::protobuf::uint32 value) {
  attribution_group_indexes_.Add(value);
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.StrandAttribution.attribution_group_indexes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StrandAttribution::attribution_group_indexes() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.StrandAttribution.attribution_group_indexes)
  return attribution_group_indexes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StrandAttribution::mutable_attribution_group_indexes() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.StrandAttribution.attribution_group_indexes)
  return &attribution_group_indexes_;
}

// repeated .com.here.pb.hdmap.external.v1.routing.RoutingStrandAttribution strand_attribution = 8;
inline int StrandAttribution::strand_attribution_size() const {
  return strand_attribution_.size();
}
inline void StrandAttribution::clear_strand_attribution() {
  strand_attribution_.Clear();
}
inline ::com::here::pb::hdmap::external::v1::routing::RoutingStrandAttribution* StrandAttribution::mutable_strand_attribution(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.StrandAttribution.strand_attribution)
  return strand_attribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingStrandAttribution >*
StrandAttribution::mutable_strand_attribution() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.routing.StrandAttribution.strand_attribution)
  return &strand_attribution_;
}
inline const ::com::here::pb::hdmap::external::v1::routing::RoutingStrandAttribution& StrandAttribution::strand_attribution(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.StrandAttribution.strand_attribution)
  return strand_attribution_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::routing::RoutingStrandAttribution* StrandAttribution::add_strand_attribution() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.routing.StrandAttribution.strand_attribution)
  return strand_attribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::routing::RoutingStrandAttribution >&
StrandAttribution::strand_attribution() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.routing.StrandAttribution.strand_attribution)
  return strand_attribution_;
}

// -------------------------------------------------------------------

// RoutingAttributionGroup

// -------------------------------------------------------------------

// RoutingLinkParametricAttribution

// .com.here.pb.hdmap.shared.v1.core.RoadUsers accessible_by = 2;
inline bool RoutingLinkParametricAttribution::has_accessible_by() const {
  return attribute_case() == kAccessibleBy;
}
inline void RoutingLinkParametricAttribution::set_has_accessible_by() {
  _oneof_case_[0] = kAccessibleBy;
}
inline ::com::here::pb::hdmap::shared::v1::core::RoadUsers* RoutingLinkParametricAttribution::release_accessible_by() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.accessible_by)
  if (has_accessible_by()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::RoadUsers* temp = attribute_.accessible_by_;
    attribute_.accessible_by_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::RoadUsers& RoutingLinkParametricAttribution::accessible_by() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.accessible_by)
  return has_accessible_by()
      ? *attribute_.accessible_by_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::RoadUsers*>(&::com::here::pb::hdmap::shared::v1::core::_RoadUsers_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::RoadUsers* RoutingLinkParametricAttribution::mutable_accessible_by() {
  if (!has_accessible_by()) {
    clear_attribute();
    set_has_accessible_by();
    attribute_.accessible_by_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::RoadUsers >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.accessible_by)
  return attribute_.accessible_by_;
}

// .com.here.pb.hdmap.shared.v1.core.FunctionalClass functional_class = 3;
inline bool RoutingLinkParametricAttribution::has_functional_class() const {
  return attribute_case() == kFunctionalClass;
}
inline void RoutingLinkParametricAttribution::set_has_functional_class() {
  _oneof_case_[0] = kFunctionalClass;
}
inline void RoutingLinkParametricAttribution::clear_functional_class() {
  if (has_functional_class()) {
    attribute_.functional_class_ = 0;
    clear_has_attribute();
  }
}
inline ::com::here::pb::hdmap::shared::v1::core::FunctionalClass RoutingLinkParametricAttribution::functional_class() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.functional_class)
  if (has_functional_class()) {
    return static_cast< ::com::here::pb::hdmap::shared::v1::core::FunctionalClass >(attribute_.functional_class_);
  }
  return static_cast< ::com::here::pb::hdmap::shared::v1::core::FunctionalClass >(0);
}
inline void RoutingLinkParametricAttribution::set_functional_class(::com::here::pb::hdmap::shared::v1::core::FunctionalClass value) {
  if (!has_functional_class()) {
    clear_attribute();
    set_has_functional_class();
  }
  attribute_.functional_class_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.functional_class)
}

// bool is_multiply_digitized = 4;
inline bool RoutingLinkParametricAttribution::has_is_multiply_digitized() const {
  return attribute_case() == kIsMultiplyDigitized;
}
inline void RoutingLinkParametricAttribution::set_has_is_multiply_digitized() {
  _oneof_case_[0] = kIsMultiplyDigitized;
}
inline void RoutingLinkParametricAttribution::clear_is_multiply_digitized() {
  if (has_is_multiply_digitized()) {
    attribute_.is_multiply_digitized_ = false;
    clear_has_attribute();
  }
}
inline bool RoutingLinkParametricAttribution::is_multiply_digitized() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_multiply_digitized)
  if (has_is_multiply_digitized()) {
    return attribute_.is_multiply_digitized_;
  }
  return false;
}
inline void RoutingLinkParametricAttribution::set_is_multiply_digitized(bool value) {
  if (!has_is_multiply_digitized()) {
    clear_attribute();
    set_has_is_multiply_digitized();
  }
  attribute_.is_multiply_digitized_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_multiply_digitized)
}

// bool is_bridge = 5;
inline bool RoutingLinkParametricAttribution::has_is_bridge() const {
  return attribute_case() == kIsBridge;
}
inline void RoutingLinkParametricAttribution::set_has_is_bridge() {
  _oneof_case_[0] = kIsBridge;
}
inline void RoutingLinkParametricAttribution::clear_is_bridge() {
  if (has_is_bridge()) {
    attribute_.is_bridge_ = false;
    clear_has_attribute();
  }
}
inline bool RoutingLinkParametricAttribution::is_bridge() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_bridge)
  if (has_is_bridge()) {
    return attribute_.is_bridge_;
  }
  return false;
}
inline void RoutingLinkParametricAttribution::set_is_bridge(bool value) {
  if (!has_is_bridge()) {
    clear_attribute();
    set_has_is_bridge();
  }
  attribute_.is_bridge_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_bridge)
}

// bool is_tunnel = 6;
inline bool RoutingLinkParametricAttribution::has_is_tunnel() const {
  return attribute_case() == kIsTunnel;
}
inline void RoutingLinkParametricAttribution::set_has_is_tunnel() {
  _oneof_case_[0] = kIsTunnel;
}
inline void RoutingLinkParametricAttribution::clear_is_tunnel() {
  if (has_is_tunnel()) {
    attribute_.is_tunnel_ = false;
    clear_has_attribute();
  }
}
inline bool RoutingLinkParametricAttribution::is_tunnel() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_tunnel)
  if (has_is_tunnel()) {
    return attribute_.is_tunnel_;
  }
  return false;
}
inline void RoutingLinkParametricAttribution::set_is_tunnel(bool value) {
  if (!has_is_tunnel()) {
    clear_attribute();
    set_has_is_tunnel();
  }
  attribute_.is_tunnel_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_tunnel)
}

// bool is_controlled_access = 7;
inline bool RoutingLinkParametricAttribution::has_is_controlled_access() const {
  return attribute_case() == kIsControlledAccess;
}
inline void RoutingLinkParametricAttribution::set_has_is_controlled_access() {
  _oneof_case_[0] = kIsControlledAccess;
}
inline void RoutingLinkParametricAttribution::clear_is_controlled_access() {
  if (has_is_controlled_access()) {
    attribute_.is_controlled_access_ = false;
    clear_has_attribute();
  }
}
inline bool RoutingLinkParametricAttribution::is_controlled_access() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_controlled_access)
  if (has_is_controlled_access()) {
    return attribute_.is_controlled_access_;
  }
  return false;
}
inline void RoutingLinkParametricAttribution::set_is_controlled_access(bool value) {
  if (!has_is_controlled_access()) {
    clear_attribute();
    set_has_is_controlled_access();
  }
  attribute_.is_controlled_access_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_controlled_access)
}

// bool is_limited_access = 8;
inline bool RoutingLinkParametricAttribution::has_is_limited_access() const {
  return attribute_case() == kIsLimitedAccess;
}
inline void RoutingLinkParametricAttribution::set_has_is_limited_access() {
  _oneof_case_[0] = kIsLimitedAccess;
}
inline void RoutingLinkParametricAttribution::clear_is_limited_access() {
  if (has_is_limited_access()) {
    attribute_.is_limited_access_ = false;
    clear_has_attribute();
  }
}
inline bool RoutingLinkParametricAttribution::is_limited_access() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_limited_access)
  if (has_is_limited_access()) {
    return attribute_.is_limited_access_;
  }
  return false;
}
inline void RoutingLinkParametricAttribution::set_is_limited_access(bool value) {
  if (!has_is_limited_access()) {
    clear_attribute();
    set_has_is_limited_access();
  }
  attribute_.is_limited_access_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_limited_access)
}

// bool is_urban = 9;
inline bool RoutingLinkParametricAttribution::has_is_urban() const {
  return attribute_case() == kIsUrban;
}
inline void RoutingLinkParametricAttribution::set_has_is_urban() {
  _oneof_case_[0] = kIsUrban;
}
inline void RoutingLinkParametricAttribution::clear_is_urban() {
  if (has_is_urban()) {
    attribute_.is_urban_ = false;
    clear_has_attribute();
  }
}
inline bool RoutingLinkParametricAttribution::is_urban() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_urban)
  if (has_is_urban()) {
    return attribute_.is_urban_;
  }
  return false;
}
inline void RoutingLinkParametricAttribution::set_is_urban(bool value) {
  if (!has_is_urban()) {
    clear_attribute();
    set_has_is_urban();
  }
  attribute_.is_urban_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_urban)
}

// bool is_priority_road = 10;
inline bool RoutingLinkParametricAttribution::has_is_priority_road() const {
  return attribute_case() == kIsPriorityRoad;
}
inline void RoutingLinkParametricAttribution::set_has_is_priority_road() {
  _oneof_case_[0] = kIsPriorityRoad;
}
inline void RoutingLinkParametricAttribution::clear_is_priority_road() {
  if (has_is_priority_road()) {
    attribute_.is_priority_road_ = false;
    clear_has_attribute();
  }
}
inline bool RoutingLinkParametricAttribution::is_priority_road() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_priority_road)
  if (has_is_priority_road()) {
    return attribute_.is_priority_road_;
  }
  return false;
}
inline void RoutingLinkParametricAttribution::set_is_priority_road(bool value) {
  if (!has_is_priority_road()) {
    clear_attribute();
    set_has_is_priority_road();
  }
  attribute_.is_priority_road_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_priority_road)
}

// bool is_ramp = 11;
inline bool RoutingLinkParametricAttribution::has_is_ramp() const {
  return attribute_case() == kIsRamp;
}
inline void RoutingLinkParametricAttribution::set_has_is_ramp() {
  _oneof_case_[0] = kIsRamp;
}
inline void RoutingLinkParametricAttribution::clear_is_ramp() {
  if (has_is_ramp()) {
    attribute_.is_ramp_ = false;
    clear_has_attribute();
  }
}
inline bool RoutingLinkParametricAttribution::is_ramp() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_ramp)
  if (has_is_ramp()) {
    return attribute_.is_ramp_;
  }
  return false;
}
inline void RoutingLinkParametricAttribution::set_is_ramp(bool value) {
  if (!has_is_ramp()) {
    clear_attribute();
    set_has_is_ramp();
  }
  attribute_.is_ramp_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_ramp)
}

// .com.here.pb.hdmap.shared.v1.core.BuiltUpAreaRoad built_up_area_road = 12;
inline bool RoutingLinkParametricAttribution::has_built_up_area_road() const {
  return attribute_case() == kBuiltUpAreaRoad;
}
inline void RoutingLinkParametricAttribution::set_has_built_up_area_road() {
  _oneof_case_[0] = kBuiltUpAreaRoad;
}
inline ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad* RoutingLinkParametricAttribution::release_built_up_area_road() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.built_up_area_road)
  if (has_built_up_area_road()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad* temp = attribute_.built_up_area_road_;
    attribute_.built_up_area_road_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad& RoutingLinkParametricAttribution::built_up_area_road() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.built_up_area_road)
  return has_built_up_area_road()
      ? *attribute_.built_up_area_road_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad*>(&::com::here::pb::hdmap::shared::v1::core::_BuiltUpAreaRoad_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad* RoutingLinkParametricAttribution::mutable_built_up_area_road() {
  if (!has_built_up_area_road()) {
    clear_attribute();
    set_has_built_up_area_road();
    attribute_.built_up_area_road_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::BuiltUpAreaRoad >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.built_up_area_road)
  return attribute_.built_up_area_road_;
}

// .com.here.pb.hdmap.shared.v1.core.ComplexIntersection complex_intersection = 13;
inline bool RoutingLinkParametricAttribution::has_complex_intersection() const {
  return attribute_case() == kComplexIntersection;
}
inline void RoutingLinkParametricAttribution::set_has_complex_intersection() {
  _oneof_case_[0] = kComplexIntersection;
}
inline ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection* RoutingLinkParametricAttribution::release_complex_intersection() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.complex_intersection)
  if (has_complex_intersection()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection* temp = attribute_.complex_intersection_;
    attribute_.complex_intersection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection& RoutingLinkParametricAttribution::complex_intersection() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.complex_intersection)
  return has_complex_intersection()
      ? *attribute_.complex_intersection_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection*>(&::com::here::pb::hdmap::shared::v1::core::_ComplexIntersection_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection* RoutingLinkParametricAttribution::mutable_complex_intersection() {
  if (!has_complex_intersection()) {
    clear_attribute();
    set_has_complex_intersection();
    attribute_.complex_intersection_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ComplexIntersection >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.complex_intersection)
  return attribute_.complex_intersection_;
}

// .com.here.pb.hdmap.shared.v1.core.TrafficMessageChannelCode rds_tmc_code = 14;
inline bool RoutingLinkParametricAttribution::has_rds_tmc_code() const {
  return attribute_case() == kRdsTmcCode;
}
inline void RoutingLinkParametricAttribution::set_has_rds_tmc_code() {
  _oneof_case_[0] = kRdsTmcCode;
}
inline ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode* RoutingLinkParametricAttribution::release_rds_tmc_code() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.rds_tmc_code)
  if (has_rds_tmc_code()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode* temp = attribute_.rds_tmc_code_;
    attribute_.rds_tmc_code_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode& RoutingLinkParametricAttribution::rds_tmc_code() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.rds_tmc_code)
  return has_rds_tmc_code()
      ? *attribute_.rds_tmc_code_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode*>(&::com::here::pb::hdmap::shared::v1::core::_TrafficMessageChannelCode_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode* RoutingLinkParametricAttribution::mutable_rds_tmc_code() {
  if (!has_rds_tmc_code()) {
    clear_attribute();
    set_has_rds_tmc_code();
    attribute_.rds_tmc_code_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::TrafficMessageChannelCode >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.rds_tmc_code)
  return attribute_.rds_tmc_code_;
}

// .com.here.pb.hdmap.shared.v1.core.ConditionalUsageFeeRequired conditional_usage_fee_required = 15;
inline bool RoutingLinkParametricAttribution::has_conditional_usage_fee_required() const {
  return attribute_case() == kConditionalUsageFeeRequired;
}
inline void RoutingLinkParametricAttribution::set_has_conditional_usage_fee_required() {
  _oneof_case_[0] = kConditionalUsageFeeRequired;
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired* RoutingLinkParametricAttribution::release_conditional_usage_fee_required() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.conditional_usage_fee_required)
  if (has_conditional_usage_fee_required()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired* temp = attribute_.conditional_usage_fee_required_;
    attribute_.conditional_usage_fee_required_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired& RoutingLinkParametricAttribution::conditional_usage_fee_required() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.conditional_usage_fee_required)
  return has_conditional_usage_fee_required()
      ? *attribute_.conditional_usage_fee_required_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalUsageFeeRequired_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired* RoutingLinkParametricAttribution::mutable_conditional_usage_fee_required() {
  if (!has_conditional_usage_fee_required()) {
    clear_attribute();
    set_has_conditional_usage_fee_required();
    attribute_.conditional_usage_fee_required_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalUsageFeeRequired >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.conditional_usage_fee_required)
  return attribute_.conditional_usage_fee_required_;
}

// .com.here.pb.hdmap.shared.v1.core.ConditionalOvertakingRestriction conditional_overtaking_restriction = 16;
inline bool RoutingLinkParametricAttribution::has_conditional_overtaking_restriction() const {
  return attribute_case() == kConditionalOvertakingRestriction;
}
inline void RoutingLinkParametricAttribution::set_has_conditional_overtaking_restriction() {
  _oneof_case_[0] = kConditionalOvertakingRestriction;
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction* RoutingLinkParametricAttribution::release_conditional_overtaking_restriction() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.conditional_overtaking_restriction)
  if (has_conditional_overtaking_restriction()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction* temp = attribute_.conditional_overtaking_restriction_;
    attribute_.conditional_overtaking_restriction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction& RoutingLinkParametricAttribution::conditional_overtaking_restriction() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.conditional_overtaking_restriction)
  return has_conditional_overtaking_restriction()
      ? *attribute_.conditional_overtaking_restriction_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalOvertakingRestriction_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction* RoutingLinkParametricAttribution::mutable_conditional_overtaking_restriction() {
  if (!has_conditional_overtaking_restriction()) {
    clear_attribute();
    set_has_conditional_overtaking_restriction();
    attribute_.conditional_overtaking_restriction_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalOvertakingRestriction >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.conditional_overtaking_restriction)
  return attribute_.conditional_overtaking_restriction_;
}

// .com.here.pb.hdmap.shared.v1.core.ConditionalAccessRestriction conditional_access_restriction = 17;
inline bool RoutingLinkParametricAttribution::has_conditional_access_restriction() const {
  return attribute_case() == kConditionalAccessRestriction;
}
inline void RoutingLinkParametricAttribution::set_has_conditional_access_restriction() {
  _oneof_case_[0] = kConditionalAccessRestriction;
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction* RoutingLinkParametricAttribution::release_conditional_access_restriction() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.conditional_access_restriction)
  if (has_conditional_access_restriction()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction* temp = attribute_.conditional_access_restriction_;
    attribute_.conditional_access_restriction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction& RoutingLinkParametricAttribution::conditional_access_restriction() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.conditional_access_restriction)
  return has_conditional_access_restriction()
      ? *attribute_.conditional_access_restriction_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalAccessRestriction_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction* RoutingLinkParametricAttribution::mutable_conditional_access_restriction() {
  if (!has_conditional_access_restriction()) {
    clear_attribute();
    set_has_conditional_access_restriction();
    attribute_.conditional_access_restriction_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessRestriction >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.conditional_access_restriction)
  return attribute_.conditional_access_restriction_;
}

// .com.here.pb.hdmap.shared.v1.core.ConditionalAccessPermission conditional_access_permission = 18;
inline bool RoutingLinkParametricAttribution::has_conditional_access_permission() const {
  return attribute_case() == kConditionalAccessPermission;
}
inline void RoutingLinkParametricAttribution::set_has_conditional_access_permission() {
  _oneof_case_[0] = kConditionalAccessPermission;
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission* RoutingLinkParametricAttribution::release_conditional_access_permission() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.conditional_access_permission)
  if (has_conditional_access_permission()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission* temp = attribute_.conditional_access_permission_;
    attribute_.conditional_access_permission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission& RoutingLinkParametricAttribution::conditional_access_permission() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.conditional_access_permission)
  return has_conditional_access_permission()
      ? *attribute_.conditional_access_permission_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalAccessPermission_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission* RoutingLinkParametricAttribution::mutable_conditional_access_permission() {
  if (!has_conditional_access_permission()) {
    clear_attribute();
    set_has_conditional_access_permission();
    attribute_.conditional_access_permission_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalAccessPermission >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.conditional_access_permission)
  return attribute_.conditional_access_permission_;
}

// .com.here.pb.hdmap.shared.v1.core.RoadDivider road_divider = 19;
inline bool RoutingLinkParametricAttribution::has_road_divider() const {
  return attribute_case() == kRoadDivider;
}
inline void RoutingLinkParametricAttribution::set_has_road_divider() {
  _oneof_case_[0] = kRoadDivider;
}
inline ::com::here::pb::hdmap::shared::v1::core::RoadDivider* RoutingLinkParametricAttribution::release_road_divider() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.road_divider)
  if (has_road_divider()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::RoadDivider* temp = attribute_.road_divider_;
    attribute_.road_divider_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::RoadDivider& RoutingLinkParametricAttribution::road_divider() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.road_divider)
  return has_road_divider()
      ? *attribute_.road_divider_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::RoadDivider*>(&::com::here::pb::hdmap::shared::v1::core::_RoadDivider_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::RoadDivider* RoutingLinkParametricAttribution::mutable_road_divider() {
  if (!has_road_divider()) {
    clear_attribute();
    set_has_road_divider();
    attribute_.road_divider_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::RoadDivider >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.road_divider)
  return attribute_.road_divider_;
}

// .com.here.pb.hdmap.external.v1.routing.AdministrativeAreaRelationship administrative_area_relationship = 20;
inline bool RoutingLinkParametricAttribution::has_administrative_area_relationship() const {
  return attribute_case() == kAdministrativeAreaRelationship;
}
inline void RoutingLinkParametricAttribution::set_has_administrative_area_relationship() {
  _oneof_case_[0] = kAdministrativeAreaRelationship;
}
inline void RoutingLinkParametricAttribution::clear_administrative_area_relationship() {
  if (has_administrative_area_relationship()) {
    delete attribute_.administrative_area_relationship_;
    clear_has_attribute();
  }
}
inline ::com::here::pb::hdmap::external::v1::routing::AdministrativeAreaRelationship* RoutingLinkParametricAttribution::release_administrative_area_relationship() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.administrative_area_relationship)
  if (has_administrative_area_relationship()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::external::v1::routing::AdministrativeAreaRelationship* temp = attribute_.administrative_area_relationship_;
    attribute_.administrative_area_relationship_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::external::v1::routing::AdministrativeAreaRelationship& RoutingLinkParametricAttribution::administrative_area_relationship() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.administrative_area_relationship)
  return has_administrative_area_relationship()
      ? *attribute_.administrative_area_relationship_
      : *reinterpret_cast< ::com::here::pb::hdmap::external::v1::routing::AdministrativeAreaRelationship*>(&::com::here::pb::hdmap::external::v1::routing::_AdministrativeAreaRelationship_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::routing::AdministrativeAreaRelationship* RoutingLinkParametricAttribution::mutable_administrative_area_relationship() {
  if (!has_administrative_area_relationship()) {
    clear_attribute();
    set_has_administrative_area_relationship();
    attribute_.administrative_area_relationship_ = CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::routing::AdministrativeAreaRelationship >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.administrative_area_relationship)
  return attribute_.administrative_area_relationship_;
}

// .com.here.pb.hdmap.shared.v1.core.RoadIdentifiers road_identifiers = 21;
inline bool RoutingLinkParametricAttribution::has_road_identifiers() const {
  return attribute_case() == kRoadIdentifiers;
}
inline void RoutingLinkParametricAttribution::set_has_road_identifiers() {
  _oneof_case_[0] = kRoadIdentifiers;
}
inline ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers* RoutingLinkParametricAttribution::release_road_identifiers() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.road_identifiers)
  if (has_road_identifiers()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers* temp = attribute_.road_identifiers_;
    attribute_.road_identifiers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers& RoutingLinkParametricAttribution::road_identifiers() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.road_identifiers)
  return has_road_identifiers()
      ? *attribute_.road_identifiers_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers*>(&::com::here::pb::hdmap::shared::v1::core::_RoadIdentifiers_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers* RoutingLinkParametricAttribution::mutable_road_identifiers() {
  if (!has_road_identifiers()) {
    clear_attribute();
    set_has_road_identifiers();
    attribute_.road_identifiers_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::RoadIdentifiers >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.road_identifiers)
  return attribute_.road_identifiers_;
}

// bool is_within_interchange = 22;
inline bool RoutingLinkParametricAttribution::has_is_within_interchange() const {
  return attribute_case() == kIsWithinInterchange;
}
inline void RoutingLinkParametricAttribution::set_has_is_within_interchange() {
  _oneof_case_[0] = kIsWithinInterchange;
}
inline void RoutingLinkParametricAttribution::clear_is_within_interchange() {
  if (has_is_within_interchange()) {
    attribute_.is_within_interchange_ = false;
    clear_has_attribute();
  }
}
inline bool RoutingLinkParametricAttribution::is_within_interchange() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_within_interchange)
  if (has_is_within_interchange()) {
    return attribute_.is_within_interchange_;
  }
  return false;
}
inline void RoutingLinkParametricAttribution::set_is_within_interchange(bool value) {
  if (!has_is_within_interchange()) {
    clear_attribute();
    set_has_is_within_interchange();
  }
  attribute_.is_within_interchange_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.routing.RoutingLinkParametricAttribution.is_within_interchange)
}

inline bool RoutingLinkParametricAttribution::has_attribute() const {
  return attribute_case() != ATTRIBUTE_NOT_SET;
}
inline void RoutingLinkParametricAttribution::clear_has_attribute() {
  _oneof_case_[0] = ATTRIBUTE_NOT_SET;
}
inline RoutingLinkParametricAttribution::AttributeCase RoutingLinkParametricAttribution::attribute_case() const {
  return RoutingLinkParametricAttribution::AttributeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RoutingLinkPointAttribution

// .com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre conditional_restricted_driving_manoeuvre = 1;
inline bool RoutingLinkPointAttribution::has_conditional_restricted_driving_manoeuvre() const {
  return attribute_case() == kConditionalRestrictedDrivingManoeuvre;
}
inline void RoutingLinkPointAttribution::set_has_conditional_restricted_driving_manoeuvre() {
  _oneof_case_[0] = kConditionalRestrictedDrivingManoeuvre;
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* RoutingLinkPointAttribution::release_conditional_restricted_driving_manoeuvre() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution.conditional_restricted_driving_manoeuvre)
  if (has_conditional_restricted_driving_manoeuvre()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* temp = attribute_.conditional_restricted_driving_manoeuvre_;
    attribute_.conditional_restricted_driving_manoeuvre_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre& RoutingLinkPointAttribution::conditional_restricted_driving_manoeuvre() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution.conditional_restricted_driving_manoeuvre)
  return has_conditional_restricted_driving_manoeuvre()
      ? *attribute_.conditional_restricted_driving_manoeuvre_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalRestrictedDrivingManoeuvre_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* RoutingLinkPointAttribution::mutable_conditional_restricted_driving_manoeuvre() {
  if (!has_conditional_restricted_driving_manoeuvre()) {
    clear_attribute();
    set_has_conditional_restricted_driving_manoeuvre();
    attribute_.conditional_restricted_driving_manoeuvre_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution.conditional_restricted_driving_manoeuvre)
  return attribute_.conditional_restricted_driving_manoeuvre_;
}

// .com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre conditional_uturn_restricted_driving_manoeuvre = 2;
inline bool RoutingLinkPointAttribution::has_conditional_uturn_restricted_driving_manoeuvre() const {
  return attribute_case() == kConditionalUturnRestrictedDrivingManoeuvre;
}
inline void RoutingLinkPointAttribution::set_has_conditional_uturn_restricted_driving_manoeuvre() {
  _oneof_case_[0] = kConditionalUturnRestrictedDrivingManoeuvre;
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* RoutingLinkPointAttribution::release_conditional_uturn_restricted_driving_manoeuvre() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution.conditional_uturn_restricted_driving_manoeuvre)
  if (has_conditional_uturn_restricted_driving_manoeuvre()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* temp = attribute_.conditional_uturn_restricted_driving_manoeuvre_;
    attribute_.conditional_uturn_restricted_driving_manoeuvre_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre& RoutingLinkPointAttribution::conditional_uturn_restricted_driving_manoeuvre() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution.conditional_uturn_restricted_driving_manoeuvre)
  return has_conditional_uturn_restricted_driving_manoeuvre()
      ? *attribute_.conditional_uturn_restricted_driving_manoeuvre_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalRestrictedDrivingManoeuvre_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* RoutingLinkPointAttribution::mutable_conditional_uturn_restricted_driving_manoeuvre() {
  if (!has_conditional_uturn_restricted_driving_manoeuvre()) {
    clear_attribute();
    set_has_conditional_uturn_restricted_driving_manoeuvre();
    attribute_.conditional_uturn_restricted_driving_manoeuvre_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution.conditional_uturn_restricted_driving_manoeuvre)
  return attribute_.conditional_uturn_restricted_driving_manoeuvre_;
}

// .com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre conditional_uturn_permitted_driving_manoeuvre = 3;
inline bool RoutingLinkPointAttribution::has_conditional_uturn_permitted_driving_manoeuvre() const {
  return attribute_case() == kConditionalUturnPermittedDrivingManoeuvre;
}
inline void RoutingLinkPointAttribution::set_has_conditional_uturn_permitted_driving_manoeuvre() {
  _oneof_case_[0] = kConditionalUturnPermittedDrivingManoeuvre;
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* RoutingLinkPointAttribution::release_conditional_uturn_permitted_driving_manoeuvre() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution.conditional_uturn_permitted_driving_manoeuvre)
  if (has_conditional_uturn_permitted_driving_manoeuvre()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* temp = attribute_.conditional_uturn_permitted_driving_manoeuvre_;
    attribute_.conditional_uturn_permitted_driving_manoeuvre_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre& RoutingLinkPointAttribution::conditional_uturn_permitted_driving_manoeuvre() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution.conditional_uturn_permitted_driving_manoeuvre)
  return has_conditional_uturn_permitted_driving_manoeuvre()
      ? *attribute_.conditional_uturn_permitted_driving_manoeuvre_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalPermittedDrivingManoeuvre_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* RoutingLinkPointAttribution::mutable_conditional_uturn_permitted_driving_manoeuvre() {
  if (!has_conditional_uturn_permitted_driving_manoeuvre()) {
    clear_attribute();
    set_has_conditional_uturn_permitted_driving_manoeuvre();
    attribute_.conditional_uturn_permitted_driving_manoeuvre_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution.conditional_uturn_permitted_driving_manoeuvre)
  return attribute_.conditional_uturn_permitted_driving_manoeuvre_;
}

// .com.here.pb.hdmap.shared.v1.core.ConditionalTollStructure conditional_toll_structure = 4;
inline bool RoutingLinkPointAttribution::has_conditional_toll_structure() const {
  return attribute_case() == kConditionalTollStructure;
}
inline void RoutingLinkPointAttribution::set_has_conditional_toll_structure() {
  _oneof_case_[0] = kConditionalTollStructure;
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure* RoutingLinkPointAttribution::release_conditional_toll_structure() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution.conditional_toll_structure)
  if (has_conditional_toll_structure()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure* temp = attribute_.conditional_toll_structure_;
    attribute_.conditional_toll_structure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure& RoutingLinkPointAttribution::conditional_toll_structure() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution.conditional_toll_structure)
  return has_conditional_toll_structure()
      ? *attribute_.conditional_toll_structure_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalTollStructure_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure* RoutingLinkPointAttribution::mutable_conditional_toll_structure() {
  if (!has_conditional_toll_structure()) {
    clear_attribute();
    set_has_conditional_toll_structure();
    attribute_.conditional_toll_structure_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalTollStructure >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingLinkPointAttribution.conditional_toll_structure)
  return attribute_.conditional_toll_structure_;
}

inline bool RoutingLinkPointAttribution::has_attribute() const {
  return attribute_case() != ATTRIBUTE_NOT_SET;
}
inline void RoutingLinkPointAttribution::clear_has_attribute() {
  _oneof_case_[0] = ATTRIBUTE_NOT_SET;
}
inline RoutingLinkPointAttribution::AttributeCase RoutingLinkPointAttribution::attribute_case() const {
  return RoutingLinkPointAttribution::AttributeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RoutingNodeAttribution

// .com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre conditional_restricted_driving_manoeuvre = 1;
inline bool RoutingNodeAttribution::has_conditional_restricted_driving_manoeuvre() const {
  return attribute_case() == kConditionalRestrictedDrivingManoeuvre;
}
inline void RoutingNodeAttribution::set_has_conditional_restricted_driving_manoeuvre() {
  _oneof_case_[0] = kConditionalRestrictedDrivingManoeuvre;
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* RoutingNodeAttribution::release_conditional_restricted_driving_manoeuvre() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingNodeAttribution.conditional_restricted_driving_manoeuvre)
  if (has_conditional_restricted_driving_manoeuvre()) {
    clear_has_attribute();
      ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* temp = attribute_.conditional_restricted_driving_manoeuvre_;
    attribute_.conditional_restricted_driving_manoeuvre_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre& RoutingNodeAttribution::conditional_restricted_driving_manoeuvre() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingNodeAttribution.conditional_restricted_driving_manoeuvre)
  return has_conditional_restricted_driving_manoeuvre()
      ? *attribute_.conditional_restricted_driving_manoeuvre_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalRestrictedDrivingManoeuvre_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* RoutingNodeAttribution::mutable_conditional_restricted_driving_manoeuvre() {
  if (!has_conditional_restricted_driving_manoeuvre()) {
    clear_attribute();
    set_has_conditional_restricted_driving_manoeuvre();
    attribute_.conditional_restricted_driving_manoeuvre_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingNodeAttribution.conditional_restricted_driving_manoeuvre)
  return attribute_.conditional_restricted_driving_manoeuvre_;
}

inline bool RoutingNodeAttribution::has_attribute() const {
  return attribute_case() != ATTRIBUTE_NOT_SET;
}
inline void RoutingNodeAttribution::clear_has_attribute() {
  _oneof_case_[0] = ATTRIBUTE_NOT_SET;
}
inline RoutingNodeAttribution::AttributeCase RoutingNodeAttribution::attribute_case() const {
  return RoutingNodeAttribution::AttributeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RoutingStrandAttribution

// .com.here.pb.hdmap.shared.v1.core.ConditionalRestrictedDrivingManoeuvre conditional_restricted_driving_manoeuvre = 1;
inline bool RoutingStrandAttribution::has_conditional_restricted_driving_manoeuvre() const {
  return type_case() == kConditionalRestrictedDrivingManoeuvre;
}
inline void RoutingStrandAttribution::set_has_conditional_restricted_driving_manoeuvre() {
  _oneof_case_[0] = kConditionalRestrictedDrivingManoeuvre;
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* RoutingStrandAttribution::release_conditional_restricted_driving_manoeuvre() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingStrandAttribution.conditional_restricted_driving_manoeuvre)
  if (has_conditional_restricted_driving_manoeuvre()) {
    clear_has_type();
      ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* temp = type_.conditional_restricted_driving_manoeuvre_;
    type_.conditional_restricted_driving_manoeuvre_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre& RoutingStrandAttribution::conditional_restricted_driving_manoeuvre() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingStrandAttribution.conditional_restricted_driving_manoeuvre)
  return has_conditional_restricted_driving_manoeuvre()
      ? *type_.conditional_restricted_driving_manoeuvre_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalRestrictedDrivingManoeuvre_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre* RoutingStrandAttribution::mutable_conditional_restricted_driving_manoeuvre() {
  if (!has_conditional_restricted_driving_manoeuvre()) {
    clear_type();
    set_has_conditional_restricted_driving_manoeuvre();
    type_.conditional_restricted_driving_manoeuvre_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalRestrictedDrivingManoeuvre >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingStrandAttribution.conditional_restricted_driving_manoeuvre)
  return type_.conditional_restricted_driving_manoeuvre_;
}

// .com.here.pb.hdmap.shared.v1.core.ConditionalPermittedDrivingManoeuvre conditional_permitted_driving_manoeuvre = 2;
inline bool RoutingStrandAttribution::has_conditional_permitted_driving_manoeuvre() const {
  return type_case() == kConditionalPermittedDrivingManoeuvre;
}
inline void RoutingStrandAttribution::set_has_conditional_permitted_driving_manoeuvre() {
  _oneof_case_[0] = kConditionalPermittedDrivingManoeuvre;
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* RoutingStrandAttribution::release_conditional_permitted_driving_manoeuvre() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.RoutingStrandAttribution.conditional_permitted_driving_manoeuvre)
  if (has_conditional_permitted_driving_manoeuvre()) {
    clear_has_type();
      ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* temp = type_.conditional_permitted_driving_manoeuvre_;
    type_.conditional_permitted_driving_manoeuvre_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre& RoutingStrandAttribution::conditional_permitted_driving_manoeuvre() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.RoutingStrandAttribution.conditional_permitted_driving_manoeuvre)
  return has_conditional_permitted_driving_manoeuvre()
      ? *type_.conditional_permitted_driving_manoeuvre_
      : *reinterpret_cast< ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre*>(&::com::here::pb::hdmap::shared::v1::core::_ConditionalPermittedDrivingManoeuvre_default_instance_);
}
inline ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre* RoutingStrandAttribution::mutable_conditional_permitted_driving_manoeuvre() {
  if (!has_conditional_permitted_driving_manoeuvre()) {
    clear_type();
    set_has_conditional_permitted_driving_manoeuvre();
    type_.conditional_permitted_driving_manoeuvre_ = CreateMaybeMessage< ::com::here::pb::hdmap::shared::v1::core::ConditionalPermittedDrivingManoeuvre >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.RoutingStrandAttribution.conditional_permitted_driving_manoeuvre)
  return type_.conditional_permitted_driving_manoeuvre_;
}

inline bool RoutingStrandAttribution::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void RoutingStrandAttribution::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline RoutingStrandAttribution::TypeCase RoutingStrandAttribution::type_case() const {
  return RoutingStrandAttribution::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AdministrativeAreaRelationship

// .com.here.pb.hdmap.external.v1.routing.DefinesAdministrativeAreaBoundary administrative_area_boundary = 1;
inline bool AdministrativeAreaRelationship::has_administrative_area_boundary() const {
  return relation_case() == kAdministrativeAreaBoundary;
}
inline void AdministrativeAreaRelationship::set_has_administrative_area_boundary() {
  _oneof_case_[0] = kAdministrativeAreaBoundary;
}
inline void AdministrativeAreaRelationship::clear_administrative_area_boundary() {
  if (has_administrative_area_boundary()) {
    delete relation_.administrative_area_boundary_;
    clear_has_relation();
  }
}
inline ::com::here::pb::hdmap::external::v1::routing::DefinesAdministrativeAreaBoundary* AdministrativeAreaRelationship::release_administrative_area_boundary() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.AdministrativeAreaRelationship.administrative_area_boundary)
  if (has_administrative_area_boundary()) {
    clear_has_relation();
      ::com::here::pb::hdmap::external::v1::routing::DefinesAdministrativeAreaBoundary* temp = relation_.administrative_area_boundary_;
    relation_.administrative_area_boundary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::external::v1::routing::DefinesAdministrativeAreaBoundary& AdministrativeAreaRelationship::administrative_area_boundary() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.AdministrativeAreaRelationship.administrative_area_boundary)
  return has_administrative_area_boundary()
      ? *relation_.administrative_area_boundary_
      : *reinterpret_cast< ::com::here::pb::hdmap::external::v1::routing::DefinesAdministrativeAreaBoundary*>(&::com::here::pb::hdmap::external::v1::routing::_DefinesAdministrativeAreaBoundary_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::routing::DefinesAdministrativeAreaBoundary* AdministrativeAreaRelationship::mutable_administrative_area_boundary() {
  if (!has_administrative_area_boundary()) {
    clear_relation();
    set_has_administrative_area_boundary();
    relation_.administrative_area_boundary_ = CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::routing::DefinesAdministrativeAreaBoundary >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.AdministrativeAreaRelationship.administrative_area_boundary)
  return relation_.administrative_area_boundary_;
}

// .com.here.pb.hdmap.external.v1.routing.WithinAdministrativeArea within_administrative_area = 2;
inline bool AdministrativeAreaRelationship::has_within_administrative_area() const {
  return relation_case() == kWithinAdministrativeArea;
}
inline void AdministrativeAreaRelationship::set_has_within_administrative_area() {
  _oneof_case_[0] = kWithinAdministrativeArea;
}
inline void AdministrativeAreaRelationship::clear_within_administrative_area() {
  if (has_within_administrative_area()) {
    delete relation_.within_administrative_area_;
    clear_has_relation();
  }
}
inline ::com::here::pb::hdmap::external::v1::routing::WithinAdministrativeArea* AdministrativeAreaRelationship::release_within_administrative_area() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.AdministrativeAreaRelationship.within_administrative_area)
  if (has_within_administrative_area()) {
    clear_has_relation();
      ::com::here::pb::hdmap::external::v1::routing::WithinAdministrativeArea* temp = relation_.within_administrative_area_;
    relation_.within_administrative_area_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::here::pb::hdmap::external::v1::routing::WithinAdministrativeArea& AdministrativeAreaRelationship::within_administrative_area() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.AdministrativeAreaRelationship.within_administrative_area)
  return has_within_administrative_area()
      ? *relation_.within_administrative_area_
      : *reinterpret_cast< ::com::here::pb::hdmap::external::v1::routing::WithinAdministrativeArea*>(&::com::here::pb::hdmap::external::v1::routing::_WithinAdministrativeArea_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::routing::WithinAdministrativeArea* AdministrativeAreaRelationship::mutable_within_administrative_area() {
  if (!has_within_administrative_area()) {
    clear_relation();
    set_has_within_administrative_area();
    relation_.within_administrative_area_ = CreateMaybeMessage< ::com::here::pb::hdmap::external::v1::routing::WithinAdministrativeArea >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.AdministrativeAreaRelationship.within_administrative_area)
  return relation_.within_administrative_area_;
}

inline bool AdministrativeAreaRelationship::has_relation() const {
  return relation_case() != RELATION_NOT_SET;
}
inline void AdministrativeAreaRelationship::clear_has_relation() {
  _oneof_case_[0] = RELATION_NOT_SET;
}
inline AdministrativeAreaRelationship::RelationCase AdministrativeAreaRelationship::relation_case() const {
  return AdministrativeAreaRelationship::RelationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DefinesAdministrativeAreaBoundary

// .com.here.pb.hdmap.external.v1.common.PartitionedAdministrativeAreaReference left_administrative_area_ref = 1;
inline bool DefinesAdministrativeAreaBoundary::has_left_administrative_area_ref() const {
  return this != internal_default_instance() && left_administrative_area_ref_ != nullptr;
}
inline const ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference& DefinesAdministrativeAreaBoundary::left_administrative_area_ref() const {
  const ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* p = left_administrative_area_ref_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.DefinesAdministrativeAreaBoundary.left_administrative_area_ref)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference*>(
      &::com::here::pb::hdmap::external::v1::common::_PartitionedAdministrativeAreaReference_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* DefinesAdministrativeAreaBoundary::release_left_administrative_area_ref() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.DefinesAdministrativeAreaBoundary.left_administrative_area_ref)
  
  ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* temp = left_administrative_area_ref_;
  left_administrative_area_ref_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* DefinesAdministrativeAreaBoundary::mutable_left_administrative_area_ref() {
  
  if (left_administrative_area_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference>(GetArenaNoVirtual());
    left_administrative_area_ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.DefinesAdministrativeAreaBoundary.left_administrative_area_ref)
  return left_administrative_area_ref_;
}
inline void DefinesAdministrativeAreaBoundary::set_allocated_left_administrative_area_ref(::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* left_administrative_area_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(left_administrative_area_ref_);
  }
  if (left_administrative_area_ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      left_administrative_area_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_administrative_area_ref, submessage_arena);
    }
    
  } else {
    
  }
  left_administrative_area_ref_ = left_administrative_area_ref;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.routing.DefinesAdministrativeAreaBoundary.left_administrative_area_ref)
}

// .com.here.pb.hdmap.external.v1.common.PartitionedAdministrativeAreaReference right_administrative_area_ref = 2;
inline bool DefinesAdministrativeAreaBoundary::has_right_administrative_area_ref() const {
  return this != internal_default_instance() && right_administrative_area_ref_ != nullptr;
}
inline const ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference& DefinesAdministrativeAreaBoundary::right_administrative_area_ref() const {
  const ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* p = right_administrative_area_ref_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.DefinesAdministrativeAreaBoundary.right_administrative_area_ref)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference*>(
      &::com::here::pb::hdmap::external::v1::common::_PartitionedAdministrativeAreaReference_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* DefinesAdministrativeAreaBoundary::release_right_administrative_area_ref() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.DefinesAdministrativeAreaBoundary.right_administrative_area_ref)
  
  ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* temp = right_administrative_area_ref_;
  right_administrative_area_ref_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* DefinesAdministrativeAreaBoundary::mutable_right_administrative_area_ref() {
  
  if (right_administrative_area_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference>(GetArenaNoVirtual());
    right_administrative_area_ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.DefinesAdministrativeAreaBoundary.right_administrative_area_ref)
  return right_administrative_area_ref_;
}
inline void DefinesAdministrativeAreaBoundary::set_allocated_right_administrative_area_ref(::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* right_administrative_area_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(right_administrative_area_ref_);
  }
  if (right_administrative_area_ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      right_administrative_area_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_administrative_area_ref, submessage_arena);
    }
    
  } else {
    
  }
  right_administrative_area_ref_ = right_administrative_area_ref;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.routing.DefinesAdministrativeAreaBoundary.right_administrative_area_ref)
}

// -------------------------------------------------------------------

// WithinAdministrativeArea

// .com.here.pb.hdmap.external.v1.common.PartitionedAdministrativeAreaReference administrative_area_ref = 1;
inline bool WithinAdministrativeArea::has_administrative_area_ref() const {
  return this != internal_default_instance() && administrative_area_ref_ != nullptr;
}
inline const ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference& WithinAdministrativeArea::administrative_area_ref() const {
  const ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* p = administrative_area_ref_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.routing.WithinAdministrativeArea.administrative_area_ref)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference*>(
      &::com::here::pb::hdmap::external::v1::common::_PartitionedAdministrativeAreaReference_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* WithinAdministrativeArea::release_administrative_area_ref() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.routing.WithinAdministrativeArea.administrative_area_ref)
  
  ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* temp = administrative_area_ref_;
  administrative_area_ref_ = nullptr;
  return temp;
}
inline ::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* WithinAdministrativeArea::mutable_administrative_area_ref() {
  
  if (administrative_area_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference>(GetArenaNoVirtual());
    administrative_area_ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.routing.WithinAdministrativeArea.administrative_area_ref)
  return administrative_area_ref_;
}
inline void WithinAdministrativeArea::set_allocated_administrative_area_ref(::com::here::pb::hdmap::external::v1::common::PartitionedAdministrativeAreaReference* administrative_area_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(administrative_area_ref_);
  }
  if (administrative_area_ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      administrative_area_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, administrative_area_ref, submessage_arena);
    }
    
  } else {
    
  }
  administrative_area_ref_ = administrative_area_ref;
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.routing.WithinAdministrativeArea.administrative_area_ref)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2frouting_2flayer_2drouting_2dattributes_2eproto
