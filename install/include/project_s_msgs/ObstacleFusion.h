// Generated by gencpp from file project_s_msgs/ObstacleFusion.msg
// DO NOT EDIT!


#ifndef PROJECT_S_MSGS_MESSAGE_OBSTACLEFUSION_H
#define PROJECT_S_MSGS_MESSAGE_OBSTACLEFUSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/UInt8.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <std_msgs/Float32.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Accel.h>
#include <geometry_msgs/Vector3.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/UInt8.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Vector3.h>
#include <std_msgs/UInt8.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int16.h>
#include <std_msgs/UInt16.h>

namespace project_s_msgs
{
template <class ContainerAllocator>
struct ObstacleFusion_
{
  typedef ObstacleFusion_<ContainerAllocator> Type;

  ObstacleFusion_()
    : header()
    , id()
    , obstaclePosition()
    , obstacleBodyCenter()
    , distanceCurviligne(0.0)
    , groundHeight()
    , obstacleVelocity()
    , obstacleAcceleration()
    , obstacleCap()
    , existenceProbability()
    , existenceState()
    , scoreDetection()
    , nbrDetection()
    , nbrVisibility()
    , scorePersistence()
    , nbrUpdate()
    , nbrAge()
    , existenceFirstTime()
    , existenceDurationTime()
    , anchorPoint()
    , obstaclePoseVariance()
    , obstacleVelocityVariance()
    , obstacleDimensions()
    , obstacleClass(0)
    , vision_only_sign_type(0)
    , classificationProbability()
    , obstacleAssignment(0)
    , obstacleCorner()
    , NbrOccupiedLane(0)
    , indexAssignmentLine()
    , positionLane()
    , departureRighttDistance()
    , departureLeftDistance()
    , trafficLights()
    , vehicleLights()
    , idPiste()  {
      indexAssignmentLine.assign(0);
  }
  ObstacleFusion_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(_alloc)
    , obstaclePosition(_alloc)
    , obstacleBodyCenter(_alloc)
    , distanceCurviligne(0.0)
    , groundHeight(_alloc)
    , obstacleVelocity(_alloc)
    , obstacleAcceleration(_alloc)
    , obstacleCap(_alloc)
    , existenceProbability(_alloc)
    , existenceState(_alloc)
    , scoreDetection(_alloc)
    , nbrDetection(_alloc)
    , nbrVisibility(_alloc)
    , scorePersistence(_alloc)
    , nbrUpdate(_alloc)
    , nbrAge(_alloc)
    , existenceFirstTime()
    , existenceDurationTime(_alloc)
    , anchorPoint(_alloc)
    , obstaclePoseVariance(_alloc)
    , obstacleVelocityVariance(_alloc)
    , obstacleDimensions(_alloc)
    , obstacleClass(0)
    , vision_only_sign_type(0)
    , classificationProbability(_alloc)
    , obstacleAssignment(0)
    , obstacleCorner()
    , NbrOccupiedLane(0)
    , indexAssignmentLine()
    , positionLane(_alloc)
    , departureRighttDistance(_alloc)
    , departureLeftDistance(_alloc)
    , trafficLights(_alloc)
    , vehicleLights(_alloc)
    , idPiste()  {
  (void)_alloc;
      obstacleCorner.assign( ::geometry_msgs::Point_<ContainerAllocator> (_alloc));

      indexAssignmentLine.assign(0);

      idPiste.assign( ::std_msgs::UInt16_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _obstaclePosition_type;
  _obstaclePosition_type obstaclePosition;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _obstacleBodyCenter_type;
  _obstacleBodyCenter_type obstacleBodyCenter;

   typedef float _distanceCurviligne_type;
  _distanceCurviligne_type distanceCurviligne;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _groundHeight_type;
  _groundHeight_type groundHeight;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _obstacleVelocity_type;
  _obstacleVelocity_type obstacleVelocity;

   typedef  ::geometry_msgs::Accel_<ContainerAllocator>  _obstacleAcceleration_type;
  _obstacleAcceleration_type obstacleAcceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _obstacleCap_type;
  _obstacleCap_type obstacleCap;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _existenceProbability_type;
  _existenceProbability_type existenceProbability;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _existenceState_type;
  _existenceState_type existenceState;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _scoreDetection_type;
  _scoreDetection_type scoreDetection;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _nbrDetection_type;
  _nbrDetection_type nbrDetection;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _nbrVisibility_type;
  _nbrVisibility_type nbrVisibility;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _scorePersistence_type;
  _scorePersistence_type scorePersistence;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _nbrUpdate_type;
  _nbrUpdate_type nbrUpdate;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _nbrAge_type;
  _nbrAge_type nbrAge;

   typedef ros::Time _existenceFirstTime_type;
  _existenceFirstTime_type existenceFirstTime;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _existenceDurationTime_type;
  _existenceDurationTime_type existenceDurationTime;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _anchorPoint_type;
  _anchorPoint_type anchorPoint;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _obstaclePoseVariance_type;
  _obstaclePoseVariance_type obstaclePoseVariance;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _obstacleVelocityVariance_type;
  _obstacleVelocityVariance_type obstacleVelocityVariance;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _obstacleDimensions_type;
  _obstacleDimensions_type obstacleDimensions;

   typedef uint8_t _obstacleClass_type;
  _obstacleClass_type obstacleClass;

   typedef uint8_t _vision_only_sign_type_type;
  _vision_only_sign_type_type vision_only_sign_type;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _classificationProbability_type;
  _classificationProbability_type classificationProbability;

   typedef uint8_t _obstacleAssignment_type;
  _obstacleAssignment_type obstacleAssignment;

   typedef boost::array< ::geometry_msgs::Point_<ContainerAllocator> , 4>  _obstacleCorner_type;
  _obstacleCorner_type obstacleCorner;

   typedef uint8_t _NbrOccupiedLane_type;
  _NbrOccupiedLane_type NbrOccupiedLane;

   typedef boost::array<uint8_t, 2>  _indexAssignmentLine_type;
  _indexAssignmentLine_type indexAssignmentLine;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _positionLane_type;
  _positionLane_type positionLane;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _departureRighttDistance_type;
  _departureRighttDistance_type departureRighttDistance;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _departureLeftDistance_type;
  _departureLeftDistance_type departureLeftDistance;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _trafficLights_type;
  _trafficLights_type trafficLights;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _vehicleLights_type;
  _vehicleLights_type vehicleLights;

   typedef boost::array< ::std_msgs::UInt16_<ContainerAllocator> , 3>  _idPiste_type;
  _idPiste_type idPiste;



  enum {
    IDLE_TRACK = 0u,
    PRE_TRACK = 1u,
    POST_TRACK = 2u,
    CURRENT_TRACK = 3u,
    ASSIGNMENT_COTE_DROIT = 1u,
    ASSIGNMENT_COTE_GAUCHE = 2u,
    CORNER_FRONT_RIGHT = 0u,
    CORNER_FRONT_LEFT = 1u,
    CORNER_BACK_RIGHT = 2u,
    CORNER_BACK_LEFT = 3u,
    OCCUPIED_LANE_INDEFINI = 255u,
    INDEX_LINE_INDEFINI = 255u,
  };


  typedef boost::shared_ptr< ::project_s_msgs::ObstacleFusion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project_s_msgs::ObstacleFusion_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleFusion_

typedef ::project_s_msgs::ObstacleFusion_<std::allocator<void> > ObstacleFusion;

typedef boost::shared_ptr< ::project_s_msgs::ObstacleFusion > ObstacleFusionPtr;
typedef boost::shared_ptr< ::project_s_msgs::ObstacleFusion const> ObstacleFusionConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project_s_msgs::ObstacleFusion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project_s_msgs::ObstacleFusion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace project_s_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'project_s_msgs': ['/home/segula/Desktop/ava/achitecture_ws/src/project_s_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mobileye_560_660_msgs': ['/home/dev/as_drivers_customer/install/share/mobileye_560_660_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::project_s_msgs::ObstacleFusion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project_s_msgs::ObstacleFusion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_s_msgs::ObstacleFusion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_s_msgs::ObstacleFusion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_s_msgs::ObstacleFusion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_s_msgs::ObstacleFusion_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project_s_msgs::ObstacleFusion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "664d48d67f466ce15a45b6a2d40f7977";
  }

  static const char* value(const ::project_s_msgs::ObstacleFusion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x664d48d67f466ce1ULL;
  static const uint64_t static_value2 = 0x5a45b6a2d40f7977ULL;
};

template<class ContainerAllocator>
struct DataType< ::project_s_msgs::ObstacleFusion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project_s_msgs/ObstacleFusion";
  }

  static const char* value(const ::project_s_msgs::ObstacleFusion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project_s_msgs::ObstacleFusion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
std_msgs/UInt8 id\n\
\n\
geometry_msgs/Pose obstaclePosition		# obstacle position\n\
geometry_msgs/Pose obstacleBodyCenter	        # Obstacle Center for Corner Computation\n\
float32 distanceCurviligne\n\
std_msgs/Float32 groundHeight			# ground height\n\
geometry_msgs/Twist obstacleVelocity		# obstacle speed\n\
geometry_msgs/Accel obstacleAcceleration	# obstacle acceleration\n\
geometry_msgs/Vector3 obstacleCap\n\
std_msgs/UInt8 existenceProbability\n\
std_msgs/UInt8 existenceState\n\
uint8 IDLE_TRACK    = 0\n\
uint8 PRE_TRACK	    = 1\n\
uint8 POST_TRACK    = 2\n\
uint8 CURRENT_TRACK = 3\n\
std_msgs/Float32 scoreDetection\n\
std_msgs/Float32 nbrDetection\n\
std_msgs/Float32 nbrVisibility\n\
std_msgs/Float32 scorePersistence\n\
std_msgs/Float32 nbrUpdate\n\
std_msgs/Float32 nbrAge\n\
time existenceFirstTime\n\
std_msgs/Float32 existenceDurationTime\n\
std_msgs/UInt8 anchorPoint			# reference point\n\
geometry_msgs/Pose obstaclePoseVariance		# obstacle position variance\n\
geometry_msgs/Twist obstacleVelocityVariance	# obstacle speed variance\n\
geometry_msgs/Vector3 obstacleDimensions	# obstacle x,y,z - length, width, height\n\
uint8 obstacleClass\n\
uint8 vision_only_sign_type\n\
std_msgs/UInt8 classificationProbability\n\
\n\
uint8 obstacleAssignment\n\
uint8 ASSIGNMENT_COTE_DROIT  = 1\n\
uint8 ASSIGNMENT_COTE_GAUCHE = 2\n\
\n\
uint8 CORNER_FRONT_RIGHT= 0\n\
uint8 CORNER_FRONT_LEFT = 1\n\
uint8 CORNER_BACK_RIGHT = 2\n\
uint8 CORNER_BACK_LEFT  = 3\n\
geometry_msgs/Point[4] obstacleCorner\n\
\n\
uint8 OCCUPIED_LANE_INDEFINI  = 255\n\
uint8 NbrOccupiedLane\n\
uint8 INDEX_LINE_INDEFINI  = 255\n\
uint8[2] indexAssignmentLine\n\
std_msgs/Float32 positionLane\n\
std_msgs/Float32 departureRighttDistance\n\
std_msgs/Float32 departureLeftDistance\n\
\n\
std_msgs/Int16 trafficLights\n\
std_msgs/Int16 vehicleLights\n\
std_msgs/UInt16[3] idPiste			#define NBR_SENSOR		3	(voir obstacles_fusion.cpp)\n\
\n\
# History\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt8\n\
uint8 data\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Accel\n\
# This expresses acceleration in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: std_msgs/Int16\n\
int16 data\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt16\n\
uint16 data\n\
";
  }

  static const char* value(const ::project_s_msgs::ObstacleFusion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project_s_msgs::ObstacleFusion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.obstaclePosition);
      stream.next(m.obstacleBodyCenter);
      stream.next(m.distanceCurviligne);
      stream.next(m.groundHeight);
      stream.next(m.obstacleVelocity);
      stream.next(m.obstacleAcceleration);
      stream.next(m.obstacleCap);
      stream.next(m.existenceProbability);
      stream.next(m.existenceState);
      stream.next(m.scoreDetection);
      stream.next(m.nbrDetection);
      stream.next(m.nbrVisibility);
      stream.next(m.scorePersistence);
      stream.next(m.nbrUpdate);
      stream.next(m.nbrAge);
      stream.next(m.existenceFirstTime);
      stream.next(m.existenceDurationTime);
      stream.next(m.anchorPoint);
      stream.next(m.obstaclePoseVariance);
      stream.next(m.obstacleVelocityVariance);
      stream.next(m.obstacleDimensions);
      stream.next(m.obstacleClass);
      stream.next(m.vision_only_sign_type);
      stream.next(m.classificationProbability);
      stream.next(m.obstacleAssignment);
      stream.next(m.obstacleCorner);
      stream.next(m.NbrOccupiedLane);
      stream.next(m.indexAssignmentLine);
      stream.next(m.positionLane);
      stream.next(m.departureRighttDistance);
      stream.next(m.departureLeftDistance);
      stream.next(m.trafficLights);
      stream.next(m.vehicleLights);
      stream.next(m.idPiste);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleFusion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project_s_msgs::ObstacleFusion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project_s_msgs::ObstacleFusion_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "obstaclePosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.obstaclePosition);
    s << indent << "obstacleBodyCenter: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleBodyCenter);
    s << indent << "distanceCurviligne: ";
    Printer<float>::stream(s, indent + "  ", v.distanceCurviligne);
    s << indent << "groundHeight: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.groundHeight);
    s << indent << "obstacleVelocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleVelocity);
    s << indent << "obstacleAcceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleAcceleration);
    s << indent << "obstacleCap: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleCap);
    s << indent << "existenceProbability: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.existenceProbability);
    s << indent << "existenceState: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.existenceState);
    s << indent << "scoreDetection: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.scoreDetection);
    s << indent << "nbrDetection: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.nbrDetection);
    s << indent << "nbrVisibility: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.nbrVisibility);
    s << indent << "scorePersistence: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.scorePersistence);
    s << indent << "nbrUpdate: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.nbrUpdate);
    s << indent << "nbrAge: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.nbrAge);
    s << indent << "existenceFirstTime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.existenceFirstTime);
    s << indent << "existenceDurationTime: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.existenceDurationTime);
    s << indent << "anchorPoint: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.anchorPoint);
    s << indent << "obstaclePoseVariance: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.obstaclePoseVariance);
    s << indent << "obstacleVelocityVariance: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleVelocityVariance);
    s << indent << "obstacleDimensions: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleDimensions);
    s << indent << "obstacleClass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacleClass);
    s << indent << "vision_only_sign_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vision_only_sign_type);
    s << indent << "classificationProbability: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.classificationProbability);
    s << indent << "obstacleAssignment: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacleAssignment);
    s << indent << "obstacleCorner[]" << std::endl;
    for (size_t i = 0; i < v.obstacleCorner.size(); ++i)
    {
      s << indent << "  obstacleCorner[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacleCorner[i]);
    }
    s << indent << "NbrOccupiedLane: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.NbrOccupiedLane);
    s << indent << "indexAssignmentLine[]" << std::endl;
    for (size_t i = 0; i < v.indexAssignmentLine.size(); ++i)
    {
      s << indent << "  indexAssignmentLine[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.indexAssignmentLine[i]);
    }
    s << indent << "positionLane: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.positionLane);
    s << indent << "departureRighttDistance: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.departureRighttDistance);
    s << indent << "departureLeftDistance: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.departureLeftDistance);
    s << indent << "trafficLights: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.trafficLights);
    s << indent << "vehicleLights: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicleLights);
    s << indent << "idPiste[]" << std::endl;
    for (size_t i = 0; i < v.idPiste.size(); ++i)
    {
      s << indent << "  idPiste[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::UInt16_<ContainerAllocator> >::stream(s, indent + "    ", v.idPiste[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT_S_MSGS_MESSAGE_OBSTACLEFUSION_H
