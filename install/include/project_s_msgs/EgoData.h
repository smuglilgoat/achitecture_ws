// Generated by gencpp from file project_s_msgs/EgoData.msg
// DO NOT EDIT!


#ifndef PROJECT_S_MSGS_MESSAGE_EGODATA_H
#define PROJECT_S_MSGS_MESSAGE_EGODATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Accel.h>

namespace project_s_msgs
{
template <class ContainerAllocator>
struct EgoData_
{
  typedef EgoData_<ContainerAllocator> Type;

  EgoData_()
    : stamp()
    , velocity()
    , acceleration()
    , latitude(0.0)
    , longitude(0.0)
    , cap(0.0)  {
    }
  EgoData_(const ContainerAllocator& _alloc)
    : stamp()
    , velocity(_alloc)
    , acceleration(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , cap(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Accel_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef float _cap_type;
  _cap_type cap;





  typedef boost::shared_ptr< ::project_s_msgs::EgoData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project_s_msgs::EgoData_<ContainerAllocator> const> ConstPtr;

}; // struct EgoData_

typedef ::project_s_msgs::EgoData_<std::allocator<void> > EgoData;

typedef boost::shared_ptr< ::project_s_msgs::EgoData > EgoDataPtr;
typedef boost::shared_ptr< ::project_s_msgs::EgoData const> EgoDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project_s_msgs::EgoData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project_s_msgs::EgoData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace project_s_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'project_s_msgs': ['/home/segula/Desktop/ava/achitecture_ws/src/project_s_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mobileye_560_660_msgs': ['/home/dev/as_drivers_customer/install/share/mobileye_560_660_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::project_s_msgs::EgoData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project_s_msgs::EgoData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_s_msgs::EgoData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_s_msgs::EgoData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_s_msgs::EgoData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_s_msgs::EgoData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project_s_msgs::EgoData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d78259856396c0f87777d9538bea5d37";
  }

  static const char* value(const ::project_s_msgs::EgoData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd78259856396c0f8ULL;
  static const uint64_t static_value2 = 0x7777d9538bea5d37ULL;
};

template<class ContainerAllocator>
struct DataType< ::project_s_msgs::EgoData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project_s_msgs/EgoData";
  }

  static const char* value(const ::project_s_msgs::EgoData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project_s_msgs::EgoData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n\
\n\
geometry_msgs/Twist velocity\n\
geometry_msgs/Accel acceleration\n\
\n\
float64 latitude\n\
float64 longitude\n\
float32 cap\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Accel\n\
# This expresses acceleration in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
";
  }

  static const char* value(const ::project_s_msgs::EgoData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project_s_msgs::EgoData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.cap);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EgoData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project_s_msgs::EgoData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project_s_msgs::EgoData_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "cap: ";
    Printer<float>::stream(s, indent + "  ", v.cap);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT_S_MSGS_MESSAGE_EGODATA_H
