// Generated by gencpp from file project_s_msgs/GenericSmartData.msg
// DO NOT EDIT!


#ifndef PROJECT_S_MSGS_MESSAGE_GENERICSMARTDATA_H
#define PROJECT_S_MSGS_MESSAGE_GENERICSMARTDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/UInt16.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Accel.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>

namespace project_s_msgs
{
template <class ContainerAllocator>
struct GenericSmartData_
{
  typedef GenericSmartData_<ContainerAllocator> Type;

  GenericSmartData_()
    : header()
    , id()
    , obstaclePosition()
    , obstacleVelocity()
    , obstacleAcceleration()
    , obstacleDimensions()
    , obstaclePoseVariance()
    , obstacleVelocityVariance()
    , obstacleClass(0)
    , vision_only_sign_type(0)  {
    }
  GenericSmartData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(_alloc)
    , obstaclePosition(_alloc)
    , obstacleVelocity(_alloc)
    , obstacleAcceleration(_alloc)
    , obstacleDimensions(_alloc)
    , obstaclePoseVariance(_alloc)
    , obstacleVelocityVariance(_alloc)
    , obstacleClass(0)
    , vision_only_sign_type(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::UInt16_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _obstaclePosition_type;
  _obstaclePosition_type obstaclePosition;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _obstacleVelocity_type;
  _obstacleVelocity_type obstacleVelocity;

   typedef  ::geometry_msgs::Accel_<ContainerAllocator>  _obstacleAcceleration_type;
  _obstacleAcceleration_type obstacleAcceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _obstacleDimensions_type;
  _obstacleDimensions_type obstacleDimensions;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _obstaclePoseVariance_type;
  _obstaclePoseVariance_type obstaclePoseVariance;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _obstacleVelocityVariance_type;
  _obstacleVelocityVariance_type obstacleVelocityVariance;

   typedef uint8_t _obstacleClass_type;
  _obstacleClass_type obstacleClass;

   typedef uint8_t _vision_only_sign_type_type;
  _vision_only_sign_type_type vision_only_sign_type;



  enum {
    OBSTACLE_CLASS_NONE = 0u,
    OBSTACLE_CLASS_SIGN = 1u,
    OBSTACLE_CLASS_PLOT = 2u,
    OBSTACLE_CLASS_INVALID = 255u,
  };


  typedef boost::shared_ptr< ::project_s_msgs::GenericSmartData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project_s_msgs::GenericSmartData_<ContainerAllocator> const> ConstPtr;

}; // struct GenericSmartData_

typedef ::project_s_msgs::GenericSmartData_<std::allocator<void> > GenericSmartData;

typedef boost::shared_ptr< ::project_s_msgs::GenericSmartData > GenericSmartDataPtr;
typedef boost::shared_ptr< ::project_s_msgs::GenericSmartData const> GenericSmartDataConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project_s_msgs::GenericSmartData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project_s_msgs::GenericSmartData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace project_s_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'project_s_msgs': ['/home/segula/Desktop/ava/achitecture_ws/src/project_s_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mobileye_560_660_msgs': ['/home/dev/as_drivers_customer/install/share/mobileye_560_660_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::project_s_msgs::GenericSmartData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project_s_msgs::GenericSmartData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_s_msgs::GenericSmartData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_s_msgs::GenericSmartData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_s_msgs::GenericSmartData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_s_msgs::GenericSmartData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project_s_msgs::GenericSmartData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78b8f97069427362961d828004f4a726";
  }

  static const char* value(const ::project_s_msgs::GenericSmartData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78b8f97069427362ULL;
  static const uint64_t static_value2 = 0x961d828004f4a726ULL;
};

template<class ContainerAllocator>
struct DataType< ::project_s_msgs::GenericSmartData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project_s_msgs/GenericSmartData";
  }

  static const char* value(const ::project_s_msgs::GenericSmartData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project_s_msgs::GenericSmartData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
std_msgs/UInt16 id\n\
\n\
geometry_msgs/Pose obstaclePosition		# obstacle position\n\
geometry_msgs/Twist obstacleVelocity		# obstacle speed\n\
geometry_msgs/Accel obstacleAcceleration	# obstacle acceleration\n\
geometry_msgs/Vector3 obstacleDimensions	# obstacle x,y,z - length, width, height\n\
geometry_msgs/Pose obstaclePoseVariance		# obstacle position variance\n\
geometry_msgs/Twist obstacleVelocityVariance	# obstacle speed variance\n\
\n\
uint8 OBSTACLE_CLASS_NONE = 0\n\
uint8 OBSTACLE_CLASS_SIGN = 1\n\
uint8 OBSTACLE_CLASS_PLOT = 2\n\
uint8 OBSTACLE_CLASS_INVALID = 255\n\
uint8 obstacleClass\n\
\n\
uint8 vision_only_sign_type\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt16\n\
uint16 data\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Accel\n\
# This expresses acceleration in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
";
  }

  static const char* value(const ::project_s_msgs::GenericSmartData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project_s_msgs::GenericSmartData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.obstaclePosition);
      stream.next(m.obstacleVelocity);
      stream.next(m.obstacleAcceleration);
      stream.next(m.obstacleDimensions);
      stream.next(m.obstaclePoseVariance);
      stream.next(m.obstacleVelocityVariance);
      stream.next(m.obstacleClass);
      stream.next(m.vision_only_sign_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GenericSmartData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project_s_msgs::GenericSmartData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project_s_msgs::GenericSmartData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    s << std::endl;
    Printer< ::std_msgs::UInt16_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "obstaclePosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.obstaclePosition);
    s << indent << "obstacleVelocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleVelocity);
    s << indent << "obstacleAcceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleAcceleration);
    s << indent << "obstacleDimensions: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleDimensions);
    s << indent << "obstaclePoseVariance: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.obstaclePoseVariance);
    s << indent << "obstacleVelocityVariance: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleVelocityVariance);
    s << indent << "obstacleClass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacleClass);
    s << indent << "vision_only_sign_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vision_only_sign_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT_S_MSGS_MESSAGE_GENERICSMARTDATA_H
