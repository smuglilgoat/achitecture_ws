// Generated by gencpp from file project_s_msgs/global_tracks_prediction_synchro.msg
// DO NOT EDIT!


#ifndef PROJECT_S_MSGS_MESSAGE_GLOBAL_TRACKS_PREDICTION_SYNCHRO_H
#define PROJECT_S_MSGS_MESSAGE_GLOBAL_TRACKS_PREDICTION_SYNCHRO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/UInt8.h>
#include <geometry_msgs/Pose.h>
#include <std_msgs/Header.h>
#include <std_msgs/Float32.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Accel.h>
#include <geometry_msgs/Pose.h>
#include <std_msgs/Header.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/Float64.h>

namespace project_s_msgs
{
template <class ContainerAllocator>
struct global_tracks_prediction_synchro_
{
  typedef global_tracks_prediction_synchro_<ContainerAllocator> Type;

  global_tracks_prediction_synchro_()
    : header()
    , id()
    , obstaclePosition()
    , headerPosition()
    , groundHeight()
    , obstacleVelocity()
    , obstacleAcceleration()
    , obstaclePoseVariance()
    , headerPoseVariance()
    , obstacleVelocityVariance()
    , headerVelocityVariance()
    , obstacleDimensions()
    , obstacleClass()
    , classificationProbability()
    , dateAcquisition()  {
    }
  global_tracks_prediction_synchro_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(_alloc)
    , obstaclePosition(_alloc)
    , headerPosition(_alloc)
    , groundHeight(_alloc)
    , obstacleVelocity(_alloc)
    , obstacleAcceleration(_alloc)
    , obstaclePoseVariance(_alloc)
    , headerPoseVariance(_alloc)
    , obstacleVelocityVariance(_alloc)
    , headerVelocityVariance(_alloc)
    , obstacleDimensions(_alloc)
    , obstacleClass(_alloc)
    , classificationProbability(_alloc)
    , dateAcquisition(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _obstaclePosition_type;
  _obstaclePosition_type obstaclePosition;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _headerPosition_type;
  _headerPosition_type headerPosition;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _groundHeight_type;
  _groundHeight_type groundHeight;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _obstacleVelocity_type;
  _obstacleVelocity_type obstacleVelocity;

   typedef  ::geometry_msgs::Accel_<ContainerAllocator>  _obstacleAcceleration_type;
  _obstacleAcceleration_type obstacleAcceleration;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _obstaclePoseVariance_type;
  _obstaclePoseVariance_type obstaclePoseVariance;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _headerPoseVariance_type;
  _headerPoseVariance_type headerPoseVariance;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _obstacleVelocityVariance_type;
  _obstacleVelocityVariance_type obstacleVelocityVariance;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _headerVelocityVariance_type;
  _headerVelocityVariance_type headerVelocityVariance;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _obstacleDimensions_type;
  _obstacleDimensions_type obstacleDimensions;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _obstacleClass_type;
  _obstacleClass_type obstacleClass;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _classificationProbability_type;
  _classificationProbability_type classificationProbability;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _dateAcquisition_type;
  _dateAcquisition_type dateAcquisition;





  typedef boost::shared_ptr< ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> const> ConstPtr;

}; // struct global_tracks_prediction_synchro_

typedef ::project_s_msgs::global_tracks_prediction_synchro_<std::allocator<void> > global_tracks_prediction_synchro;

typedef boost::shared_ptr< ::project_s_msgs::global_tracks_prediction_synchro > global_tracks_prediction_synchroPtr;
typedef boost::shared_ptr< ::project_s_msgs::global_tracks_prediction_synchro const> global_tracks_prediction_synchroConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace project_s_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'project_s_msgs': ['/home/segula/Desktop/ava/achitecture_ws/src/project_s_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mobileye_560_660_msgs': ['/home/dev/as_drivers_customer/install/share/mobileye_560_660_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "159e2baf42cf24b53560d72be3905436";
  }

  static const char* value(const ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x159e2baf42cf24b5ULL;
  static const uint64_t static_value2 = 0x3560d72be3905436ULL;
};

template<class ContainerAllocator>
struct DataType< ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project_s_msgs/global_tracks_prediction_synchro";
  }

  static const char* value(const ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
std_msgs/UInt8 id\n\
\n\
geometry_msgs/Pose obstaclePosition		# obstacle position\n\
Header headerPosition\n\
std_msgs/Float32 groundHeight			# ground height\n\
geometry_msgs/Twist obstacleVelocity		# obstacle speed\n\
geometry_msgs/Accel obstacleAcceleration	# obstacle acceleration\n\
geometry_msgs/Pose obstaclePoseVariance		# obstacle position variance\n\
Header headerPoseVariance\n\
geometry_msgs/Twist obstacleVelocityVariance	# obstacle speed variance\n\
Header headerVelocityVariance\n\
geometry_msgs/Vector3 obstacleDimensions	# obstacle x,y,z - length, width, height\n\
std_msgs/UInt8 obstacleClass\n\
std_msgs/UInt8 classificationProbability\n\
std_msgs/Float64 dateAcquisition\n\
\n\
# History\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt8\n\
uint8 data\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Accel\n\
# This expresses acceleration in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: std_msgs/Float64\n\
float64 data\n\
";
  }

  static const char* value(const ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.obstaclePosition);
      stream.next(m.headerPosition);
      stream.next(m.groundHeight);
      stream.next(m.obstacleVelocity);
      stream.next(m.obstacleAcceleration);
      stream.next(m.obstaclePoseVariance);
      stream.next(m.headerPoseVariance);
      stream.next(m.obstacleVelocityVariance);
      stream.next(m.headerVelocityVariance);
      stream.next(m.obstacleDimensions);
      stream.next(m.obstacleClass);
      stream.next(m.classificationProbability);
      stream.next(m.dateAcquisition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct global_tracks_prediction_synchro_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project_s_msgs::global_tracks_prediction_synchro_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "obstaclePosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.obstaclePosition);
    s << indent << "headerPosition: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.headerPosition);
    s << indent << "groundHeight: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.groundHeight);
    s << indent << "obstacleVelocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleVelocity);
    s << indent << "obstacleAcceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleAcceleration);
    s << indent << "obstaclePoseVariance: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.obstaclePoseVariance);
    s << indent << "headerPoseVariance: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.headerPoseVariance);
    s << indent << "obstacleVelocityVariance: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleVelocityVariance);
    s << indent << "headerVelocityVariance: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.headerVelocityVariance);
    s << indent << "obstacleDimensions: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleDimensions);
    s << indent << "obstacleClass: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleClass);
    s << indent << "classificationProbability: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.classificationProbability);
    s << indent << "dateAcquisition: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.dateAcquisition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT_S_MSGS_MESSAGE_GLOBAL_TRACKS_PREDICTION_SYNCHRO_H
