// Generated by gencpp from file project_s_msgs/ehStub.msg
// DO NOT EDIT!


#ifndef PROJECT_S_MSGS_MESSAGE_EHSTUB_H
#define PROJECT_S_MSGS_MESSAGE_EHSTUB_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/Float32.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/Float32.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>

namespace project_s_msgs
{
template <class ContainerAllocator>
struct ehStub_
{
  typedef ehStub_<ContainerAllocator> Type;

  ehStub_()
    : header()
    , id()
    , offset()
    , indexSubPath()
    , turnAngle()
    , functionRoadClass()
    , wayForm()
    , nbLanesDrivingDirection()
    , nbLanesOppositeDirection()  {
    }
  ehStub_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(_alloc)
    , offset(_alloc)
    , indexSubPath(_alloc)
    , turnAngle(_alloc)
    , functionRoadClass(_alloc)
    , wayForm(_alloc)
    , nbLanesDrivingDirection(_alloc)
    , nbLanesOppositeDirection(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _offset_type;
  _offset_type offset;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _indexSubPath_type;
  _indexSubPath_type indexSubPath;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _turnAngle_type;
  _turnAngle_type turnAngle;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _functionRoadClass_type;
  _functionRoadClass_type functionRoadClass;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _wayForm_type;
  _wayForm_type wayForm;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _nbLanesDrivingDirection_type;
  _nbLanesDrivingDirection_type nbLanesDrivingDirection;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _nbLanesOppositeDirection_type;
  _nbLanesOppositeDirection_type nbLanesOppositeDirection;





  typedef boost::shared_ptr< ::project_s_msgs::ehStub_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project_s_msgs::ehStub_<ContainerAllocator> const> ConstPtr;

}; // struct ehStub_

typedef ::project_s_msgs::ehStub_<std::allocator<void> > ehStub;

typedef boost::shared_ptr< ::project_s_msgs::ehStub > ehStubPtr;
typedef boost::shared_ptr< ::project_s_msgs::ehStub const> ehStubConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project_s_msgs::ehStub_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project_s_msgs::ehStub_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace project_s_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'project_s_msgs': ['/home/segula/Desktop/ava/achitecture_ws/src/project_s_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mobileye_560_660_msgs': ['/home/dev/as_drivers_customer/install/share/mobileye_560_660_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::project_s_msgs::ehStub_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project_s_msgs::ehStub_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_s_msgs::ehStub_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_s_msgs::ehStub_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_s_msgs::ehStub_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_s_msgs::ehStub_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project_s_msgs::ehStub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c119249a96bd27bec3a52d59a68f5895";
  }

  static const char* value(const ::project_s_msgs::ehStub_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc119249a96bd27beULL;
  static const uint64_t static_value2 = 0xc3a52d59a68f5895ULL;
};

template<class ContainerAllocator>
struct DataType< ::project_s_msgs::ehStub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project_s_msgs/ehStub";
  }

  static const char* value(const ::project_s_msgs::ehStub_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project_s_msgs::ehStub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
std_msgs/UInt8 id\n\
\n\
#std_msgs/UInt8 indexPath\n\
std_msgs/Float32 offset\n\
std_msgs/UInt8 indexSubPath\n\
std_msgs/Float32 turnAngle\n\
std_msgs/UInt8 functionRoadClass\n\
std_msgs/UInt8 wayForm\n\
std_msgs/UInt8 nbLanesDrivingDirection\n\
std_msgs/UInt8 nbLanesOppositeDirection\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt8\n\
uint8 data\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
";
  }

  static const char* value(const ::project_s_msgs::ehStub_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project_s_msgs::ehStub_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.offset);
      stream.next(m.indexSubPath);
      stream.next(m.turnAngle);
      stream.next(m.functionRoadClass);
      stream.next(m.wayForm);
      stream.next(m.nbLanesDrivingDirection);
      stream.next(m.nbLanesOppositeDirection);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ehStub_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project_s_msgs::ehStub_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project_s_msgs::ehStub_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "offset: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.offset);
    s << indent << "indexSubPath: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.indexSubPath);
    s << indent << "turnAngle: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.turnAngle);
    s << indent << "functionRoadClass: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.functionRoadClass);
    s << indent << "wayForm: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.wayForm);
    s << indent << "nbLanesDrivingDirection: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.nbLanesDrivingDirection);
    s << indent << "nbLanesOppositeDirection: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.nbLanesOppositeDirection);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT_S_MSGS_MESSAGE_EHSTUB_H
