// Generated by gencpp from file project_s_msgs/toMissionServer.msg
// DO NOT EDIT!


#ifndef PROJECT_S_MSGS_MESSAGE_TOMISSIONSERVER_H
#define PROJECT_S_MSGS_MESSAGE_TOMISSIONSERVER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace project_s_msgs
{
template <class ContainerAllocator>
struct toMissionServer_
{
  typedef toMissionServer_<ContainerAllocator> Type;

  toMissionServer_()
    : header()
    , idCar(0)
    , state(0)
    , mode(0)
    , lat()
    , lng()
    , url()
    , data()  {
    }
  toMissionServer_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , idCar(0)
    , state(0)
    , mode(0)
    , lat(_alloc)
    , lng(_alloc)
    , url(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _idCar_type;
  _idCar_type idCar;

   typedef uint8_t _state_type;
  _state_type state;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lat_type;
  _lat_type lat;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lng_type;
  _lng_type lng;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _url_type;
  _url_type url;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  _data_type data;



  enum {
    UNAVAILABLE = 0u,
    WAITING = 1u,
    NAVIGATING = 2u,
    ENDING = 3u,
    SLEEPING = 4u,
    ARDUINOMODE = 0u,
    TRANSPARENTMODE = 1u,
    BYFIELDMODE = 2u,
  };


  typedef boost::shared_ptr< ::project_s_msgs::toMissionServer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project_s_msgs::toMissionServer_<ContainerAllocator> const> ConstPtr;

}; // struct toMissionServer_

typedef ::project_s_msgs::toMissionServer_<std::allocator<void> > toMissionServer;

typedef boost::shared_ptr< ::project_s_msgs::toMissionServer > toMissionServerPtr;
typedef boost::shared_ptr< ::project_s_msgs::toMissionServer const> toMissionServerConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project_s_msgs::toMissionServer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project_s_msgs::toMissionServer_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace project_s_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'project_s_msgs': ['/home/segula/Desktop/ava/achitecture_ws/src/project_s_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mobileye_560_660_msgs': ['/home/dev/as_drivers_customer/install/share/mobileye_560_660_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::project_s_msgs::toMissionServer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project_s_msgs::toMissionServer_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_s_msgs::toMissionServer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_s_msgs::toMissionServer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_s_msgs::toMissionServer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_s_msgs::toMissionServer_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project_s_msgs::toMissionServer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "899b1544a91b69b2992d0ca875040be0";
  }

  static const char* value(const ::project_s_msgs::toMissionServer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x899b1544a91b69b2ULL;
  static const uint64_t static_value2 = 0x992d0ca875040be0ULL;
};

template<class ContainerAllocator>
struct DataType< ::project_s_msgs::toMissionServer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project_s_msgs/toMissionServer";
  }

  static const char* value(const ::project_s_msgs::toMissionServer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project_s_msgs::toMissionServer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header				# Contains ROS timestamp, sequence & frame id			\n\
\n\
uint32 idCar				# Car Identification Number\n\
\n\
uint8 state				# Car status to server \n\
uint8 UNAVAILABLE=0\n\
uint8 WAITING=1\n\
uint8 NAVIGATING=2\n\
uint8 ENDING=3\n\
uint8 SLEEPING=4\n\
\n\
uint8 mode\n\
uint8 ARDUINOMODE=0\n\
uint8 TRANSPARENTMODE=1\n\
uint8 BYFIELDMODE=2\n\
\n\
string lat				# Car position latitude\n\
string lng				# Car position longitude\n\
\n\
string url\n\
string data\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::project_s_msgs::toMissionServer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project_s_msgs::toMissionServer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.idCar);
      stream.next(m.state);
      stream.next(m.mode);
      stream.next(m.lat);
      stream.next(m.lng);
      stream.next(m.url);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct toMissionServer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project_s_msgs::toMissionServer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project_s_msgs::toMissionServer_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "idCar: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.idCar);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "lat: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lat);
    s << indent << "lng: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lng);
    s << indent << "url: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.url);
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT_S_MSGS_MESSAGE_TOMISSIONSERVER_H
