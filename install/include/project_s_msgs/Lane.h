// Generated by gencpp from file project_s_msgs/Lane.msg
// DO NOT EDIT!


#ifndef PROJECT_S_MSGS_MESSAGE_LANE_H
#define PROJECT_S_MSGS_MESSAGE_LANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>

namespace project_s_msgs
{
template <class ContainerAllocator>
struct Lane_
{
  typedef Lane_<ContainerAllocator> Type;

  Lane_()
    : idLineRight()
    , idLineLeft()
    , offsetStart(0)
    , offsetEnd(0)
    , trafficDirection()
    , priority()
    , speedLimit()
    , TrafficSign()
    , turnOffset(0)
    , turnRadius(0.0)
    , crossRoadClass()
    , crossRoadOffset(0)
    , crossRoadPriority()  {
    }
  Lane_(const ContainerAllocator& _alloc)
    : idLineRight(_alloc)
    , idLineLeft(_alloc)
    , offsetStart(0)
    , offsetEnd(0)
    , trafficDirection(_alloc)
    , priority(_alloc)
    , speedLimit(_alloc)
    , TrafficSign(_alloc)
    , turnOffset(0)
    , turnRadius(0.0)
    , crossRoadClass(_alloc)
    , crossRoadOffset(0)
    , crossRoadPriority(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _idLineRight_type;
  _idLineRight_type idLineRight;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _idLineLeft_type;
  _idLineLeft_type idLineLeft;

   typedef int16_t _offsetStart_type;
  _offsetStart_type offsetStart;

   typedef int16_t _offsetEnd_type;
  _offsetEnd_type offsetEnd;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _trafficDirection_type;
  _trafficDirection_type trafficDirection;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _priority_type;
  _priority_type priority;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _speedLimit_type;
  _speedLimit_type speedLimit;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _TrafficSign_type;
  _TrafficSign_type TrafficSign;

   typedef int16_t _turnOffset_type;
  _turnOffset_type turnOffset;

   typedef float _turnRadius_type;
  _turnRadius_type turnRadius;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _crossRoadClass_type;
  _crossRoadClass_type crossRoadClass;

   typedef int16_t _crossRoadOffset_type;
  _crossRoadOffset_type crossRoadOffset;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _crossRoadPriority_type;
  _crossRoadPriority_type crossRoadPriority;





  typedef boost::shared_ptr< ::project_s_msgs::Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project_s_msgs::Lane_<ContainerAllocator> const> ConstPtr;

}; // struct Lane_

typedef ::project_s_msgs::Lane_<std::allocator<void> > Lane;

typedef boost::shared_ptr< ::project_s_msgs::Lane > LanePtr;
typedef boost::shared_ptr< ::project_s_msgs::Lane const> LaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project_s_msgs::Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project_s_msgs::Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace project_s_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'project_s_msgs': ['/home/segula/Desktop/ava/achitecture_ws/src/project_s_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mobileye_560_660_msgs': ['/home/dev/as_drivers_customer/install/share/mobileye_560_660_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::project_s_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project_s_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_s_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_s_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_s_msgs::Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_s_msgs::Lane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project_s_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac4b37c308258de2eff999751d19fd39";
  }

  static const char* value(const ::project_s_msgs::Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac4b37c308258de2ULL;
  static const uint64_t static_value2 = 0xeff999751d19fd39ULL;
};

template<class ContainerAllocator>
struct DataType< ::project_s_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project_s_msgs/Lane";
  }

  static const char* value(const ::project_s_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project_s_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/UInt8 idLineRight\n\
std_msgs/UInt8 idLineLeft\n\
int16 offsetStart\n\
int16 offsetEnd\n\
std_msgs/UInt8 trafficDirection\n\
std_msgs/UInt8 priority\n\
std_msgs/UInt8 speedLimit\n\
std_msgs/UInt8 TrafficSign\n\
int16 turnOffset\n\
float32 turnRadius\n\
std_msgs/UInt8 crossRoadClass\n\
int16 crossRoadOffset\n\
std_msgs/UInt8 crossRoadPriority\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt8\n\
uint8 data\n\
";
  }

  static const char* value(const ::project_s_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project_s_msgs::Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.idLineRight);
      stream.next(m.idLineLeft);
      stream.next(m.offsetStart);
      stream.next(m.offsetEnd);
      stream.next(m.trafficDirection);
      stream.next(m.priority);
      stream.next(m.speedLimit);
      stream.next(m.TrafficSign);
      stream.next(m.turnOffset);
      stream.next(m.turnRadius);
      stream.next(m.crossRoadClass);
      stream.next(m.crossRoadOffset);
      stream.next(m.crossRoadPriority);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project_s_msgs::Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project_s_msgs::Lane_<ContainerAllocator>& v)
  {
    s << indent << "idLineRight: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.idLineRight);
    s << indent << "idLineLeft: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.idLineLeft);
    s << indent << "offsetStart: ";
    Printer<int16_t>::stream(s, indent + "  ", v.offsetStart);
    s << indent << "offsetEnd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.offsetEnd);
    s << indent << "trafficDirection: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.trafficDirection);
    s << indent << "priority: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.priority);
    s << indent << "speedLimit: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.speedLimit);
    s << indent << "TrafficSign: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.TrafficSign);
    s << indent << "turnOffset: ";
    Printer<int16_t>::stream(s, indent + "  ", v.turnOffset);
    s << indent << "turnRadius: ";
    Printer<float>::stream(s, indent + "  ", v.turnRadius);
    s << indent << "crossRoadClass: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.crossRoadClass);
    s << indent << "crossRoadOffset: ";
    Printer<int16_t>::stream(s, indent + "  ", v.crossRoadOffset);
    s << indent << "crossRoadPriority: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.crossRoadPriority);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT_S_MSGS_MESSAGE_LANE_H
