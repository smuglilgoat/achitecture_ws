// Generated by gencpp from file message_project_s/EgoDataReport.msg
// DO NOT EDIT!


#ifndef MESSAGE_PROJECT_S_MESSAGE_EGODATAREPORT_H
#define MESSAGE_PROJECT_S_MESSAGE_EGODATAREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/UInt8.h>
#include <message_project_s/EgoData.h>

namespace message_project_s
{
template <class ContainerAllocator>
struct EgoDataReport_
{
  typedef EgoDataReport_<ContainerAllocator> Type;

  EgoDataReport_()
    : header()
    , id()
    , EgoData()  {
    }
  EgoDataReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(_alloc)
    , EgoData()  {
  (void)_alloc;
      EgoData.assign( ::message_project_s::EgoData_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef boost::array< ::message_project_s::EgoData_<ContainerAllocator> , 10>  _EgoData_type;
  _EgoData_type EgoData;



  enum {
    NBR_MAX_EGO_DATA = 10u,
  };


  typedef boost::shared_ptr< ::message_project_s::EgoDataReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::message_project_s::EgoDataReport_<ContainerAllocator> const> ConstPtr;

}; // struct EgoDataReport_

typedef ::message_project_s::EgoDataReport_<std::allocator<void> > EgoDataReport;

typedef boost::shared_ptr< ::message_project_s::EgoDataReport > EgoDataReportPtr;
typedef boost::shared_ptr< ::message_project_s::EgoDataReport const> EgoDataReportConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::message_project_s::EgoDataReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::message_project_s::EgoDataReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace message_project_s

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'delphi_srr_msgs': ['/home/dev/as_drivers_customer/install/share/delphi_srr_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'delphi_esr_msgs': ['/home/dev/as_drivers_customer/install/share/delphi_esr_msgs/cmake/../msg'], 'message_project_s': ['/home/segula/Desktop/ava/achitecture_ws/src/smart_sensor/message_project_s/msg'], 'radar_msgs': ['/home/dev/as_drivers_customer/install/share/radar_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mobileye_560_660_msgs': ['/home/dev/as_drivers_customer/install/share/mobileye_560_660_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::message_project_s::EgoDataReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::message_project_s::EgoDataReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::message_project_s::EgoDataReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::message_project_s::EgoDataReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message_project_s::EgoDataReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message_project_s::EgoDataReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::message_project_s::EgoDataReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81b9e8f980ada541cb5d9103d33a8e95";
  }

  static const char* value(const ::message_project_s::EgoDataReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81b9e8f980ada541ULL;
  static const uint64_t static_value2 = 0xcb5d9103d33a8e95ULL;
};

template<class ContainerAllocator>
struct DataType< ::message_project_s::EgoDataReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "message_project_s/EgoDataReport";
  }

  static const char* value(const ::message_project_s::EgoDataReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::message_project_s::EgoDataReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
std_msgs/UInt8 id\n\
\n\
uint8 NBR_MAX_EGO_DATA = 10\n\
message_project_s/EgoData[10] EgoData	# en concordance avec NBR_MAX_EGO_DATA/vehicle.cpp, local_tracks_synchro, global_tracks_prediction, road_model\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt8\n\
uint8 data\n\
\n\
================================================================================\n\
MSG: message_project_s/EgoData\n\
time stamp\n\
\n\
geometry_msgs/Twist velocity\n\
geometry_msgs/Accel acceleration\n\
\n\
float64 latitude\n\
float64 longitude\n\
float64 cap\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Accel\n\
# This expresses acceleration in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
";
  }

  static const char* value(const ::message_project_s::EgoDataReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::message_project_s::EgoDataReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.EgoData);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EgoDataReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::message_project_s::EgoDataReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::message_project_s::EgoDataReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "EgoData[]" << std::endl;
    for (size_t i = 0; i < v.EgoData.size(); ++i)
    {
      s << indent << "  EgoData[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::message_project_s::EgoData_<ContainerAllocator> >::stream(s, indent + "    ", v.EgoData[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGE_PROJECT_S_MESSAGE_EGODATAREPORT_H
