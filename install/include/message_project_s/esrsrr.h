// Generated by gencpp from file message_project_s/esrsrr.msg
// DO NOT EDIT!


#ifndef MESSAGE_PROJECT_S_MESSAGE_ESRSRR_H
#define MESSAGE_PROJECT_S_MESSAGE_ESRSRR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace message_project_s
{
template <class ContainerAllocator>
struct esrsrr_
{
  typedef esrsrr_<ContainerAllocator> Type;

  esrsrr_()
    : stampsrr()
    , stampesr()
    , seqesr(0)
    , can_dsp_ts(0)  {
    }
  esrsrr_(const ContainerAllocator& _alloc)
    : stampsrr()
    , stampesr()
    , seqesr(0)
    , can_dsp_ts(0)  {
  (void)_alloc;
    }



   typedef ros::Time _stampsrr_type;
  _stampsrr_type stampsrr;

   typedef ros::Time _stampesr_type;
  _stampesr_type stampesr;

   typedef uint32_t _seqesr_type;
  _seqesr_type seqesr;

   typedef uint32_t _can_dsp_ts_type;
  _can_dsp_ts_type can_dsp_ts;





  typedef boost::shared_ptr< ::message_project_s::esrsrr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::message_project_s::esrsrr_<ContainerAllocator> const> ConstPtr;

}; // struct esrsrr_

typedef ::message_project_s::esrsrr_<std::allocator<void> > esrsrr;

typedef boost::shared_ptr< ::message_project_s::esrsrr > esrsrrPtr;
typedef boost::shared_ptr< ::message_project_s::esrsrr const> esrsrrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::message_project_s::esrsrr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::message_project_s::esrsrr_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace message_project_s

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'delphi_srr_msgs': ['/home/dev/as_drivers_customer/install/share/delphi_srr_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'delphi_esr_msgs': ['/home/dev/as_drivers_customer/install/share/delphi_esr_msgs/cmake/../msg'], 'message_project_s': ['/home/segula/Desktop/ava/achitecture_ws/src/smart_sensor/message_project_s/msg'], 'radar_msgs': ['/home/dev/as_drivers_customer/install/share/radar_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mobileye_560_660_msgs': ['/home/dev/as_drivers_customer/install/share/mobileye_560_660_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::message_project_s::esrsrr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::message_project_s::esrsrr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::message_project_s::esrsrr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::message_project_s::esrsrr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message_project_s::esrsrr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message_project_s::esrsrr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::message_project_s::esrsrr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67e39e1d269819b2e9c170bc6fb5fbb5";
  }

  static const char* value(const ::message_project_s::esrsrr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67e39e1d269819b2ULL;
  static const uint64_t static_value2 = 0xe9c170bc6fb5fbb5ULL;
};

template<class ContainerAllocator>
struct DataType< ::message_project_s::esrsrr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "message_project_s/esrsrr";
  }

  static const char* value(const ::message_project_s::esrsrr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::message_project_s::esrsrr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
time stampsrr\n\
time stampesr\n\
uint32 seqesr\n\
uint32 can_dsp_ts\n\
";
  }

  static const char* value(const ::message_project_s::esrsrr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::message_project_s::esrsrr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stampsrr);
      stream.next(m.stampesr);
      stream.next(m.seqesr);
      stream.next(m.can_dsp_ts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct esrsrr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::message_project_s::esrsrr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::message_project_s::esrsrr_<ContainerAllocator>& v)
  {
    s << indent << "stampsrr: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stampsrr);
    s << indent << "stampesr: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stampesr);
    s << indent << "seqesr: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seqesr);
    s << indent << "can_dsp_ts: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.can_dsp_ts);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGE_PROJECT_S_MESSAGE_ESRSRR_H
