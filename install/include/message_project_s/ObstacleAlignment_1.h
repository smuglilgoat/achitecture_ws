// Generated by gencpp from file message_project_s/ObstacleAlignment_1.msg
// DO NOT EDIT!


#ifndef MESSAGE_PROJECT_S_MESSAGE_OBSTACLEALIGNMENT_1_H
#define MESSAGE_PROJECT_S_MESSAGE_OBSTACLEALIGNMENT_1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/UInt16.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Accel.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float64.h>

namespace message_project_s
{
template <class ContainerAllocator>
struct ObstacleAlignment_1_
{
  typedef ObstacleAlignment_1_<ContainerAllocator> Type;

  ObstacleAlignment_1_()
    : header()
    , id()
    , obstaclePosition()
    , obstacleBodyCenter()
    , obstacleVelocity()
    , obstacleRelativeVelocity()
    , obstacleAcceleration()
    , obstacleDimensions()
    , blinkerInfo(0)
    , cutInAndOut(0)
    , obstacleType(0)
    , obstacleStatus(0)
    , obstacleBrakeLights(false)
    , cipvFlag(0)
    , obstacleReplaced(0)
    , obstacleValid(0)
    , obstacleAge(0)
    , obstacleLane(0)
    , obstacleAngle(0.0)
    , obstacleAngleVariance(0.0)
    , obstacleAngleRate(0.0)
    , obstacleScaleChange(0.0)
    , visionOnlySignType(0)
    , visionOnlySupplementarySignType(0)
    , signPosition()
    , filterType(0.0)
    , obstaclePoseVariance()
    , obstacleVelocityVariance()
    , obstacleRelativeVelocityVariance()
    , groundHeight()
    , classificationProbability(0.0)
    , dateAcquisition()  {
    }
  ObstacleAlignment_1_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(_alloc)
    , obstaclePosition(_alloc)
    , obstacleBodyCenter(_alloc)
    , obstacleVelocity(_alloc)
    , obstacleRelativeVelocity(_alloc)
    , obstacleAcceleration(_alloc)
    , obstacleDimensions(_alloc)
    , blinkerInfo(0)
    , cutInAndOut(0)
    , obstacleType(0)
    , obstacleStatus(0)
    , obstacleBrakeLights(false)
    , cipvFlag(0)
    , obstacleReplaced(0)
    , obstacleValid(0)
    , obstacleAge(0)
    , obstacleLane(0)
    , obstacleAngle(0.0)
    , obstacleAngleVariance(0.0)
    , obstacleAngleRate(0.0)
    , obstacleScaleChange(0.0)
    , visionOnlySignType(0)
    , visionOnlySupplementarySignType(0)
    , signPosition(_alloc)
    , filterType(0.0)
    , obstaclePoseVariance(_alloc)
    , obstacleVelocityVariance(_alloc)
    , obstacleRelativeVelocityVariance(_alloc)
    , groundHeight(_alloc)
    , classificationProbability(0.0)
    , dateAcquisition(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::UInt16_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _obstaclePosition_type;
  _obstaclePosition_type obstaclePosition;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _obstacleBodyCenter_type;
  _obstacleBodyCenter_type obstacleBodyCenter;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _obstacleVelocity_type;
  _obstacleVelocity_type obstacleVelocity;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _obstacleRelativeVelocity_type;
  _obstacleRelativeVelocity_type obstacleRelativeVelocity;

   typedef  ::geometry_msgs::Accel_<ContainerAllocator>  _obstacleAcceleration_type;
  _obstacleAcceleration_type obstacleAcceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _obstacleDimensions_type;
  _obstacleDimensions_type obstacleDimensions;

   typedef uint8_t _blinkerInfo_type;
  _blinkerInfo_type blinkerInfo;

   typedef uint8_t _cutInAndOut_type;
  _cutInAndOut_type cutInAndOut;

   typedef uint8_t _obstacleType_type;
  _obstacleType_type obstacleType;

   typedef uint8_t _obstacleStatus_type;
  _obstacleStatus_type obstacleStatus;

   typedef uint8_t _obstacleBrakeLights_type;
  _obstacleBrakeLights_type obstacleBrakeLights;

   typedef int8_t _cipvFlag_type;
  _cipvFlag_type cipvFlag;

   typedef int8_t _obstacleReplaced_type;
  _obstacleReplaced_type obstacleReplaced;

   typedef uint8_t _obstacleValid_type;
  _obstacleValid_type obstacleValid;

   typedef uint16_t _obstacleAge_type;
  _obstacleAge_type obstacleAge;

   typedef uint8_t _obstacleLane_type;
  _obstacleLane_type obstacleLane;

   typedef float _obstacleAngle_type;
  _obstacleAngle_type obstacleAngle;

   typedef float _obstacleAngleVariance_type;
  _obstacleAngleVariance_type obstacleAngleVariance;

   typedef float _obstacleAngleRate_type;
  _obstacleAngleRate_type obstacleAngleRate;

   typedef double _obstacleScaleChange_type;
  _obstacleScaleChange_type obstacleScaleChange;

   typedef uint8_t _visionOnlySignType_type;
  _visionOnlySignType_type visionOnlySignType;

   typedef uint8_t _visionOnlySupplementarySignType_type;
  _visionOnlySupplementarySignType_type visionOnlySupplementarySignType;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _signPosition_type;
  _signPosition_type signPosition;

   typedef double _filterType_type;
  _filterType_type filterType;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _obstaclePoseVariance_type;
  _obstaclePoseVariance_type obstaclePoseVariance;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _obstacleVelocityVariance_type;
  _obstacleVelocityVariance_type obstacleVelocityVariance;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _obstacleRelativeVelocityVariance_type;
  _obstacleRelativeVelocityVariance_type obstacleRelativeVelocityVariance;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _groundHeight_type;
  _groundHeight_type groundHeight;

   typedef double _classificationProbability_type;
  _classificationProbability_type classificationProbability;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _dateAcquisition_type;
  _dateAcquisition_type dateAcquisition;



  enum {
    blinkerInfo_Unknown = 0u,
    cutInAndOut_Unknown = 0u,
    obstacleType_Unknown = 7u,
    obstacleStatus_Unknown = 0u,
    cipvFlag_Unknown = 2,
    obstacleReplaced_Unknown = 2,
    obstacleValid_Unknown = 3u,
    obstacleAge_Unknown = 256u,
    obstacleLane_Unknown = 0u,
    visionOnlySignType_Unknown = 254u,
    visionOnlySupplementarySignType_Unknown = 0u,
  };

  static const double obstaclePosition_linear_Unknown;
  static const double obstaclePosition_orientation_Unknown;
  static const double obstacleVelocity_linear_Unknown;
  static const double obstacleVelocity_angular_Unknown;
  static const double obstacleRelativeVelocity_linear_Unknown;
  static const double obstacleRelativeVelocity_angular_Unknown;
  static const double obstacleAcceleration_linear_Unknown;
  static const double obstacleAcceleration_angular_Unknown;
  static const double obstacleDimensions_Unknown;
  static const uint8_t obstacleBrakeLights_Unknown;
  static const float obstacleAngle_Unknown;
  static const float obstacleAngleVariance_Unknown;
  static const float obstacleAngleRate_Unknown;
  static const double obstacleScaleChange_Unknown;
  static const double signPosition_Unknown;
  static const double filterType_Unknown;
  static const double obstaclePoseVariance_position_Unknown;
  static const double obstaclePoseVariance_orientation_Unknown;
  static const double obstacleVelocityVariance_linear_Unknown;
  static const double obstacleVelocityVariance_angular_Unknown;
  static const double obstacleRelativeVelocityVariance_linear_Unknown;
  static const double obstacleRelativeVelocityVariance_angular_Unknown;
  static const double groundHeight_Unknown;
  static const double classificationProbability_Unknown;
  static const double dateAcquisition_Unknown;

  typedef boost::shared_ptr< ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleAlignment_1_

typedef ::message_project_s::ObstacleAlignment_1_<std::allocator<void> > ObstacleAlignment_1;

typedef boost::shared_ptr< ::message_project_s::ObstacleAlignment_1 > ObstacleAlignment_1Ptr;
typedef boost::shared_ptr< ::message_project_s::ObstacleAlignment_1 const> ObstacleAlignment_1ConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstaclePosition_linear_Unknown =
        
          999.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstaclePosition_orientation_Unknown =
        
          999.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstacleVelocity_linear_Unknown =
        
          999.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstacleVelocity_angular_Unknown =
        
          999.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstacleRelativeVelocity_linear_Unknown =
        
          999.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstacleRelativeVelocity_angular_Unknown =
        
          999.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstacleAcceleration_linear_Unknown =
        
          999.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstacleAcceleration_angular_Unknown =
        
          999.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstacleDimensions_Unknown =
        
          999.0
        
        ;
   

   

   

   

   

   
   template<typename ContainerAllocator> const uint8_t
      ObstacleAlignment_1_<ContainerAllocator>::obstacleBrakeLights_Unknown =
        
           0
        
        ;
   

   

   

   

   

   

   
   template<typename ContainerAllocator> const float
      ObstacleAlignment_1_<ContainerAllocator>::obstacleAngle_Unknown =
        
          999.0
        
        ;
   

   
   template<typename ContainerAllocator> const float
      ObstacleAlignment_1_<ContainerAllocator>::obstacleAngleVariance_Unknown =
        
          -1.0
        
        ;
   

   
   template<typename ContainerAllocator> const float
      ObstacleAlignment_1_<ContainerAllocator>::obstacleAngleRate_Unknown =
        
          999.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstacleScaleChange_Unknown =
        
          999.0
        
        ;
   

   

   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::signPosition_Unknown =
        
          999.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::filterType_Unknown =
        
          999.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstaclePoseVariance_position_Unknown =
        
          -1.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstaclePoseVariance_orientation_Unknown =
        
          -1.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstacleVelocityVariance_linear_Unknown =
        
          -1.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstacleVelocityVariance_angular_Unknown =
        
          -1.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstacleRelativeVelocityVariance_linear_Unknown =
        
          -1.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::obstacleRelativeVelocityVariance_angular_Unknown =
        
          -1.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::groundHeight_Unknown =
        
          999.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::classificationProbability_Unknown =
        
          999.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleAlignment_1_<ContainerAllocator>::dateAcquisition_Unknown =
        
          999.0
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace message_project_s

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'delphi_srr_msgs': ['/home/dev/as_drivers_customer/install/share/delphi_srr_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'delphi_esr_msgs': ['/home/dev/as_drivers_customer/install/share/delphi_esr_msgs/cmake/../msg'], 'message_project_s': ['/home/segula/Desktop/ava/achitecture_ws/src/smart_sensor/message_project_s/msg'], 'radar_msgs': ['/home/dev/as_drivers_customer/install/share/radar_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mobileye_560_660_msgs': ['/home/dev/as_drivers_customer/install/share/mobileye_560_660_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "27f6a6ab5af7368643bc8a932319e35a";
  }

  static const char* value(const ::message_project_s::ObstacleAlignment_1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x27f6a6ab5af73686ULL;
  static const uint64_t static_value2 = 0x43bc8a932319e35aULL;
};

template<class ContainerAllocator>
struct DataType< ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "message_project_s/ObstacleAlignment_1";
  }

  static const char* value(const ::message_project_s::ObstacleAlignment_1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
std_msgs/UInt16 id\n\
\n\
geometry_msgs/Pose obstaclePosition	        		# obstacle position\n\
float64 obstaclePosition_linear_Unknown = 999\n\
float64 obstaclePosition_orientation_Unknown = 999\n\
\n\
geometry_msgs/Pose obstacleBodyCenter	        		# Obstacle Center for Corner Computation\n\
\n\
geometry_msgs/Twist obstacleVelocity	                    	# obstacle speed\n\
float64 obstacleVelocity_linear_Unknown = 999\n\
float64 obstacleVelocity_angular_Unknown = 999\n\
\n\
geometry_msgs/Twist obstacleRelativeVelocity	           	# obstacle relative velocity\n\
float64 obstacleRelativeVelocity_linear_Unknown = 999\n\
float64 obstacleRelativeVelocity_angular_Unknown = 999\n\
\n\
geometry_msgs/Accel obstacleAcceleration        		# obstacle acceleration\n\
float64 obstacleAcceleration_linear_Unknown = 999\n\
float64 obstacleAcceleration_angular_Unknown = 999\n\
\n\
geometry_msgs/Vector3 obstacleDimensions        		# obstacle - length and width\n\
float64 obstacleDimensions_Unknown = 999\n\
\n\
uint8 blinkerInfo                               		# blinker status (eg. left blinker on)\n\
uint8 blinkerInfo_Unknown=0\n\
\n\
uint8 cutInAndOut                               		# Vehicle cutting in or out of ego lane \n\
uint8 cutInAndOut_Unknown=0\n\
\n\
uint8 obstacleType                             			# obstacle classification\n\
uint8 obstacleType_Unknown=7\n\
\n\
uint8 obstacleStatus                            		# obstacle’s moving status\n\
uint8 obstacleStatus_Unknown=0\n\
\n\
bool obstacleBrakeLights                        		# obstacle brake light on or off\n\
bool obstacleBrakeLights_Unknown=0 \n\
\n\
int8 cipvFlag                                   		# If obstacle Closest in Path Vehicle\n\
int8 cipvFlag_Unknown=2\n\
\n\
int8 obstacleReplaced                           		# If obstacle replaced in this frame\n\
int8 obstacleReplaced_Unknown=2\n\
\n\
uint8 obstacleValid                             		# obstacle valid\n\
uint8 obstacleValid_Unknown=3\n\
\n\
uint16 obstacleAge                              		# obstacle age in number of frames\n\
uint16 obstacleAge_Unknown=256\n\
\n\
uint8 obstacleLane                              		# obstacle's lane (eg. ego lane or next lane)\n\
uint8 obstacleLane_Unknown=0\n\
\n\
float32 obstacleAngle                           		# angle to center of obstacle in degrees\n\
float32 obstacleAngle_Unknown = 999\n\
\n\
float32 obstacleAngleVariance                   		# Obstacle angle Variance (Lidar)\n\
float32 obstacleAngleVariance_Unknown=-1\n\
\n\
float32 obstacleAngleRate                       		# angle rate of the center of obstacle (degrees/sec)\n\
float32 obstacleAngleRate_Unknown = 999\n\
\n\
float64 obstacleScaleChange                     		# scale change from previous frame   \n\
float64 obstacleScaleChange_Unknown = 999\n\
                           \n\
uint8 visionOnlySignType                        		# Traffic Signal Recognition (TSR) sign type\n\
uint8 visionOnlySignType_Unknown=254\n\
\n\
uint8 visionOnlySupplementarySignType               		# Supplementary sign type - rain, snow, arrow etc. \n\
uint8 visionOnlySupplementarySignType_Unknown=0\n\
\n\
geometry_msgs/Vector3 signPosition                  		# X-Longitudnal position, Y-Lateral position ,Z-Height of sign relative to ME\n\
float64 signPosition_Unknown = 999\n\
\n\
float64 filterType                                    		# filtering \n\
float64 filterType_Unknown = 999\n\
\n\
geometry_msgs/Pose obstaclePoseVariance		                # obstacle position variance\n\
float64 obstaclePoseVariance_position_Unknown = -1\n\
float64 obstaclePoseVariance_orientation_Unknown = -1\n\
\n\
geometry_msgs/Twist obstacleVelocityVariance	                # obstacle speed variance\n\
float64 obstacleVelocityVariance_linear_Unknown = -1\n\
float64 obstacleVelocityVariance_angular_Unknown = -1\n\
\n\
geometry_msgs/Twist obstacleRelativeVelocityVariance	        # obstacle relative velocity variance\n\
float64 obstacleRelativeVelocityVariance_linear_Unknown = -1\n\
float64 obstacleRelativeVelocityVariance_angular_Unknown = -1\n\
\n\
std_msgs/Float32 groundHeight			                # ground height\n\
float64 groundHeight_Unknown = 999\n\
\n\
float64 classificationProbability\n\
float64 classificationProbability_Unknown = 999\n\
\n\
std_msgs/Float64 dateAcquisition\n\
float64 dateAcquisition_Unknown = 999\n\
\n\
\n\
# History\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt16\n\
uint16 data\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Accel\n\
# This expresses acceleration in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
================================================================================\n\
MSG: std_msgs/Float64\n\
float64 data\n\
";
  }

  static const char* value(const ::message_project_s::ObstacleAlignment_1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.obstaclePosition);
      stream.next(m.obstacleBodyCenter);
      stream.next(m.obstacleVelocity);
      stream.next(m.obstacleRelativeVelocity);
      stream.next(m.obstacleAcceleration);
      stream.next(m.obstacleDimensions);
      stream.next(m.blinkerInfo);
      stream.next(m.cutInAndOut);
      stream.next(m.obstacleType);
      stream.next(m.obstacleStatus);
      stream.next(m.obstacleBrakeLights);
      stream.next(m.cipvFlag);
      stream.next(m.obstacleReplaced);
      stream.next(m.obstacleValid);
      stream.next(m.obstacleAge);
      stream.next(m.obstacleLane);
      stream.next(m.obstacleAngle);
      stream.next(m.obstacleAngleVariance);
      stream.next(m.obstacleAngleRate);
      stream.next(m.obstacleScaleChange);
      stream.next(m.visionOnlySignType);
      stream.next(m.visionOnlySupplementarySignType);
      stream.next(m.signPosition);
      stream.next(m.filterType);
      stream.next(m.obstaclePoseVariance);
      stream.next(m.obstacleVelocityVariance);
      stream.next(m.obstacleRelativeVelocityVariance);
      stream.next(m.groundHeight);
      stream.next(m.classificationProbability);
      stream.next(m.dateAcquisition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleAlignment_1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::message_project_s::ObstacleAlignment_1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::message_project_s::ObstacleAlignment_1_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    s << std::endl;
    Printer< ::std_msgs::UInt16_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "obstaclePosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.obstaclePosition);
    s << indent << "obstacleBodyCenter: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleBodyCenter);
    s << indent << "obstacleVelocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleVelocity);
    s << indent << "obstacleRelativeVelocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleRelativeVelocity);
    s << indent << "obstacleAcceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleAcceleration);
    s << indent << "obstacleDimensions: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleDimensions);
    s << indent << "blinkerInfo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blinkerInfo);
    s << indent << "cutInAndOut: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cutInAndOut);
    s << indent << "obstacleType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacleType);
    s << indent << "obstacleStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacleStatus);
    s << indent << "obstacleBrakeLights: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacleBrakeLights);
    s << indent << "cipvFlag: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cipvFlag);
    s << indent << "obstacleReplaced: ";
    Printer<int8_t>::stream(s, indent + "  ", v.obstacleReplaced);
    s << indent << "obstacleValid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacleValid);
    s << indent << "obstacleAge: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.obstacleAge);
    s << indent << "obstacleLane: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacleLane);
    s << indent << "obstacleAngle: ";
    Printer<float>::stream(s, indent + "  ", v.obstacleAngle);
    s << indent << "obstacleAngleVariance: ";
    Printer<float>::stream(s, indent + "  ", v.obstacleAngleVariance);
    s << indent << "obstacleAngleRate: ";
    Printer<float>::stream(s, indent + "  ", v.obstacleAngleRate);
    s << indent << "obstacleScaleChange: ";
    Printer<double>::stream(s, indent + "  ", v.obstacleScaleChange);
    s << indent << "visionOnlySignType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.visionOnlySignType);
    s << indent << "visionOnlySupplementarySignType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.visionOnlySupplementarySignType);
    s << indent << "signPosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.signPosition);
    s << indent << "filterType: ";
    Printer<double>::stream(s, indent + "  ", v.filterType);
    s << indent << "obstaclePoseVariance: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.obstaclePoseVariance);
    s << indent << "obstacleVelocityVariance: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleVelocityVariance);
    s << indent << "obstacleRelativeVelocityVariance: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleRelativeVelocityVariance);
    s << indent << "groundHeight: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.groundHeight);
    s << indent << "classificationProbability: ";
    Printer<double>::stream(s, indent + "  ", v.classificationProbability);
    s << indent << "dateAcquisition: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.dateAcquisition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGE_PROJECT_S_MESSAGE_OBSTACLEALIGNMENT_1_H
