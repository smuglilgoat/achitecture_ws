// Generated by gencpp from file message_project_s/Time.msg
// DO NOT EDIT!


#ifndef MESSAGE_PROJECT_S_MESSAGE_TIME_H
#define MESSAGE_PROJECT_S_MESSAGE_TIME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace message_project_s
{
template <class ContainerAllocator>
struct Time_
{
  typedef Time_<ContainerAllocator> Type;

  Time_()
    : header()
    , id()
    , Tn()
    , Tn_1()
    , Ti()
    , iMIN()  {
    }
  Time_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(_alloc)
    , Tn(_alloc)
    , Tn_1(_alloc)
    , Ti(_alloc)
    , iMIN(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _Tn_type;
  _Tn_type Tn;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _Tn_1_type;
  _Tn_1_type Tn_1;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _Ti_type;
  _Ti_type Ti;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _iMIN_type;
  _iMIN_type iMIN;





  typedef boost::shared_ptr< ::message_project_s::Time_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::message_project_s::Time_<ContainerAllocator> const> ConstPtr;

}; // struct Time_

typedef ::message_project_s::Time_<std::allocator<void> > Time;

typedef boost::shared_ptr< ::message_project_s::Time > TimePtr;
typedef boost::shared_ptr< ::message_project_s::Time const> TimeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::message_project_s::Time_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::message_project_s::Time_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace message_project_s

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'delphi_srr_msgs': ['/home/dev/as_drivers_customer/install/share/delphi_srr_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'delphi_esr_msgs': ['/home/dev/as_drivers_customer/install/share/delphi_esr_msgs/cmake/../msg'], 'message_project_s': ['/home/segula/Desktop/ava/achitecture_ws/src/smart_sensor/message_project_s/msg'], 'radar_msgs': ['/home/dev/as_drivers_customer/install/share/radar_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mobileye_560_660_msgs': ['/home/dev/as_drivers_customer/install/share/mobileye_560_660_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::message_project_s::Time_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::message_project_s::Time_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::message_project_s::Time_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::message_project_s::Time_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message_project_s::Time_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message_project_s::Time_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::message_project_s::Time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8478fcb0a41d3039f22925b77479cd7f";
  }

  static const char* value(const ::message_project_s::Time_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8478fcb0a41d3039ULL;
  static const uint64_t static_value2 = 0xf22925b77479cd7fULL;
};

template<class ContainerAllocator>
struct DataType< ::message_project_s::Time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "message_project_s/Time";
  }

  static const char* value(const ::message_project_s::Time_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::message_project_s::Time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
std_msgs/UInt8 id\n\
\n\
std_msgs/Float64 Tn\n\
std_msgs/Float64 Tn_1\n\
std_msgs/Float64 Ti\n\
std_msgs/Float64 iMIN\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt8\n\
uint8 data\n\
\n\
================================================================================\n\
MSG: std_msgs/Float64\n\
float64 data\n\
";
  }

  static const char* value(const ::message_project_s::Time_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::message_project_s::Time_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.Tn);
      stream.next(m.Tn_1);
      stream.next(m.Ti);
      stream.next(m.iMIN);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Time_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::message_project_s::Time_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::message_project_s::Time_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "Tn: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.Tn);
    s << indent << "Tn_1: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.Tn_1);
    s << indent << "Ti: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.Ti);
    s << indent << "iMIN: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.iMIN);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGE_PROJECT_S_MESSAGE_TIME_H
